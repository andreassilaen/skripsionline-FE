// ScanNewBatch
import {
  Box,
  Paper,
  Table,
  TableHead,
  FormControl,
  InputLabel,
  Select,
  Grid,
  Button,
  TextField,
  TableRow,
  TableCell,
  Typography,
  Modal,
  Divider,
  TableBody,
  MenuItem,
  Collapse,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Icon,
  Autocomplete,
} from "@mui/material";
import { useCallback, useEffect, useRef, useState } from "react";
import LogoutIcon from "@mui/icons-material/Logout";
import { AddCircle, CheckBox } from "@mui/icons-material";
import ArrowDropUpIcon from "@mui/icons-material/ArrowDropUp";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import qr from "../../services/qr";
import { debounce, set, isUndefined } from "lodash";
import { formatDate } from "../../utils/text";
import { detailApprovalBool, setDetailApprovalBool } from "../approval/index";

import { styled } from "@mui/material/styles";
import { getStorage } from "../../utils/storage";
const Item = styled(Paper)(({ theme }) => ({
  backgroundColor: theme.palette.mode === "dark" ? "#1A2027" : "#fff",
  ...theme.typography.body2,
  padding: theme.spacing(1),
  textAlign: "center",
  color: theme.palette.text.secondary,
}));

const ScanNewBatch = () => {
  const styleModalErr = {
    position: "absolute",
    top: "30%",
    left: "60%",
    transform: "translate(-50%, -50%)",
    width: "35%",
    bgcolor: "background.paper",
    p: 4,
  };

  const styleModalStart = {
    position: "absolute",
    top: "30%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: "35%",
    bgcolor: "background.paper",
    p: 4,
  };

  const [listMasterBox, setListMasterBox] = useState([]);
  // const [selectProduct, setSelectProduct] = useState("");
  const [selectBatchNumber, setSelectBatchNumber] = useState("");
  const [modalScanBatch, setModalScanBatch] = useState(false);
  const [flag, setFlag] = useState("Y");
  const test = "12346 - Name of Product 2";
  const test1 = "AAAA-123456-01";
  const test2 = "10 UB";
  const test3 = "DBL653783700870A1";
  const test4 = "03 January 2023";
  const test5 = "23 June 2025";
  const [collapseDetailScanNewBatch, setCollapseDetailScanNewBatch] =
    useState(true);

  const [masterCodeBox, setMasterCodeBox] = useState("");
  const [unitBox1, setUnitBox1] = useState([]);
  const [unitBox2, setUnitBox2] = useState("");
  const [unitBox3, setUnitBox3] = useState("");
  const [unitBox4, setUnitBox4] = useState("");
  const [unitBox5, setUnitBox5] = useState("");
  const [unitBox6, setUnitBox6] = useState("");
  const [unitBox7, setUnitBox7] = useState("");
  const [unitBox8, setUnitBox8] = useState("");
  const [unitBox9, setUnitBox9] = useState("");
  const [unitBox10, setUnitBox10] = useState("");

  const [masterBoxDisable, setMasterBoxDisable] = useState(true);
  const [unitBox1Disabled, setUnitBox1Disabled] = useState(true);
  const [unitBox2Disabled, setUnitBox2Disabled] = useState(true);
  const [unitBox3Disabled, setUnitBox3Disabled] = useState(true);
  const [unitBox4Disabled, setUnitBox4Disabled] = useState(true);
  const [unitBox5Disabled, setUnitBox5Disabled] = useState(true);
  const [unitBox6Disabled, setUnitBox6Disabled] = useState(true);
  const [unitBox7Disabled, setUnitBox7Disabled] = useState(true);
  const [unitBox8Disabled, setUnitBox8Disabled] = useState(true);
  const [unitBox9Disabled, setUnitBox9Disabled] = useState(true);
  const [unitBox10Disabled, setUnitBox10Disabled] = useState(true);

  const [modalStartScanNewBatch, setModalStartScanNewBatch] = useState(false);
  const [modalScanningPackagingNotFull, setModalScanningPackagingNotFull] =
    useState(false);
  const [
    modalScanningPackagingNotFullFinish,
    setModalScanningPackagingNotFullFinish,
  ] = useState(false);
  const [modalPackingSelesai, setModalPackingSelesai] = useState(false);
  const [modalPackingSelesai2, setModalPackingSelesai2] = useState(false);
  const [modalValidationSaveAndFinish, setModalValidationSaveAndFinish] =
    useState(false);
  const [modalValidatonUnitBox10, setModalValidatonUnitBox10] = useState(false);
  const [modalSeeMbList, setModalSeeMbList] = useState(false);

  const [collapseDeleteUnitBox1, setCollapseDeleteUnitBox1] = useState(false);
  const [collapseDeleteUnitBox2, setCollapseDeleteUnitBox2] = useState(false);
  const [collapseDeleteUnitBox3, setCollapseDeleteUnitBox3] = useState(false);
  const [collapseDeleteUnitBox4, setCollapseDeleteUnitBox4] = useState(false);
  const [collapseDeleteUnitBox5, setCollapseDeleteUnitBox5] = useState(false);
  const [collapseDeleteUnitBox6, setCollapseDeleteUnitBox6] = useState(false);
  const [collapseDeleteUnitBox7, setCollapseDeleteUnitBox7] = useState(false);
  const [collapseDeleteUnitBox8, setCollapseDeleteUnitBox8] = useState(false);
  const [collapseDeleteUnitBox9, setCollapseDeleteUnitBox9] = useState(false);
  const [collapseDeleteUnitBox10, setCollapseDeleteUnitBox10] = useState(false);

  const [collapseEditUnitBox1, setCollapseEditUnitBox1] = useState(true);
  const [collapseEditUnitBox2, setCollapseEditUnitBox2] = useState(false);
  const [collapseEditUnitBox3, setCollapseEditUnitBox3] = useState(false);
  const [collapseEditUnitBox4, setCollapseEditUnitBox4] = useState(false);
  const [collapseEditUnitBox5, setCollapseEditUnitBox5] = useState(false);
  const [collapseEditUnitBox6, setCollapseEditUnitBox6] = useState(false);
  const [collapseEditUnitBox7, setCollapseEditUnitBox7] = useState(false);
  const [collapseEditUnitBox8, setCollapseEditUnitBox8] = useState(false);
  const [collapseEditUnitBox9, setCollapseEditUnitBox9] = useState(false);
  const [collapseEditUnitBox10, setCollapseEditUnitBox10] = useState(false);

  const [collapseSaveUnitBox1, setCollapseSaveUnitBox1] = useState(false);
  const [collapseSaveUnitBox2, setCollapseSaveUnitBox2] = useState(false);
  const [collapseSaveUnitBox3, setCollapseSaveUnitBox3] = useState(false);
  const [collapseSaveUnitBox4, setCollapseSaveUnitBox4] = useState(false);
  const [collapseSaveUnitBox5, setCollapseSaveUnitBox5] = useState(false);
  const [collapseSaveUnitBox6, setCollapseSaveUnitBox6] = useState(false);
  const [collapseSaveUnitBox7, setCollapseSaveUnitBox7] = useState(false);
  const [collapseSaveUnitBox8, setCollapseSaveUnitBox8] = useState(false);
  const [collapseSaveUnitBox9, setCollapseSaveUnitBox9] = useState(false);
  const [collapseSaveUnitBox10, setCollapseSaveUnitBox10] = useState(false);

  const [unitBox1EditVar, setUnitBox1EditVar] = useState("");
  const [unitBox2EditVar, setUnitBox2EditVar] = useState("");
  const [unitBox3EditVar, setUnitBox3EditVar] = useState("");
  const [unitBox4EditVar, setUnitBox4EditVar] = useState("");
  const [unitBox5EditVar, setUnitBox5EditVar] = useState("");
  const [unitBox6EditVar, setUnitBox6EditVar] = useState("");
  const [unitBox7EditVar, setUnitBox7EditVar] = useState("");
  const [unitBox8EditVar, setUnitBox8EditVar] = useState("");
  const [unitBox9EditVar, setUnitBox9EditVar] = useState("");
  const [unitBox10EditVar, setUnitBox10EditVar] = useState("");

  const [collapsePackagingSelesaiButton, setCollapsePackagingSelesaiButton] =
    useState(false);
  const [
    collapseDetailScanNewBatchButtonUp,
    setCollapseDetailScanNewBatchButtonUp,
  ] = useState(true);
  const [
    collapseDetailScanNewBatchButtonDown,
    setCollapseDetailScanNewBatchButtonDown,
  ] = useState(false);
  const [collapseAddButton, setCollapseAddButton] = useState(false);

  const unitBox1Ref = useRef();
  const unitBox2Ref = useRef();
  const unitBox3Ref = useRef();
  const unitBox4Ref = useRef();
  const unitBox5Ref = useRef();
  const unitBox6Ref = useRef();
  const unitBox7Ref = useRef();
  const unitBox8Ref = useRef();
  const unitBox9Ref = useRef();
  const unitBox10Ref = useRef();
  const unitBox11Ref = useRef();

  const [listProduct, setListProduct] = useState([]);
  const [listHeader, setListHeader] = useState("");
  const [listSeeMB, setListSeeMB] = useState([]);
  const [listScanningPackaging, setListScanningPackaging] = useState([]);

  const [payloadHeader, setPayloadHeader] = useState([]);

  const [selectedProdDate, setSelectedProdDate] = useState("");
  const [selectedExpDate, setSelectedExpDate] = useState("");

  const [checkedSample, setCheckedSample] = useState(false);

  const [detailBool, setDetailBool] = useState(false);

  const [disableUnitBox1, setDisableUnitBox1] = useState(true);
  const [disableUnitBox2, setDisableUnitBox2] = useState(true);
  const [disableUnitBox3, setDisableUnitBox3] = useState(true);
  const [disableUnitBox4, setDisableUnitBox4] = useState(true);
  const [disableUnitBox5, setDisableUnitBox5] = useState(true);
  const [disableUnitBox6, setDisableUnitBox6] = useState(true);
  const [disableUnitBox7, setDisableUnitBox7] = useState(true);
  const [disableUnitBox8, setDisableUnitBox8] = useState(true);
  const [disableUnitBox9, setDisableUnitBox9] = useState(true);
  const [disableUnitBox10, setDisableUnitBox10] = useState(true);

  const [listSample, setListSample] = useState(false);

  const [collapseUnitBox11, setCollapseUnitBox11] = useState(false);
  const [unitBox11Disabled, setUnitBox11Disabled] = useState(false);
  const [unitBox11, setUnitBox11] = useState("");
  const [modalValidationFullUB, setModalValidationFullUB] = useState(false);

  const [modalValidationMBCode, setModalValidationMBCode] = useState(false);
  const [modalValidationUBCode, setModalValidationUBCode] = useState(false);
  const [modalValidationUBBoxFull, setModalValidationUBBoxFull] =
    useState(false);

  const [testing, setTesting] = useState([]);

  const [disableTestBox1, setDisableTestBox1] = useState(true);
  const [isOpen, setIsOpen] = useState([]);
  // const tempArrUnitBox = testing;
  const [testingArr, setTestingArr] = useState([]);
  const [testingArr2, setTestingArr2] = useState([]);
  const [productTest, setProductTest] = useState([]);
  // -------------------------------------------------------
  const [MBBox, setMBBox] = useState("");
  const [unitBox1Edit, setUnitBox1Edit] = useState([]);
  const [unitBox2Edit, setUnitBox2Edit] = useState("");
  const [unitBox3Edit, setUnitBox3Edit] = useState("");
  const [unitBox4Edit, setUnitBox4Edit] = useState("");
  const [unitBox5Edit, setUnitBox5Edit] = useState("");
  const [unitBox6Edit, setUnitBox6Edit] = useState("");
  const [unitBox7Edit, setUnitBox7Edit] = useState("");
  const [unitBox8Edit, setUnitBox8Edit] = useState("");
  const [unitBox9Edit, setUnitBox9Edit] = useState("");
  const [unitBox10Edit, setUnitBox10Edit] = useState("");
  const scanData = [];
  const [mbSizeDetail, setMbsizeDetail] = useState([]);

  const [called, isCalled] = useState(false);

  const [ubBox, setUbBox] = useState();

  const [selectProduct, setSelectProduct] = useState({
    pro_name: "",
    pro_code: "",
  });

  const [totalArr, setTotalArr] = useState([]);

  const accessList = getStorage("access_list");

  // const [unit1, setUnit1] = useState(0);
  // const [unit2, setUnit2] = useState(0);
  // const [unit3, setUnit3] = useState(0);
  // const [unit4, setUnit4] = useState(0);
  // const [unit5, setUnit5] = useState(0);
  // const [unit6, setUnit6] = useState(0);
  // const [unit7, setUnit7] = useState(0);
  // const [unit8, setUnit8] = useState(0);
  // const [unit9, setUnit9] = useState(0);
  // const [unit10, setUnit10] = useState(0);

  useEffect(() => {
    if (!isUndefined(accessList)) {
      var parsedAccess = JSON.parse(accessList);
      if (
        !parsedAccess["QR_BPOM_SCAN_NEW_BATCH"].includes(
          "QR_BPOM_SCAN_NEW_BATCH_CREATE"
        )
      ) {
        router.push("/403");
      }
    } else {
      router.push("/403");
    }
  }, [accessList]);

  // const [boolDelete, setBoolDelete] = useState(false);
  async function start(item) {
    if (
      selectBatchNumber === "" ||
      selectBatchNumber === undefined ||
      selectProduct === "" ||
      selectProduct === undefined ||
      selectedProdDate === "" ||
      selectedProdDate === undefined ||
      selectedExpDate === "" ||
      selectedExpDate === undefined
    ) {
      setModalScanBatch(true);
    }
    if (
      selectBatchNumber !== "" &&
      selectProduct !== "" &&
      selectedProdDate !== "" &&
      selectedExpDate !== ""
    ) {
      setModalStartScanNewBatch(true);
    }
    console.log("selectBatchNumber", selectBatchNumber);
    console.log("getproduct", listProduct);
  }

  async function start2() {
    var z;
    debounceMountCreateHeaderNewBatch();
    setFlag("D");
  }

  async function hideDetailScanNewBatch() {
    console.log("listHeader", listHeader);
    setCollapseDetailScanNewBatch(false);
    setCollapseDetailScanNewBatchButtonUp(false);
    setCollapseDetailScanNewBatchButtonDown(true);
  }

  async function showDetailScanNewBatch() {
    setCollapseDetailScanNewBatch(true);
    setCollapseDetailScanNewBatchButtonUp(true);
    setCollapseDetailScanNewBatchButtonDown(false);
  }

  async function packaging() {
    setFlag("P");
    setCollapseSaveUnitBox1(false);
    setCollapseSaveUnitBox2(false);
    setCollapseSaveUnitBox3(false);
    setCollapseSaveUnitBox4(false);
    setCollapseSaveUnitBox5(false);
    setCollapseSaveUnitBox6(false);
    setCollapseSaveUnitBox7(false);
    setCollapseSaveUnitBox8(false);
    setCollapseSaveUnitBox9(false);
    setCollapseSaveUnitBox10(false);
    // setTesting(tempArrMbSize);
    if (listHeader.scan_mbsize !== "") {
      var z;
      for (z = 1; z <= listHeader.scan_mbsize; z++) {
        // tempArrMbSize.push(z);
        tempArrMbSize.push("");
        // setTesting(z);
      }
      setTesting(tempArrMbSize);
      console.log("testinggggggggz", testing);
      // tempArrMapTest.push(unitBox1);
      // setProduct(tempArrMapTest);
    }
  }

  useEffect(() => {
    console.log("detailBool", detailBool);
    if (masterCodeBox === "") {
      setMasterBoxDisable(false);
    }
    if (detailBool !== true) {
      setUnitBox1Disabled(false);
      if (
        // masterCodeBox !== 0 &&
        // masterCodeBox !== "" &&
        // masterCodeBox.length >= 58
        masterCodeBox.length >= 58
      ) {
        unitBox1Ref[`item${0}`].focus();
        setMasterBoxDisable(true);
        setDisableTestBox1(false);
        console.log("testRef", unitBox1Ref[`item${0}`]);
      }
      console.log("MasterBoxDisable", masterBoxDisable);
    }
    // var input = testing[index];
    // if()
    if (flag === "Y") {
      debounceMountGetListAllProduct();
      console.log("getlistallproduct");
    }

    // ---------- validasi button edit di menu scanning packaging ----------
    // const tempArrMapTest = [];

    // console.log("testSetProduct", product);
    // ---------------------------------------------------------------------
  }, [
    // testing,

    masterCodeBox,
    unitBox1Disabled,
    unitBox1,
    unitBox2Disabled,
    unitBox2,
    unitBox3Disabled,
    unitBox3,
    unitBox4Disabled,
    unitBox4,
    unitBox5Disabled,
    unitBox5,
    unitBox6Disabled,
    unitBox6,
    unitBox7Disabled,
    unitBox7,
    unitBox8Disabled,
    unitBox8,
    unitBox9Disabled,
    unitBox9,
    unitBox10Disabled,
    unitBox10,
    detailBool,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,
  ]);

  // useEffect(() => {
  //   console.log("boolApproval-ScanNewBatch", detailApprovalBool);
  // }, [detailApprovalBool]);

  async function saveAndContinueButton() {
    if (
      (unitBox1 !== 0 && unitBox1 !== []) ||
      (unitBox2 !== 0 && unitBox2 !== "") ||
      (unitBox3 !== 0 && unitBox3 !== "") ||
      (unitBox4 !== 0 && unitBox4 !== "") ||
      (unitBox5 !== 0 && unitBox5 !== "") ||
      (unitBox6 !== 0 && unitBox6 !== "") ||
      (unitBox7 !== 0 && unitBox7 !== "") ||
      (unitBox8 !== 0 && unitBox8 !== "") ||
      (unitBox9 !== 0 && unitBox9 !== "")
    ) {
      setModalScanningPackagingNotFull(true);
    }
    if (masterCodeBox === "") {
      setModalValidationSaveAndFinish(true);
    }
    if (unitBox10 !== 0 && unitBox10 !== "") {
      console.log("testmasooooooooook");
      saveAndContinueFinish();
    }
    // setBoolDelete(false);
  }

  async function saveAndContinueFinish() {
    console.log("testArray", inputValue);
    var x;
    // const arrS = [];
    console.log("inputValue[1]", inputValue[1]);
    console.log("inputValue", inputValue);
    var y;
    y = 0;
    for (x = 1; x <= listHeader.scan_mbsize; x++) {
      if (testingArr[x] !== "") {
        testingArr2.push(testingArr[y]);
        y++;
      }
    }
    setProductTest(testingArr2);

    console.log("testingFinish", testingArr);
    console.log("testingFinish2", testingArr[0]);
    // console.log("testArray2", tempArrUnitBox);
    debounceMountGetListMasterBox(listHeader.scan_id);
    console.log("sampleyn", checkedSample);
    setCheckedSample(false);

    setCollapsePackagingSelesaiButton(true);
    console.log(
      "setCollapsePackagingSelesaiButton",
      collapsePackagingSelesaiButton
    );
    mountCreateDetailNewBatch();

    setMasterCodeBox("");
    setUnitBox1("");
    setUnitBox2("");
    setUnitBox3("");
    setUnitBox4("");
    setUnitBox5("");
    setUnitBox6("");
    setUnitBox7("");
    setUnitBox8("");
    setUnitBox9("");
    setUnitBox10("");
    for (y = 0; y < scanData.length; y++) {
      unitBox1EditKeep.push(scanData[y].scan_ubid);
      unitBox1EditKeepStr.push("");
      console.log("testLoopBoxEdit", scanData[y].scan_ubid);
    }
    setTesting(unitBox1EditKeep);

    setCollapseDeleteUnitBox1(false);
    setCollapseDeleteUnitBox2(false);
    setCollapseDeleteUnitBox3(false);
    setCollapseDeleteUnitBox4(false);
    setCollapseDeleteUnitBox5(false);
    setCollapseDeleteUnitBox6(false);
    setCollapseDeleteUnitBox7(false);
    setCollapseDeleteUnitBox8(false);
    setCollapseDeleteUnitBox9(false);
    setCollapseDeleteUnitBox10(false);

    setUnitBox1Disabled(true);
    setUnitBox2Disabled(true);
    setUnitBox3Disabled(true);
    setUnitBox4Disabled(true);
    setUnitBox5Disabled(true);
    setUnitBox6Disabled(true);
    setUnitBox7Disabled(true);
    setUnitBox8Disabled(true);
    setUnitBox9Disabled(true);
    setUnitBox10Disabled(true);

    setModalScanningPackagingNotFull(false);
    setModalScanningPackagingNotFullFinish(false);

    setDetailBool(false);
    setProductTest([]);
    setTestingArr2([]);
    // setTesting([]);
  }

  const style = {
    position: "absolute",
    top: "25%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 600,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    pt: 2,
    px: 4,
    pb: 3,
  };

  async function deleteUnitBox1(index) {
    console.log("arr penampung", testing);
    console.log("index", index);
    var tempArr = [...testing];
    tempArr[index] = "";
    console.log("temparr final", tempArr);
    setTesting(tempArr);
    unitBox1Ref[`item${index}`].focus();
    // // const tempArrUnitBox = testing;
    // // setUnitBox1([]);
    // // testing.push[0]("");
    // console.log("indexDelete", index);
    // console.log("unitBox1", testing);
    // // setUnitBox1[0]("");
    // // unitBox1[0].push("");
    // setCollapseDeleteUnitBox1(false);
    // setUnitBox1Disabled(false);
    // // setUnit1(0);
    // // setBoolDelete(true);
    // const id = e.target.getAttribute("id");
    // if (id === `item${index}`) {
    //   // tempArrUnitBox[index].name = e.target.value;
    //   // tempArrUnitBox[index] = "";
    //   // inputValue[index] = "";
    //   console.log("testing[index]", testing[index]);
    //   console.log("inputValue[index]", inputValue[index]);
    //   if (tempArrUnitBox !== "") {
    //     inputValue = tempArrUnitBox;
    //   }
    //   // var input = inputValue[index];
    //   // console.log("input", input);
    //   // if (input.length >= 10 && index !== listHeader.scan_mbsize) {
    //   //   // if (index !== listHeader.scan_mbsize) {
    //   //   unitBox1Ref[`item${index + 1}`].focus();
    //   //   setDisableTestBox1([`item${index + 1}`].false);
    //   //   // setDisableTestBox1[`item${index + 1}`](false);
    //   //   // disableTestBox1[`item${index + 1}`] = false;
    //   //   // }
    //   // }
    // }
  }

  // async function deleteUnitBox2() {
  //   setUnitBox2("");
  //   setCollapseDeleteUnitBox2(false);
  //   setUnitBox2Disabled(false);
  //   // setUnit2(0);
  //   // setBoolDelete(true);
  // }

  // async function deleteUnitBox3() {
  //   setUnitBox3("");
  //   setCollapseDeleteUnitBox3(false);
  //   setUnitBox3Disabled(false);
  //   // setUnit3(0);
  //   // setBoolDelete(true);
  // }

  // async function deleteUnitBox4() {
  //   setUnitBox4("");
  //   setCollapseDeleteUnitBox4(false);
  //   setUnitBox4Disabled(false);
  //   // setUnit4(0);
  //   // setBoolDelete(true);
  // }

  // async function deleteUnitBox5() {
  //   setUnitBox5("");
  //   setCollapseDeleteUnitBox5(false);
  //   setUnitBox5Disabled(false);
  //   // setUnit5(0);
  //   // setBoolDelete(true);
  // }

  // async function deleteUnitBox6() {
  //   setUnitBox6("");
  //   setCollapseDeleteUnitBox6(false);
  //   setUnitBox6Disabled(false);
  //   // setUnit6(0);
  //   // setBoolDelete(true);
  // }

  // async function deleteUnitBox7() {
  //   setUnitBox7("");
  //   setCollapseDeleteUnitBox7(false);
  //   setUnitBox7Disabled(false);
  //   // setUnit7(0);
  //   // setBoolDelete(true);
  // }

  // async function deleteUnitBox8() {
  //   setUnitBox8("");
  //   setCollapseDeleteUnitBox8(false);
  //   setUnitBox8Disabled(false);
  //   // setUnit8(0);
  //   // setBoolDelete(true);
  // }

  // async function deleteUnitBox9() {
  //   setUnitBox9("");
  //   setCollapseDeleteUnitBox9(false);
  //   setUnitBox9Disabled(false);
  //   // setUnit9(0);
  //   // setBoolDelete(true);
  // }

  // async function deleteUnitBox10() {
  //   setUnitBox10("");
  //   setCollapseDeleteUnitBox10(false);
  //   setUnitBox10Disabled(false);
  //   // setUnit10(0);
  //   // setBoolDelete(true);
  // }

  // ------- Edit Unit Box Function -------

  // async function editUnitBox1() {
  //   setUnitBox1Disabled(false);
  //   setCollapseEditUnitBox1(false);
  //   setCollapseSaveUnitBox1(true);
  //   setUnitBox1EditVar(unitBox1Edit);
  //   setUnitBox1Edit("");

  //   console.log("product", product);
  //   console.log("savebutton(click edit)", collapseSaveUnitBox1);
  // }
  // async function editUnitBox2() {
  //   setUnitBox2Disabled(false);
  //   setCollapseEditUnitBox2(false);
  //   setCollapseSaveUnitBox2(true);
  //   setUnitBox2EditVar(unitBox2Edit);
  //   setUnitBox2Edit("");
  // }
  // async function editUnitBox3() {
  //   setUnitBox3Disabled(false);
  //   setCollapseEditUnitBox3(false);
  //   setCollapseSaveUnitBox3(true);
  //   setUnitBox3EditVar(unitBox3Edit);
  //   setUnitBox3Edit("");
  // }
  // async function editUnitBox4() {
  //   setUnitBox4Disabled(false);
  //   setCollapseEditUnitBox4(false);
  //   setCollapseSaveUnitBox4(true);
  //   setUnitBox4EditVar(unitBox4Edit);
  //   setUnitBox4Edit("");
  // }
  // async function editUnitBox5() {
  //   setUnitBox5Disabled(false);
  //   setCollapseEditUnitBox5(false);
  //   setCollapseSaveUnitBox5(true);
  //   setUnitBox5EditVar(unitBox5Edit);
  //   setUnitBox5Edit("");
  // }
  // async function editUnitBox6() {
  //   setUnitBox1Disabled(false);
  //   setCollapseEditUnitBox6(false);
  //   setCollapseSaveUnitBox6(true);
  //   setUnitBox6EditVar(unitBox6Edit);
  //   setUnitBox6Edit("");
  // }
  // async function editUnitBox7() {
  //   setUnitBox7Disabled(false);
  //   setCollapseEditUnitBox7(false);
  //   setCollapseSaveUnitBox7(true);
  //   setUnitBox7EditVar(unitBox7Edit);
  //   setUnitBox7Edit("");
  // }
  // async function editUnitBox8() {
  //   setUnitBox8Disabled(false);
  //   setCollapseEditUnitBox8(false);
  //   setCollapseSaveUnitBox8(true);
  //   setUnitBox8EditVar(unitBox8Edit);
  //   setUnitBox8Edit("");
  // }
  // async function editUnitBox9() {
  //   setUnitBox9Disabled(false);
  //   setCollapseEditUnitBox9(false);
  //   setCollapseSaveUnitBox9(true);
  //   setUnitBox9EditVar(unitBox9Edit);
  //   setUnitBox9Edit("");
  // }
  // async function editUnitBox10() {
  //   setUnitBox10Disabled(false);
  //   setCollapseEditUnitBox10(false);
  //   setCollapseSaveUnitBox10(true);
  //   setUnitBox10EditVar(unitBox10Edit);
  //   setUnitBox10Edit("");
  // }
  // --------------------------------------

  // -------- Save Unit Box Button Function --------
  // async function saveUnitBox1() {
  //   setUnitBox1Disabled(true);
  //   setCollapseEditUnitBox1(true);
  //   setCollapseSaveUnitBox1(false);
  //   console.log("unitBox1EditVar", unitBox1EditVar);
  //   console.log("productEdit", productEdit);
  //   console.log("saveButton", collapseSaveUnitBox1);
  //   console.log("unitBox1Edit(click save)", unitBox1Edit);
  //   if (unitBox1Edit === "") {
  //     setUnitBox1Edit(unitBox1EditVar);
  //   }
  // }
  // async function saveUnitBox2() {
  //   setUnitBox2Disabled(true);
  //   setCollapseEditUnitBox2(true);
  //   setCollapseSaveUnitBox2(false);
  //   console.log("productEdit", productEdit);
  //   console.log("saveButton", collapseSaveUnitBox1);
  //   console.log("unitBox1Edit(click save)", unitBox1Edit);
  //   if (unitBox2Edit === "") {
  //     setUnitBox2Edit(unitBox2EditVar);
  //   }
  // }
  // async function saveUnitBox3() {
  //   setUnitBox3Disabled(true);
  //   setCollapseEditUnitBox3(true);
  //   setCollapseSaveUnitBox3(false);
  //   console.log("productEdit", productEdit);
  //   console.log("saveButton", collapseSaveUnitBox1);
  //   console.log("unitBox1Edit(click save)", unitBox1Edit);
  //   if (unitBox3Edit === "") {
  //     setUnitBox3Edit(unitBox3EditVar);
  //   }
  // }
  // async function saveUnitBox4() {
  //   setUnitBox4Disabled(true);
  //   setCollapseEditUnitBox4(true);
  //   setCollapseSaveUnitBox4(false);
  //   console.log("productEdit", productEdit);
  //   console.log("saveButton", collapseSaveUnitBox1);
  //   console.log("unitBox1Edit(click save)", unitBox1Edit);
  //   if (unitBox4Edit === "") {
  //     setUnitBox4Edit(unitBox4EditVar);
  //   }
  // }
  // async function saveUnitBox5() {
  //   setUnitBox5Disabled(true);
  //   setCollapseEditUnitBox5(true);
  //   setCollapseSaveUnitBox5(false);
  //   console.log("productEdit", productEdit);
  //   console.log("saveButton", collapseSaveUnitBox1);
  //   console.log("unitBox1Edit(click save)", unitBox1Edit);
  //   if (unitBox5Edit === "") {
  //     setUnitBox5Edit(unitBox5EditVar);
  //   }
  // }
  // async function saveUnitBox6() {
  //   setUnitBox6Disabled(true);
  //   setCollapseEditUnitBox6(true);
  //   setCollapseSaveUnitBox6(false);
  //   if (unitBox6Edit === "") {
  //     setUnitBox6Edit(unitBox6EditVar);
  //   }
  // }
  // async function saveUnitBox7() {
  //   setUnitBox7Disabled(true);
  //   setCollapseEditUnitBox7(true);
  //   setCollapseSaveUnitBox7(false);
  //   if (unitBox7Edit === "") {
  //     setUnitBox7Edit(unitBox7EditVar);
  //   }
  // }
  // async function saveUnitBox8() {
  //   setUnitBox8Disabled(true);
  //   setCollapseEditUnitBox8(true);
  //   setCollapseSaveUnitBox8(false);
  //   if (unitBox8Edit === "") {
  //     setUnitBox8Edit(unitBox8EditVar);
  //   }
  // }
  // async function saveUnitBox9() {
  //   setUnitBox9Disabled(true);
  //   setCollapseEditUnitBox9(true);
  //   setCollapseSaveUnitBox9(false);
  //   if (unitBox9Edit === "") {
  //     setUnitBox9Edit(unitBox9EditVar);
  //   }
  // }
  // async function saveUnitBox10() {
  //   setUnitBox10Disabled(true);
  //   setCollapseEditUnitBox10(true);
  //   setCollapseSaveUnitBox10(false);
  //   if (unitBox10Edit === "") {
  //     setUnitBox10Edit(unitBox10EditVar);
  //   }
  // }
  // --------------------------------------------------

  async function packingFinish() {
    setModalPackingSelesai(true);
  }

  async function packingFinishModal() {
    setModalPackingSelesai2(false);
    setModalPackingSelesai(false);
    setFlag("Y");
    setModalStartScanNewBatch(false);
  }

  async function finishScanningPackaging() {
    var i;
    if (detailBool !== true) {
      for (i = 0; i < totalArr.length; i++) {
        if (
          // (unitBox1 !== 0 && unitBox1 !== []) ||
          // (unitBox2 !== 0 && unitBox2 !== "") ||
          // (unitBox3 !== 0 && unitBox3 !== "") ||
          // (unitBox4 !== 0 && unitBox4 !== "") ||
          // (unitBox5 !== 0 && unitBox5 !== "") ||
          // (unitBox6 !== 0 && unitBox6 !== "") ||
          // (unitBox7 !== 0 && unitBox7 !== "") ||
          // (unitBox8 !== 0 && unitBox8 !== "") ||
          // (unitBox9 !== 0 && unitBox9 !== "")
          totalArr[i] === ""
        ) {
          setModalScanningPackagingNotFullFinish(true);
          console.log("masuk1", i);
          break;
        }
        if (totalArr[totalArr.length - 1] !== "") {
          setFlag("D");
          console.log("product", product);
          saveAndContinueFinish();
          console.log("masuk2", i);
          console.log("totalArr.length-masuk2", totalArr.length);

          break;
        }
        console.log("masuk0", i);
        console.log("totalArr.length", totalArr.length);
      }
      if (masterCodeBox === "") {
        setModalValidationSaveAndFinish(true);
      }

      //   for (i = 0; i<totalArr.length ; i++){
      //   if (
      //     // unitBox10 !== 0 && unitBox10 !== ""
      //     totalArr[i] !== ""
      //     ) {
      //     setFlag("D");
      //     console.log("product", product);
      //     saveAndContinueFinish();
      //   }
      // }
      console.log("totalArr", totalArr);
      console.log("masokDetail");
    }

    if (detailBool === true) {
      setFlag("D");
      mountUpdateUBID();
      setUnitBox1Edit([]);
      setDetailBool(false);
      setProduct([]);
      setTesting(unitBox1EditKeep);
      setCollapseSaveUnitBox1(true);
      // setCollapseSaveUnitBox2(true);
      // setCollapseSaveUnitBox3(true);
      // setCollapseSaveUnitBox4(true);
      // setCollapseSaveUnitBox5(true);
      // setCollapseSaveUnitBox6(true);
      // setCollapseSaveUnitBox7(true);
      // setCollapseSaveUnitBox8(true);
      // setCollapseSaveUnitBox9(true);
      // setCollapseSaveUnitBox10(true);

      setUnitBox1Edit("");
      // setUnitBox2Edit("");
      // setUnitBox3Edit("");
      // setUnitBox4Edit("");
      // setUnitBox5Edit("");
      // setUnitBox6Edit("");
      // setUnitBox7Edit("");
      // setUnitBox8Edit("");
      // setUnitBox9Edit("");
      // setUnitBox10Edit("");
      console.log("detailBoolDetailBoolTrue", detailBool);
      console.log("masokDetailTrue");
    }
  }

  const debounceMountGetScanningPackagingData = useCallback(
    debounce(mountGetScanningPackagingData, 400)
  );
  const unitBox1EditKeep = [];
  const unitBox1EditKeepStr = [];
  async function mountGetScanningPackagingData(scanid, mbid) {
    try {
      const getScanningPackaging = await qr.getScanningPackagingData(
        scanid,
        mbid
      );
      const { data } = getScanningPackaging.data;

      if (data !== null) {
        setListScanningPackaging(data);
        scanData = data;
        console.log("dataScanningPackaging", data);
        console.log("scandata", scanData);
        console.log("scandataLength", scanData.length);
        // console.log("scandataubid", scanData.scan_ubid);
        setMBBox(scanData[0].scan_mbid);
        var y;
        const unitBox1EditKeep = [];
        for (y = 0; y < scanData.length; y++) {
          unitBox1EditKeep.push(scanData[y].scan_ubid);
          unitBox1EditKeepStr.push("");
          console.log("testLoopBoxEdit", scanData[y].scan_ubid);
        }
        if (scanData[0].scan_status === "Y") {
          setCheckedSample(false);
        }

        if (scanData[0].scan_status === "N") {
          setCheckedSample(true);
        }

        // --------------------------------------------------------

        let arrayOfData = [];
        for (let i = 0; i <= data.length - 1; i++) {
          arrayOfData.push(true);
        }
        setIsOpen(arrayOfData);

        // --------------------------------------------------------
        // setUnitBox1Edit(scanData[0].scan_ubid);
        // setUnitBox1Edit(scanData[1].scan_ubid);
        // setUnitBox1Edit(unitBox1EditKeep);
        // if (detailBool === true) {
        setTesting(unitBox1EditKeep);
        // }
        console.log("testUnitBoxEdit", unitBox1Edit);
        console.log("testUnitBoxEditKeep", unitBox1EditKeep);
        console.log("testUnitBox1EditKeepStr", unitBox1EditKeepStr);
        console.log("testingFunction", testing);
        // if (scanData[0].scan_ubid !== "" || scanData[0].scan_ubid !== 0) {
        //   setCollapseEditUnitBox1(true);
        // }
        // setUnitBox2Edit(scanData[1].scan_ubid);
        // if (scanData[1].scan_ubid !== "" || scanData[1].scan_ubid !== 0) {
        //   setCollapseEditUnitBox2(true);
        // }
        // setUnitBox3Edit(scanData[2].scan_ubid);
        // if (scanData[2].scan_ubid !== "" || scanData[2].scan_ubid !== 0) {
        //   setCollapseEditUnitBox3(true);
        // }
        // setUnitBox4Edit(scanData[3].scan_ubid);
        // if (scanData[3].scan_ubid !== "" || scanData[3].scan_ubid !== 0) {
        //   setCollapseEditUnitBox4(true);
        // }
        // setUnitBox5Edit(scanData[4].scan_ubid);
        // if (scanData[4].scan_ubid !== "" || scanData[4].scan_ubid !== 0) {
        //   setCollapseEditUnitBox5(true);
        // }
        // setUnitBox6Edit(scanData[5].scan_ubid);
        // if (scanData[5].scan_ubid !== "" || scanData[5].scan_ubid !== 0) {
        //   setCollapseEditUnitBox6(true);
        // }
        // setUnitBox7Edit(scanData[6].scan_ubid);
        // if (scanData[6].scan_ubid !== "" || scanData[6].scan_ubid !== 0) {
        //   setCollapseEditUnitBox7(true);
        // }
        // setUnitBox8Edit(scanData[7].scan_ubid);
        // if (scanData[7].scan_ubid !== "" || scanData[7].scan_ubid !== 0) {
        //   setCollapseEditUnitBox8(true);
        // }
        // setUnitBox9Edit(scanData[8].scan_ubid);
        // if (scanData[8].scan_ubid !== "" || scanData[8].scan_ubid !== 0) {
        //   setCollapseEditUnitBox9(true);
        // }
        // setUnitBox10Edit(scanData[9].scan_ubid);
        // if (scanData[9].scan_ubid !== "" || scanData[9].scan_ubid !== 0) {
        //   setCollapseEditUnitBox10(true);
        // }
      }
    } catch (error) {
      console.log(error);
    }
  }

  // useEffect(() => {
  //   console.log("scanningPackaging", listScanningPackaging);
  // }, [listScanningPackaging]);

  const debounceMountGetListMasterBox = useCallback(
    debounce(mountGetListMasterBox, 400)
  );

  async function mountGetListMasterBox(scanid) {
    try {
      const getListMasterBox = await qr.getListMasterBox(scanid);
      const { data } = getListMasterBox.data;
      setListMasterBox(data);
      console.log("dataMasterBox", data);
      //   var z;
      //   for (z = 0; z < listHeader.scan_mbid; z++) {
      //     console.log("testZ", z);
      //     setTesting(z);
      //   }
      console.log("testing", testing);
      console.log("listHeader", listHeader);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetListAllProduct = useCallback(
    debounce(mountGetListAllProduct, 400)
  );

  async function mountGetListAllProduct() {
    try {
      const getListProduct = await qr.getListAllProduct();
      const { data } = getListProduct.data;
      setListProduct(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountCreateHeaderNewBatch = useCallback(
    debounce(mountCreateHeaderNewBatch, 400)
  );
  // const [testing, setTesting] = useState([]);+
  // scan_procode: payloadHeader.pro_code,
  //         scan_proname: payloadHeader.pro_name,
  async function mountCreateHeaderNewBatch() {
    try {
      var payload = {
        data: {
          scan_procode: selectProduct.pro_code,
          scan_proname: selectProduct.pro_name,
          scan_batch: selectBatchNumber,
          scan_proddate: formatDate(selectedProdDate, "YYMMDD"),
          scan_expdate: formatDate(selectedExpDate, "YYMMDD"),
        },
      };

      try {
        console.log("payload", payload);
        const createHeaderNewBatch = await qr.createHeaderNewBatch(payload);
        const { data } = createHeaderNewBatch.data;
        console.log("data", data);
        setListHeader(data);
        console.log("datascanid", data.scan_id);
        console.log("datambsize", data.scan_mbsize);
        debounceMountGetListMasterBox(data.scan_id);
        // var z;
        // for (z = 0; z < data.scan_mbid; z++) {
        //   console.log("testZ", z);
        //   setTesting(z);
        // }
        console.log("testing", testing);
      } catch (error) {
        console.log(error);
      }

      // console.log("pro_code", payloadHeader.pro_code);
      // console.log("pro_name", payloadHeader.pro_name);
      console.log("selectBatchNumber", selectBatchNumber);
    } catch (error) {
      console.log(error);
    }
  }
  const [product, setProduct] = useState([]);
  const [productEdit, setProductEdit] = useState([]);

  const [productUrut, setProductUrut] = useState([]);
  const tempArrMbSize = [];
  useEffect(() => {
    if (detailBool !== true) {
      if (listHeader !== []) {
        setCollapseAddButton(true);
      }

      // if (listHeader.scan_mbsize !== "") {
      //   var z;
      //   for (z = 1; z <= listHeader.scan_mbsize; z++) {
      //     // tempArrMbSize.push(z);
      //     tempArrMbSize.push("");
      //     // setTesting(z);
      //   }
      //   setTesting(tempArrMbSize);
      //   console.log("testinggggggggz", testing);
      //   // tempArrMapTest.push(unitBox1);
      //   // setProduct(tempArrMapTest);
      // }

      // const tempArr = [];

      // // const tempArrUrut = [];
      // // if (unitBox1 !== ) {
      // //   tempArr.push(unitBox1);
      // // setUnit1(1);
      // // tempArrUrut.push(unit1);
      // // }
      // if (unitBox2 !== "") {
      //   tempArr.push(unitBox2);
      //   // setUnit2(2);
      //   // tempArrUrut.push(unit2);
      // }
      // if (unitBox3 !== "") {
      //   tempArr.push(unitBox3);
      //   // setUnit3(3);
      //   // tempArrUrut.push(unit3);
      // }
      // if (unitBox4 !== "") {
      //   tempArr.push(unitBox4);
      //   // setUnit4(4);
      //   // tempArrUrut.push(unit4);
      // }
      // if (unitBox5 !== "") {
      //   tempArr.push(unitBox5);
      //   // setUnit5(5);
      //   // tempArrUrut.push(unit5);
      // }
      // if (unitBox6 !== "") {
      //   tempArr.push(unitBox6);
      //   // setUnit6(6);
      //   // tempArrUrut.push(unit6);
      // }
      // if (unitBox7 !== "") {
      //   tempArr.push(unitBox7);
      //   // setUnit7(7);
      //   // tempArrUrut.push(unit7);
      // }
      // if (unitBox8 !== "") {
      //   tempArr.push(unitBox8);
      //   // setUnit8(8);
      //   // tempArrUrut.push(unit8);
      // }
      // if (unitBox9 !== "") {
      //   tempArr.push(unitBox9);
      //   // setUnit9(9);
      //   // tempArrUrut.push(unit9);
      // }
      // if (unitBox10 !== "") {
      //   tempArr.push(unitBox10);
      //   // setUnit10(10);
      //   // tempArrUrut.push(unit10);
      // }
      // console.log("tempArr", tempArr);
      // if (detailBool !== true && flag === "P") {
      //   setProduct(tempArr);
      //   // setProductUrut(tempArrUrut);
      // }
    }

    if (detailBool === true) {
      console.log("testOpen", isOpen);
    }

    // if (detailBool === true && unitBox1EditKeep !== []) {
    //   setTesting(unitBox1EditKeep);
    // }

    // if (detailBool === true){

    // }

    // if (detailBool === true) {
    //   const tempArrEdit = [];

    //   if (unitBox1Edit !== "") {
    //     setDisableUnitBox1(false);
    //     tempArrEdit.push(unitBox1Edit);
    //   }
    //   if (unitBox2Edit !== "" || unitBox2Edit !== 0) {
    //     setDisableUnitBox2(false);
    //     tempArrEdit.push(unitBox2Edit);
    //   }
    //   if (unitBox3Edit !== "") {
    //     setDisableUnitBox3(false);
    //     tempArrEdit.push(unitBox3Edit);
    //   }
    //   if (unitBox4Edit !== "") {
    //     setDisableUnitBox4(false);
    //     tempArrEdit.push(unitBox4Edit);
    //   }
    //   if (unitBox5Edit !== "") {
    //     setDisableUnitBox5(false);
    //     tempArrEdit.push(unitBox5Edit);
    //   }
    //   if (unitBox6Edit !== "") {
    //     setDisableUnitBox6(false);
    //     tempArrEdit.push(unitBox6Edit);
    //   }
    //   if (unitBox7Edit !== "") {
    //     setDisableUnitBox7(false);
    //     tempArrEdit.push(unitBox7Edit);
    //   }
    //   if (unitBox8Edit !== "") {
    //     setDisableUnitBox8(false);
    //     tempArrEdit.push(unitBox8Edit);
    //   }
    //   if (unitBox9Edit !== "") {
    //     setDisableUnitBox9(false);
    //     tempArrEdit.push(unitBox9Edit);
    //   }
    //   if (unitBox10Edit !== "") {
    //     setDisableUnitBox10(false);
    //     tempArrEdit.push(unitBox10Edit);
    //   }
    //   setProductEdit(tempArrEdit);
    // }
  }, [
    unitBox1,
    unitBox2,
    unitBox3,
    unitBox4,
    unitBox5,
    unitBox6,
    unitBox7,
    unitBox8,
    unitBox9,
    unitBox10,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,

    disableUnitBox1,
    disableUnitBox2,
    disableUnitBox3,
    disableUnitBox4,
    disableUnitBox5,
    disableUnitBox6,
    disableUnitBox7,
    disableUnitBox8,
    disableUnitBox9,
    disableUnitBox10,

    listHeader,
    detailBool,

    // unit1,
    // unit2,
    // unit3,
    // unit4,
    // unit5,
    // unit6,
    // unit7,
    // unit8,
    // unit9,
    // unit10,
  ]);

  // useEffect(() => {
  //   console.log("product", product);
  //   console.log("productEdit", productEdit);
  // }, [
  //   masterCodeBox,
  //   modalValidationMBCode,

  //   unitBox1,
  //   unitBox2,
  //   unitBox3,
  //   unitBox4,
  //   unitBox5,
  //   unitBox6,
  //   unitBox7,
  //   unitBox8,
  //   unitBox9,
  //   unitBox10,

  //   unitBox1Edit,
  //   unitBox2Edit,
  //   unitBox3Edit,
  //   unitBox4Edit,
  //   unitBox5Edit,
  //   unitBox6Edit,
  //   unitBox7Edit,
  //   unitBox8Edit,
  //   unitBox9Edit,
  //   unitBox10Edit,
  // ]);

  // async function mountCreateDetailNewBatch() {
  //   try {
  //     var test;
  //     test = listHeader.scan_id;

  //     var payload = {
  //       data: {
  //         scan_id: test,
  //         scan_mbid: masterCodeBox,
  //         // scan_uburut: productUrut,
  //         scan_ubid: product,
  //         scan_sampleyn: checkedSample === false ? "N" : "Y",
  //       },
  //     };

  //     console.log("payload", payload);
  //     const createDetailNewBatch = await qr.createDetailNewBatch2(payload);
  //     const { data } = createDetailNewBatch.data;
  //     console.log("data", data);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // }
  async function mountCreateDetailNewBatch() {
    try {
      var test;
      const noEmptyStrings = testing.filter((str) => str !== "");
      test = listHeader.scan_id;
      var payload = {
        data: {
          scan_id: test,
          scan_mbid: masterCodeBox,
          scan_uburut: productUrut,
          scan_ubid: noEmptyStrings,
          scan_sampleyn: checkedSample === false ? "N" : "Y",
        },
      };

      console.log("testArrnoEmptyStrings", noEmptyStrings);
      console.log("payload", payload);
      const createDetailNewBatch = await qr.createDetailNewBatch2(payload);
      const { data } = createDetailNewBatch.data;
      console.log("data", data);
    } catch (error) {
      console.log(error);
    }
  }

  async function mountUpdateUBID() {
    try {
      var y;
      y = 0;
      // if (unitBox1Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox2Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox3Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox4Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox5Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox6Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox7Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox8Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox9Edit !== "") {
      //   y = y + 1;
      // }
      // if (unitBox10Edit !== "") {
      //   y = y + 1;
      // }
      // console.log("y", y);
      var x;
      // var j;
      // j = 10 - y;
      // console.log("j", j);
      console.log("testCnt", testing.length);
      for (x = 1; x <= testing.length; x++) {
        var test;
        test = listHeader.scan_id;
        var payload = {
          data: {
            scan_id: test,
            scan_mbid: listScanningPackaging[0].scan_mbid,
            scan_uburut: x,
            scan_ubid: testing[y],
            scan_sampleyn: checkedSample === false ? "N" : "Y",
          },
        };

        console.log("payloadUpdate", payload);
        const updateUBID = await qr.updateDetailUBID(payload);
        const { data } = updateUBID.data;
        console.log("data", data);
        console.log("updateUBID", updateUBID);
        console.log("testing[y]", testing[y]);
        y++;
      }
    } catch (error) {
      console.log(error);
    }
  }

  // async function savePayloadHeader(e) {
  //   setSelectProduct(e.target.value);
  //   setPayloadHeader(item);
  // }

  async function checkSample() {
    console.log("checkSample", checkedSample);
    if (checkedSample === false) {
      setCheckedSample(true);
      console.log("testSample", checkedSample);
    }
    if (checkedSample === true) {
      setCheckedSample(false);
      console.log("testSample", checkedSample);
    }
    console.log("listSampleFInsihCheck", listSample);
  }

  const debounceMountGetSeeMBList = useCallback(
    debounce(mountGetSeeMBList, 400)
  );

  async function mountGetSeeMBList() {
    try {
      const mountGetSeeMBList = await qr.getSeeMBList(listHeader.scan_id);
      const { data } = mountGetSeeMBList.data;
      setListSeeMB(data);
      setModalSeeMbList(true);
      console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  async function testLog() {
    console.log("seeMBList", listSeeMB);
    setModalSeeMbList(false);
  }

  async function detailScanningPackaging(item) {
    setFlag("P");
    setDetailBool(true);
    debounceMountGetScanningPackagingData(listHeader.scan_id, item.scan_mbid);
    setMbsizeDetail(item);

    console.log("scanid", listHeader.scan_id);
    console.log("itemMBID", item);
    console.log("listScanningPackaging", listScanningPackaging);
    console.log("product", product);
    console.log("productEdit", productEdit);
    console.log("Testing", testing);
    console.log("DetailBool-Detail", detailBool);
    // setCollapseSaveUnitBox1(false);
    // setCollapseSaveUnitBox2(false);
    // setCollapseSaveUnitBox3(false);
    // setCollapseSaveUnitBox4(false);
    // setCollapseSaveUnitBox5(false);
    // setCollapseSaveUnitBox6(false);
    // setCollapseSaveUnitBox7(false);
    // setCollapseSaveUnitBox8(false);
    // setCollapseSaveUnitBox9(false);
    // setCollapseSaveUnitBox10(false);
    // setTesting
    // if (detailBool === true) {
    //   setTesting(unitBox1EditKeep);
    // }
    console.log("detailBool", detailBool);

    // var z;
    // for (z = 1; z <= listHeader.scan_mbid; z++) {
    //   console.log("testZ", z);
    //   setTesting(z);
    // }
    // console.log("testinggggggggggggg", testing);
    console.log("listHeader.scan_mbsize", listHeader.scan_mbsize);
    setDisableTestBox1(true);
    console.log("detailBool", detailBool);
  }

  async function finishPackaging() {
    try {
      const mountUpdateUBID = await qr.updatePackingSelesai(listHeader.scan_id);
      const { data } = mountUpdateUBID.data;
      setModalPackingSelesai2(true);
      setSelectedProdDate("");
      setSelectedExpDate("");
    } catch (error) {
      console.log(error);
    }
  }

  // useEffect(() => {
  //   if (listHeader !== "") {
  //     var z;
  //     for (z = 0; z < listHeader.scan_mbid; z++) {
  //       console.log("testZ", z);
  //       // setTesting(z);
  //     }
  //     console.log("testinggggggggggggg", testing);
  //     console.log("listHeader.scan_mbsize", listHeader.scan_mbsize);
  //   }
  // }, [listHeader, testing]);

  async function unitBox1Test(e, item) {
    // if (item == 1) {
    let newIsOpen = [...isOpen];
    newIsOpen.splice(item, 1, !newIsOpen[item]);
    setIsOpen(newIsOpen);
    // setDisableTestBox1(true);
    setUnitBox1(e.target.value);
    // }
  }
  // ---------------------------------------------
  const [inputValue] = useState([]);
  // const [testingArr, setTestingArr] = useState([]);
  const tempArrUnitBox = testing;

  function handleInputUB(value, item, index) {
    var tempArr = [...testing];
    tempArr[index] = value.value;
    setTesting(tempArr);
    setTotalArr(tempArr);

    const id = value.getAttribute("id");

    console.log("testIndex", index);
    console.log("id", id);
    console.log("detail", detailBool);
    console.log("testValue", value.value);
    console.log("testtempArr", tempArr[index]);

    if (id === `item${index}` && detailBool !== true) {
      // if (input !== testing[index.length + 1]) {
      var input = tempArr[index];
      var input2 = testing[index];
      console.log("input", input);
      // if (input.length >= 56 && tempArr[totalArr.length-2 !== ""] ){
      //   // setModalValidationUBBoxFull(true)
      //   console.log("masukFull")
      //   }
      if (tempArr[19].length >= 50) {
        setModalValidationUBBoxFull(true);
        console.log("masukFull");
      }
      if (input.length >= 56 && testing[tempArr.length - 2] == "") {
        // if (tempArr[totalArr.length - 2] == "") {
        // if (index !== listHeader.scan_mbsize) {
        // break
        console.log("totalArr.length-1", totalArr.length - 1);
        console.log("totalArr19", totalArr[19]);
        // if (tempArr[18].length >= 50 ){
        //   // setModalValidationUBBoxFull(true)
        //   console.log("masukFull")

        //   }
        console.log("masukFocus");
        unitBox1Ref[`item${index + 1}`].focus();
        // console.log("masuk");
        // }
      }
      // else {
      //   // if (testing[totalArr])
      //   console.log("test-testing[index]", tempArr.length);
      //   console.log("ttesting[totalArr]", totalArr);
      //   // unitBox1Ref[`item${index + 1}`].focus();
      // }

      console.log("input.length", input.length);
      // }
    }
    // setArrayMbUbBox(index)
    // if (testing[index] !== "") {
    //   inputValue = tempArr;
    // }
    // console.log("inputValueTextField", inputValue);
    console.log("testing", testing);
    console.log("testingTempArr", tempArr[index]);
    console.log("testItem", item);
  }

  // function testings(e, index) {
  //   // const tempArrUnitBox = testing;

  //   console.log("arr", testing);

  //   const id = e.target.getAttribute("id");
  //   console.log("testIndex", index);
  //   if (id === `item${index}` && detailBool !== true) {
  //     // tempArrUnitBox[index].name = e.target.value;
  //     tempArrUnitBox[index] = e.target.value;
  //     if (tempArrUnitBox !== "") {
  //       testing = tempArrUnitBox;
  //     }
  //     console.log("testID", tempArrUnitBox[index], index);
  //     // ------------------------------------------------------------

  //     // if (id === `item${index}` && inputValue[index] !== "") {
  //     //   collapseDeleteUnitBox1[`item${index}`] = true;
  //     // }

  //     // ------------------------------------------------------------
  //     var input = tempArr[index];
  //     console.log("input", input);
  //     if (input.length >= 57 && index !== listHeader.scan_mbsize) {
  //       // if (index !== listHeader.scan_mbsize) {
  //       // unitBox1Ref[`item${index + 1}`].focus();
  //       setDisableTestBox1([`item${index + 1}`].false);
  //       // setDisableTestBox1[`item${index + 1}`](false);
  //       // disableTestBox1[`item${index + 1}`] = false;
  //       // }
  //     }
  //   }
  //   console.log("tempArrUnitBox", tempArrUnitBox);
  //   console.log("inputValue", inputValue);
  //   console.log("unitbox", unitBox1Ref[`item${index}`]);
  //   setTestingArr(testing);

  //   // if (inputValue[`item${index}`] !== "") {
  //   //   unitBox1Ref.focus()[`item${index}`];
  //   // }
  // }
  useEffect(() => {
    if (flag === "D") {
      console.log("testingFinishArrNew", productTest);
    }
    console.log("testingArr2", testingArr2);
  }, [flag, productTest, testingArr2]);

  console.log(inputValue[0] !== "" ? "Disabled" : "Bisa Bawah");
  console.log(inputValue);

  // async function mountHeaderReturnB2B(
  //   startDate,
  //   endDate,
  //   status,
  //   selectedPT,
  //   projectID,
  //   selectedDiv,
  //   orderid,
  //   outcode,
  //   paymentid,
  //   params
  // ) {
  //   try {
  //     // setIsLoading((isLoading = true));
  //     const getRefundB2b = await qr.url_getHeaderRefundB2B(
  //       startDate,
  //       endDate,
  //       status,
  //       selectedPT,
  //       // selectedDiv.projectid,
  //       projectID,
  //       selectedDiv,
  //       orderid,
  //       outcode,
  //       paymentid,
  //       params
  //     );
  //     const { data, error } = getRefundB2b.data;
  //     if (error.status === true) {
  //       // displayToast("error", error.msg);
  //     } else {
  //       // setListRefund(data);
  //       // setTotalData(data);
  //     }
  //     console.log(data, "load refund data");
  //   } catch (error) {
  //     console.log(error);
  //     // displayToast("error", "Failed to get refund data");
  //     console.log(error, "Failed refund data");
  //   }
  // }

  // useEffect(() => {
  //   if (flag === "D") {
  //     mountHeaderReturnB2B(
  //       "20221106",
  //       "20221129",
  //       "P",
  //       9,
  //       0,
  //       9,
  //       "1943838",
  //       "00E",
  //       20
  //     );
  //   }
  // }, [flag]);

  // async function setMasterBox(e) {
  //   unitBox1Ref[`item${0}`].focus();
  // }

  function changeButton(item, index) {
    // if (called === true) {
    if (detailBool === true) {
      return (
        // <Box>
        <Grid item flex={1.5}>
          {isOpen[index] === false ? (
            <Button
              variant="contained"
              sx={{ float: "left", ml: 2, backgroundColor: "blue" }}
              // onClick={() => saveUnitBox1()}
              // disabled={disableUnitBox1}
              onClick={(e) => debounceMountEditUB(e, item, index)}
            >
              SAVE
            </Button>
          ) : (
            <Button
              variant="contained"
              sx={{ float: "left", ml: 2, backgroundColor: "blue" }}
              // onClick={() => editUnitBox1()}
              onClick={(e) => saveUB(e, item, index)}
            >
              Edit
            </Button>
          )}
        </Grid>
      );
    } else {
      return (
        // <Box>
        // <Collapse in={testing[index] !== "" ? true : false}>
        <Grid item flex={1.5}>
          <Collapse in={testing[index] !== "" ? true : false}>
            <Button
              id={`item${index}`}
              variant="contained"
              sx={{
                float: "left",
                ml: 2,
                backgroundColor: "error.main",
              }}
              onClick={(e) => deleteUnitBox1(index)}
              // disabled={inputValue[`item${index - 1}`].trim() === ""}
              // disabled={inputValue}
            >
              Delete
            </Button>
          </Collapse>
        </Grid>
        // </Collapse>
      );
    }
  }

  function saveUB(e, item, index) {
    let newIsOpen = [...isOpen];
    newIsOpen.splice(index, 1, !newIsOpen[index]);
    setIsOpen(newIsOpen);
    console.log("testOpenSave", isOpen);
    // setDisableTestBox1(false);
    // const id = e.target.getAttribute("id");
    // if (id === `item${index}` && detailBool === true) {
    //   disableTestBox1[`item${index}`] = false;
    // }
    console.log("testDisable", disableTestBox1[`item${index}`]);
  }

  const debounceMountEditUB = useCallback(debounce(mountEditUB, 400));

  async function mountEditUB(e, item, index) {
    let newIsOpen = [...isOpen];
    newIsOpen.splice(index, 1, !newIsOpen[index]);
    setIsOpen(newIsOpen);

    console.log("testOpenEdit", isOpen);
    console.log("disableBoolSave", detailBool);
    // setDisableTestBox1(true);
  }

  // ---------------------------------------------

  return (
    <>
      {flag === "Y" ? (
        <Box sx={{ width: "100%", textAlign: "center" }}>
          <Grid
            container
            justifyContent={"space-between"}
            sx={{ margin: "1%" }}
          >
            <Grid container item xs={10}>
              <Typography
                variant="h5"
                sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
              >
                SCAN NEW BATCH
              </Typography>
            </Grid>
          </Grid>

          <Grid
            container
            spacing={0}
            direction="column"
            alignItems="center"
            justifyContent="center"
            style={{ minHeight: "85vh", textAlign: "center" }}
          >
            <Paper>
              <Grid sx={{ ml: 2, mr: 2 }}>
                <Grid>
                  <FormControl
                    sx={{ backgroundColor: "white", width: "50vh", mt: 3 }}
                  >
                    <Autocomplete
                      options={listProduct}
                      getOptionLabel={(option) =>
                        `${option.pro_name} - ${option.pro_code}`
                      }
                      isOptionEqualToValue={(option, value) => {
                        option.pro_code === value.pro_code;
                        option.pro_name === value.pro_name;
                      }}
                      renderInput={(params) => (
                        <TextField
                          {...params}
                          size="small"
                          label="Select Product..."
                          defaultValue={""}
                        />
                      )}
                      // onChange={(event, newValue) => setSelectProduct(...selectProduct, newValue)}
                      // onChange={(event, newValue) => setSelectProduct(newValue)}
                      onChange={(event, newValue) => {
                        // setInputSearch({
                        //   ...inputSearch,
                        //   pro_code: newValue === null ? "" : newValue.pro_code,
                        //   pro_name: newValue === null ? "" : newValue.pro_name,
                        // })

                        setSelectProduct({
                          ...selectProduct,
                          pro_code: newValue === null ? "" : newValue.pro_code,
                          pro_name: newValue === null ? "" : newValue.pro_name,
                        });
                      }}
                      value={
                        selectProduct.pro_code === "" ? null : selectProduct
                      }
                    />
                  </FormControl>
                </Grid>
                <Grid sx={{ mt: 1 }}>
                  <FormControl
                    sx={{
                      backgroundColor: "white",
                      width: "50vh",
                      marginTop: 1,
                    }}
                  >
                    <TextField
                      size="small"
                      variant="outlined"
                      placeholder={"Input Batch Number"}
                      onChange={(e) => setSelectBatchNumber(e.target.value)}
                    ></TextField>
                  </FormControl>
                </Grid>
                <Grid sx={{ mt: 2 }}>
                  <DesktopDatePicker
                    label="Production Date"
                    value={selectedProdDate}
                    onChange={(newValue) => setSelectedProdDate(newValue)}
                    renderInput={(params) => (
                      <TextField
                        size="small"
                        {...params}
                        sx={{ background: "white", width: "100%" }}
                      />
                    )}
                  />
                </Grid>
                <Grid sx={{ mt: 2 }}>
                  <DesktopDatePicker
                    label="Expired Date"
                    value={selectedExpDate}
                    onChange={(newValue) => setSelectedExpDate(newValue)}
                    renderInput={(params) => (
                      <TextField
                        size="small"
                        {...params}
                        sx={{ background: "white", width: "100%" }}
                      />
                    )}
                  />
                </Grid>
                <Grid sx={{ textAlign: "right", marginTop: 2 }}>
                  <Button
                    variant="contained"
                    sx={{ marginBottom: 2 }}
                    onClick={() => start()}
                  >
                    Start
                  </Button>
                </Grid>
              </Grid>
            </Paper>
          </Grid>
          <Modal open={modalScanBatch}>
            <Box sx={style}>
              <Grid>
                <Typography sx={{ fontWeight: 600 }}>Watch out!</Typography>
                <Typography>
                  Information of product and batch is still incomplete!
                </Typography>
                <Button
                  sx={{
                    marginTop: 1,
                    float: "right",
                  }}
                  variant="outlined"
                  onClick={() => setModalScanBatch(false)}
                >
                  OK
                </Button>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalStartScanNewBatch}>
            <Box sx={style}>
              <Grid>
                <Typography variant="h5" sx={{ fontWeight: 600, mb: 1 }}>
                  Hello!
                </Typography>
                <Typography>
                  Are you sure to start the scanning process of new batch?
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
                    onClick={() => start2()}
                  >
                    YES
                  </Button>

                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                    onClick={() => setModalStartScanNewBatch(false)}
                  >
                    NO
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
        </Box>
      ) : flag === "D" ? (
        <Box sx={{ width: "100%", textAlign: "center" }}>
          <Grid
            container
            justifyContent={"space-between"}
            sx={{ margin: "1%" }}
          >
            <Grid container item xs={10}>
              <Typography
                variant="h5"
                sx={{
                  fontWeight: 600,
                  mt: 0.5,
                  textAlign: "left",
                  ml: 2,
                  mb: 3,
                }}
              >
                SCAN NEW BATCH
              </Typography>
            </Grid>
          </Grid>
          {/* ------------------------------------------------------------ */}

          <Grid container sx={{ ml: 6 }}>
            <Grid container>
              <Grid item>
                <Typography
                  sx={{
                    fontWeight: 600,
                    textAlign: "left",
                    ml: 2,
                  }}
                >
                  Product
                </Typography>
              </Grid>

              <Grid item>
                <Typography
                  sx={{
                    fontWeight: 600,
                    textAlign: "left",
                    ml: 11,
                  }}
                >
                  :
                </Typography>
              </Grid>

              <Grid>
                <Typography
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    // mt: 1,
                    textAlign: "left",
                    ml: 5,
                  }}
                >
                  {listHeader.scan_proname}
                </Typography>
              </Grid>
            </Grid>

            <Grid container sx={{ mt: 1 }}>
              <Grid item>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 2,
                  }}
                >
                  Batch Number
                </Typography>
              </Grid>

              <Grid item>
                <Typography
                  sx={{
                    fontWeight: 600,
                    textAlign: "left",
                    ml: 5,
                  }}
                >
                  :
                </Typography>
              </Grid>

              <Grid>
                <Typography
                  sx={{
                    fontWeight: 600,
                    textAlign: "left",
                    ml: 5,
                  }}
                >
                  {listHeader.scan_batch}
                </Typography>
              </Grid>
            </Grid>

            <Collapse in={collapseDetailScanNewBatch}>
              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    sx={{
                      fontWeight: 600,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    MB Size
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    sx={{
                      fontWeight: 600,
                      textAlign: "left",
                      ml: 11,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {listHeader.scan_mbsize} {"UB"}
                  </Typography>
                </Grid>
              </Grid>

              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    NIE
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 15,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5.3,
                    }}
                  >
                    {listHeader.scan_nie}
                  </Typography>
                </Grid>
              </Grid>

              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    Production Date
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 3.3,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {formatDate(listHeader.scan_proddate, "DD MMM YYYY")}
                  </Typography>
                </Grid>
              </Grid>

              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    Expired Date
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 6.5,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {formatDate(listHeader.scan_expdate, "DD MMM YYYY")}
                  </Typography>
                </Grid>
              </Grid>
            </Collapse>
            <Divider width="93%" objectFit="contain" sx={{ mt: 4 }} />
            <Divider width="93%" objectFit="contain" />
          </Grid>

          {/* ------------------------------------------------------------ */}
          {/* <Paper fullWidth fullHeight> */}
          <Grid sx={{ backgroundColor: "white" }}>
            {/* <Paper
              // width="100%" height="100%" objectFit="contain"
              > */}
            <Collapse in={collapseDetailScanNewBatchButtonUp}>
              <Grid sx={{ textAlign: "right", mr: 3 }}>
                {/* <Typography>adasfagdsv</Typography> */}
                <Button
                  // color="error"
                  variant="outlined"
                  onClick={() => hideDetailScanNewBatch()}
                  // fullWidth
                  startIcon={<ArrowDropUpIcon />}
                  sx={{ backgroundColor: "#f0f0f0", textAlign: "center" }}
                  size="small"
                >
                  {/* Keluar */}
                </Button>
              </Grid>
            </Collapse>
            <Collapse in={collapseDetailScanNewBatchButtonDown}>
              <Grid sx={{ textAlign: "right", mr: 3 }}>
                {/* <Typography>adasfagdsv</Typography> */}
                <Button
                  // color="error"
                  variant="outlined"
                  onClick={() => showDetailScanNewBatch()}
                  // fullWidth
                  startIcon={<ArrowDropDownIcon />}
                  sx={{ backgroundColor: "#f0f0f0", textAlign: "center" }}
                >
                  {/* Keluar */}
                </Button>
              </Grid>
            </Collapse>
            {/* </Paper> */}
            {/* </Grid> */}
            <Grid>
              <Typography
                sx={{ fontWeight: 600, textAlign: "left", ml: 5, mt: 1 }}
              >
                List Of Master Box
                <Divider sx={{ width: "95%" }} />
                <Divider sx={{ width: "95%" }} />
              </Typography>
            </Grid>
            <Table sx={{ ml: 5 }}>
              <TableBody>
                {/* {listMasterBox &&
                    listMasterBox.map((item, index) => ( */}
                {listMasterBox &&
                  listMasterBox.map((item, index) => (
                    <TableRow key={item}>
                      <TableCell>
                        {/* <Link
                        href={`/general-ledger/${item.tahun}/${item.bulan}/${item.coa_id}`}
                      > */}
                        {/* {item.scan_mbid} - {item.scan_ubid} {"UB"} */}
                        {item.scan_mbid} - {item && item.cnt} {"UB"}
                        {/* </Link> */}
                      </TableCell>
                      <TableCell>
                        <Button
                          variant="contained"
                          sx={{
                            float: "right",
                            marginBottom: 2,
                            mr: 13,
                            mt: 2,
                            color: "black",
                            backgroundColor: "white",
                            // bo
                          }}
                          // onClick={() => packingFinish()}
                          onClick={() => detailScanningPackaging(item)}
                        >
                          Detail
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
            <Grid
              container
              // sx={{ float: "right", width: "15%" }}
              // sx={{ width: "100%" }}
            >
              <Grid container>
                <Collapse
                  // in={collapseAddButton}
                  in={listHeader === "" ? false : true}
                  sx={{ float: "right", width: "100%" }}
                >
                  <Grid
                    item
                    // sx={{ float: "right", width: "100%" }}
                  >
                    <Button
                      // color="error"
                      // variant="outlined"

                      // fullWidth
                      // startIcon={<AddCircle />}
                      // sx={{ backgroundColor: "#f0f0f0" }}
                      // sx={{}}
                      onClick={() => packaging()}
                      sx={{ float: "right", width: "15%" }}
                    >
                      <AddCircle sx={{ fontSize: 35, color: "teal" }} />
                    </Button>
                  </Grid>
                </Collapse>

                <Grid item sx={{ float: "right", width: "100%" }}>
                  <Collapse in={collapsePackagingSelesaiButton}>
                    <Button
                      variant="contained"
                      sx={{ float: "right", marginBottom: 2, mr: 13, mt: 2 }}
                      onClick={() => packingFinish()}
                    >
                      Packaging Selesai
                    </Button>
                  </Collapse>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
          {/* </Paper> */}
          <Modal open={modalPackingSelesai}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Watch out!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Are you sure to finish packing process?
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
                    onClick={() => finishPackaging()}
                  >
                    YES
                  </Button>

                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                    onClick={() => setModalPackingSelesai(false)}
                  >
                    NO
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
          <Modal open={modalPackingSelesai2}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Congrats!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  {/* Data QR Batch AAAA-123456-01 successfully saved. */}
                  Data QR Batch {""}
                  {listHeader.scan_batch}
                  {""} successfully saved.
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "primary.main", marginLeft: "33em" }}
                    onClick={() => packingFinishModal()}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
        </Box>
      ) : flag === "P" ? (
        <Box sx={{ width: "100%", textAlign: "center" }}>
          <Grid
            container
            justifyContent={"space-between"}
            sx={{ margin: "1%", mb: 2 }}
          >
            <Grid container item xs={10}>
              <Typography
                variant="h5"
                sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
              >
                SCANNING PACKAGING
              </Typography>
            </Grid>
          </Grid>

          <Divider
            width="91%"
            objectFit="contain"
            sx={{ mt: 4, float: "center", ml: 8 }}
          />
          <Divider
            width="91%"
            objectFit="contain"
            sx={{ float: "center", ml: 8 }}
          />

          <Grid sx={{ ml: 6, mt: 5 }} container>
            {/* <Paper> */}
            <Grid item flex={1}>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 2,
                }}
              >
                Master Code Box
              </Typography>
            </Grid>
            <Grid item flex={0.2}>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 2,
                  mt: 1,
                }}
              >
                :
              </Typography>
            </Grid>
            <Grid item flex={5}>
              <TextField
                sx={{ float: "left" }}
                fullWidth
                size="small"
                onChange={(e) => setMasterCodeBox(e.target.value)}
                value={
                  detailBool !== true
                    ? masterCodeBox
                    : // 0
                      // scanData &&
                      // scanData[0].scan_mbid
                      MBBox
                }
                disabled={detailBool === true ? true : masterBoxDisable}

                // onKeyDown={handleKeyDownUnitBox1}
                // disabled
              ></TextField>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={checkedSample}
                    // checked={checkedSample}
                    onClick={() => checkSample()}
                  />
                }
                label="Retained Sample"
                sx={{ float: "left", mt: 2 }}
              />
            </Grid>
            <Grid item flex={2}>
              <Button
                // color="error"
                variant="outlined"
                onClick={() => debounceMountGetSeeMBList()}
                // fullWidth
                // startIcon={<LogoutIcon />}
                sx={{ float: "center" }}
                size="medium"
              >
                See MB List
              </Button>
            </Grid>
          </Grid>
          <Divider
            width="91%"
            objectFit="contain"
            sx={{ mt: 2, float: "center", ml: 8 }}
          />
          <Divider
            width="91%"
            objectFit="contain"
            sx={{ float: "center", ml: 8 }}
          />

          {/* {testing.map((item, index) => ( */}

          <Grid sx={{ ml: 8, mt: 2 }} container>
            {testing.map((item, index) => (
              <Grid key={index} sx={{ mt: 2 }} container>
                <Grid item flex={1}>
                  {/* <Typography>{item.name}</Typography> */}
                  <Typography
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                      mt: 1,
                    }}
                  >
                    Unit Box Code {index + 1}
                  </Typography>
                </Grid>
                <Grid item flex={0.2}>
                  <Typography
                    sx={{
                      fontWeight: 600,
                      textAlign: "left",
                      ml: 2,
                      mt: 1,
                    }}
                  >
                    :
                  </Typography>
                </Grid>
                <Grid item flex={3.5}>
                  <TextField
                    id={`item${index}`}
                    //{detailBool !== true ? testing[item] : item}
                    value={testing[index]}
                    onChange={(e) => handleInputUB(e.target, item, index)}
                    // inputRef={(el) => (unitBox1Ref = el)}
                    inputRef={(el) => (unitBox1Ref[`item${index}`] = el)}
                    // disabled={(index) => disableTestBox1[`item${index}`]}
                    // disabled={!disableTestBox1.some(({}))}
                    // disabled
                    // disabled={disableTestBox1}
                    // sx={{ ml: 2 }}
                    sx={{ float: "left", width: "100%" }}
                    size="small"
                    // disabled={index > 0 && inputValue[`item${index - 1}`].trim() === ""}
                    // disabled={testing[index] !== "" ? false : true}
                    // disabled={
                    //   testing[0] !== "" && testing[index] === "" ? true : false
                    // }
                    s
                    // disabled={disableTestBox1[`item${index}`]}
                    disabled={
                      // detailBool !== true
                      //   ? false
                      //   : isOpen[index] === false
                      //   ? false
                      //   : true
                      // detailBool !== true
                      //  && testing[index-1] === ""
                      // && testing[index].length <= 56
                      // ? true :
                      detailBool !== true &&
                      masterCodeBox === "" &&
                      masterCodeBox.length != 58
                        ? true
                        : detailBool === true && isOpen[index] == false
                        ? false
                        : detailBool === true && isOpen[index] == true
                        ? true
                        : false
                    }
                  ></TextField>
                </Grid>

                {changeButton(item, index)}
              </Grid>
            ))}
          </Grid>

          <Grid sx={{ marginTop: 2, mr: 7 }}>
            {/* <FormGroup> */}

            {/* <FormControlLabel
                  disabled
                  control={<Checkbox />}
                  label="Disabled"
                /> */}
            {/* </FormGroup> */}
            <Button
              variant="contained"
              sx={{ float: "right", marginBottom: 2, ml: 2 }}
              onClick={() => finishScanningPackaging()}
            >
              Finish
            </Button>
            <Button
              variant="contained"
              sx={{ float: "right", marginBottom: 2 }}
              onClick={() => saveAndContinueButton()}
              disabled={detailBool === true ? true : false}
            >
              Save & Continue
            </Button>
          </Grid>

          {/* <G */}
          <Modal open={modalScanningPackagingNotFull}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Data of unit box code is incomplete. Are you sure to proceed?
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
                    onClick={() => saveAndContinueFinish()}
                  >
                    YES
                  </Button>

                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                    onClick={() => setModalScanningPackagingNotFull(false)}
                  >
                    NO
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalScanningPackagingNotFullFinish}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Data of unit box code is incomplete. Are you sure to proceed?
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
                    onClick={() => saveAndContinueFinish() && setFlag("D")}
                  >
                    YES
                  </Button>

                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                    onClick={() =>
                      setModalScanningPackagingNotFullFinish(false)
                    }
                  >
                    NO
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalValidationSaveAndFinish}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Scan QR on master box ﬁrst!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationSaveAndFinish(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal
            open={modalValidatonUnitBox10}
            inputRef={(el) => (unitBox11Ref = el)}
          >
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Error
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidatonUnitBox10(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalSeeMbList}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  {/* Heads Up! */}
                  Master Box Code ={" "}
                  {listSeeMB.scan_id !== ""
                    ? ("", listSeeMB.scan_mbid)
                    : "Empty"}
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  {/* Error */}
                  This Master Box is{" "}
                  {listSeeMB.scan_sampleyn === "Y"
                    ? "retained sample"
                    : listSeeMB.scan_sampleyn === "N"
                    ? "not retained sample"
                    : "Empty"}
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    // onClick={() => setModalSeeMbList(false)}
                    onClick={() => testLog(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalValidationFullUB}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  UB Box Full!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationFullUB(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalValidationMBCode}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Master Box Code must be 58 characters, please try again!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationMBCode(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalValidationUBCode}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Unit Box Code must be 57 characters, please try again!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationUBCode(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
          <Modal open={modalValidationUBBoxFull}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Unit Box Code has reached full!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationUBBoxFull(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
        </Box>
      ) : (
        <Box sx={{ width: "50%", textAlign: "center" }}>
          <Grid
            container
            justifyContent={"space-between"}
            sx={{ margin: "1%" }}
          >
            <Grid container item xs={10}>
              <Typography
                variant="h5"
                sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
              >
                SCAN NEW BATCH
              </Typography>
            </Grid>
          </Grid>
        </Box>
      )}
    </>
  );
};

export default ScanNewBatch;

// monitoring-process-scan -> index.js

import {
  Box,
  Paper,
  Table,
  TableHead,
  FormControl,
  InputLabel,
  Select,
  Grid,
  Button,
  TextField,
  TableRow,
  TableCell,
  Typography,
  Divider,
  TableBody,
  TableFooter,
  MenuItem,
  Collapse,
  Grow,
  Autocomplete,
} from "@mui/material";
import { useCallback, useEffect, useRef, useState } from "react";
import qr from "../../services/qr";
import { debounce, set, isUndefined } from "lodash";
import BackspaceIcon from "@mui/icons-material/Backspace";
import InfoIcon from "@mui/icons-material/Info";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import { formatDate } from "../../utils/text";
import { fontWeight } from "@mui/system";
import { useRouter } from "next/router";
import { getStorage } from "../../utils/storage";

const MonitoringProcessScan = () => {
  const [totalOnProcess, setTotalOnProcess] = useState("");
  const [totalDone, setTotalDone] = useState("");
  const [totalReject, setTotalReject] = useState("");
  const [totalUploaded, setTotalUploaded] = useState("");

  const router = useRouter();

  ///----- buat filter & collapse
  const [inputSearch, setInputSearch] = useState({
    pro_name: "",
    pro_code: "",
  });
  const [filterStatus, setFilterStatus] = useState("");
  const [filterDate, setFilterDate] = useState("");
  const [filterRefresh, setFilterRefresh] = useState("");

  const [collapseDate, setCollapseDate] = useState(false);
  const [collapseRefresh, setCollapseRefresh] = useState(false);
  const [collapseAllData, setCollapseAllData] = useState(true);
  const [collapseEmpty, setCollapseEmpty] = useState(false);

  const debounceMountGetFilter = useCallback(debounce(mountGetFilter, 400));

  const accessList = getStorage("access_list");

  useEffect(() => {
    if (!isUndefined(accessList)) {
      var parsedAccess = JSON.parse(accessList);
      if (
        !parsedAccess["QR_BPOM_MONITORING_OPERATOR"].includes(
          "QR_BPOM_MONITORING_OPERATOR_CREATE"
        )
      ) {
        router.push("/403");
      }
    } else {
      router.push("/403");
    }
  }, [accessList]);

  async function deleteDate() {
    setCollapseDate(false);
  }

  async function mountGetFilter(procode, status, submitdate) {
    console.log("procode", procode);
    console.log("status", status);
    console.log("date", submitdate);
    var date = formatDate(submitdate, "YYMMDD");
    console.log("datebaru", date);
    try {
      const getFilter = await qr.getFilterHeader(procode, status, date);
      const { data } = getFilter.data;

      setListMonitor(data);
      setTotalOnProcess(data[0].onp);
      setTotalDone(data[0].dn);
      setTotalReject(data[0].rjt);
      setTotalUploaded(data[0].upd);
      console.log("list =>", data);
      setCollapseEmpty(false);
      if (getFilter.data.length < 0) {
        console.log("cek collapse Empty");
        setCollapseEmpty(true);
      }
    } catch (error) {
      console.log("error getFilter", error);
      setCollapseEmpty(true);
    }
  }

  async function deleteRefresh() {
    setCollapseRefresh(false);
    setCollapseAllData(true);
    setCollapseEmpty(false);
    setFilterRefresh(null);
    setFilterDate(null);
    setFilterStatus("");
    setListMonitor([]);
    setInputSearch({
      ...inputSearch,
      pro_code: "",
      pro_name: "",
    });
    deleteDate();
  }

  async function getAllBatch() {
    debounceMountGetFilter("", "", "");

    setInputSearch({
      ...inputSearch,
      pro_code: "",
      pro_name: "",
    });
    setFilterStatus("");
    setFilterDate(null);
    deleteDate();

    setCollapseRefresh(true);
    setCollapseAllData(false);
  }

  // Sekali panggil
  useEffect(() => {
    debounceMountGetListBatchToMonitor();
    debounceMountGetListAllProduct();
    console.log("[X|>>>>>|] UseEffect Parent [|<<<<<<|X]");
  }, []);

  useEffect(() => {
    console.log(
      " **************************** UseEffect **************************** "
    );
    if (
      inputSearch.pro_code !== "" ||
      inputSearch.pro_name !== "" ||
      filterStatus !== "" ||
      (filterDate !== "" && filterDate !== null)
    ) {
      console.log("| ceking IF ==> Filter terisi");
      debounceMountGetFilter(inputSearch.pro_code, filterStatus, filterDate);
      setCollapseAllData(true);
    } else if (
      inputSearch.pro_code === "" &&
      inputSearch.pro_name === "" &&
      filterStatus === "" &&
      (filterDate !== "" || filterDate !== null) &&
      (collapseAllData === true || collapseRefresh === false)
    ) {
      console.log("| ceking IF ==> Filter kosong");
      setListMonitor([]);
      setCollapseRefresh(false);
      setCollapseEmpty(false);
      setCollapseAllData(true);
      if (collapseAllData === true) {
        setCollapseRefresh(false);

        console.log("| ceking IF ==> Default");
      }
    } else if (collapseAllData === false) {
      console.log("| ceking IF ==> Get ALLData ");
    }

    var date = formatDate(filterDate, "YYMMDD");
    if (inputSearch.pro_code !== "" || filterStatus !== "" || date !== "") {
      setCollapseRefresh(true);
    }

    console.log("| inputSearch.pro-code +>", inputSearch.pro_code);
    console.log("| inputSearch.pro-name +>", inputSearch.pro_name);
    console.log("| filterStatus +>", filterStatus);
    console.log("| filterDate +>", filterDate);
    console.log("| date +>", date);
    console.log("| collapse Date", collapseDate);
    console.log("| collapse Refresh", collapseRefresh);
    console.log("| listMonitor ", listMonitor);
    console.log(" ******************************************************** ");
  }, [
    inputSearch.pro_code,
    inputSearch.pro_name,
    filterStatus,
    filterDate,
    collapseDate,
    collapseRefresh,
  ]);

  var myObject = {
    key: "something",
    "other-key": "something else",
    "another-key": "another thing",
  };

  const tableHeader = [
    {
      name: "Procode",
    },
    {
      name: "Product Name",
    },
    {
      name: "Batch Number",
    },
    {
      name: "Status",
    },
    {
      name: "Submitted On",
    },
  ];

  const debounceMountGetListBatchToMonitor = useCallback(
    debounce(mountGetListBatchToMonitor, 400)
  );

  async function mountGetListBatchToMonitor() {
    try {
      var i;
      const getBatchToMonitor = await qr.getListBatchToMonitor();
      const { data } = getBatchToMonitor.data;
      setTotalOnProcess(data[0].onp);
      setTotalDone(data[0].dn);
      setTotalReject(data[0].rjt);
      setTotalUploaded(data[0].upd);
      console.log("ListBatchToMonitor", getBatchToMonitor);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetListAllProduct = useCallback(
    debounce(mountGetListAllProduct, 400)
  );

  async function mountGetListAllProduct() {
    try {
      const getListProduct = await qr.getListAllProduct();
      const { data } = getListProduct.data;
      setListProduct(data);
    } catch (error) {
      console.log(error);
    }
  }

  const listStatus = [
    { value: "", label: "None" },
    { value: "O", label: "O" },
    { value: "D", label: "D" },
    { value: "R", label: "R" },
    { value: "U", label: "U" },
  ];

  async function detailMonitoring(item) {
    router.push(`/monitoring-process-scan/${item.scan_id}`);
  }

  return (
    <Box sx={{ width: "100%", textAlign: "center" }}>
      <Grid container justifyContent={"space-between"} sx={{ margin: "1%" }}>
        <Grid container item xs={10}>
          <Typography
            variant="h5"
            sx={{
              fontWeight: 600,
              mt: 0.5,
              textAlign: "left",
              ml: 2,
              mb: 1,
            }}
          >
            Monitoring Process Scan
          </Typography>
        </Grid>
      </Grid>
      {/* ------------------------------------------------------------ */}

      <Grid container sx={{ mb: 5 }}>
        <Grid
          container
          justifyContent={"space-between"}
          spacing={2}
          sx={{ marginBottom: "1%" }}
        >
          <Grid item flex={2} sx={{ ml: 3 }}>
            <Typography
              sx={{
                fontWeight: 600,
                textAlign: "left",
              }}
            >
              On Process
            </Typography>
            <TextField
              InputProps={{
                sx: {
                  "& input": {
                    textAlign: "center",
                  },
                  fontSize: {
                    lg: 30,
                    md: 20,
                    sm: 20,
                    xs: 10,
                  },
                  fontWeight: 700,
                },
              }}
              sx={{
                width: "100%",
                float: "center",
                fontWeight: 700,
              }}
              disabled
              value={totalOnProcess !== "" ? totalOnProcess : "-"}
            ></TextField>
          </Grid>
          <Grid item flex={2}>
            <Typography
              sx={{
                fontWeight: 600,
                textAlign: "left",
              }}
            >
              Saved
            </Typography>
            <TextField
              InputProps={{
                sx: {
                  "& input": {
                    textAlign: "center",
                  },
                  fontSize: {
                    lg: 30,
                    md: 20,
                    sm: 20,
                    xs: 10,
                  },
                  fontWeight: 700,
                },
              }}
              sx={{ width: "100%", fontWeight: 600 }}
              disabled
              value={totalReject !== "" ? totalReject : "-"}
            ></TextField>
          </Grid>
          <Grid item flex={2}>
            <Typography
              sx={{
                fontWeight: 600,
                textAlign: "left",
              }}
            >
              Submitted
            </Typography>
            <TextField
              InputProps={{
                sx: {
                  "& input": {
                    textAlign: "center",
                  },
                  fontSize: {
                    lg: 30,
                    md: 20,
                    sm: 20,
                    xs: 10,
                  },
                  fontWeight: 700,
                },
              }}
              sx={{ width: "100%" }}
              disabled
              value={totalDone !== "" ? totalDone : "-"}
            ></TextField>
          </Grid>
          <Grid item flex={2} sx={{ mr: 2 }}>
            <Typography
              sx={{
                fontWeight: 600,
                textAlign: "left",
              }}
            >
              Uploaded
            </Typography>
            <TextField
              InputProps={{
                sx: {
                  "& input": {
                    textAlign: "center",
                  },
                  fontSize: {
                    lg: 30,
                    md: 20,
                    sm: 20,
                    xs: 10,
                  },
                  fontWeight: 700,
                },
              }}
              sx={{ width: "100%", height: "100%" }}
              disabled
              value={totalUploaded !== "" ? totalUploaded : "-"}
            ></TextField>
          </Grid>
        </Grid>

        <Grid container sx={{ mt: 1 }}>
          <Grid item flex={7}>
            <Autocomplete
              options={listProduct}
              sx={{ backgroundColor: "white", ml: 3, mt: 5, width: "100%" }}
              getOptionLabel={(option) =>
                `${option.pro_name} [${option.pro_code}]`
              }
              isOptionEqualToValue={(option, value) => {
                option.pro_code === value.pro_code;
                option.pro_name === value.pro_name;
              }}
              renderInput={(params) => (
                <TextField
                  {...params}
                  size="small"
                  label="Filter by Product..."
                />
              )}
              onChange={(event, newValue) => {
                setInputSearch({
                  ...inputSearch,
                  pro_code: newValue === null ? "" : newValue.pro_code,
                  pro_name: newValue === null ? "" : newValue.pro_name,
                }),
                  setCollapseRefresh(true);
              }}
              value={inputSearch.pro_name === "" ? null : inputSearch}
            />
          </Grid>

          <Grid item flex={4}>
            <FormControl
              fullWidth
              sx={{ ml: 5, mt: 5, width: "100%" }}
              size="small"
            >
              <InputLabel>Filter by Status</InputLabel>
              <Select label="Filter by Status" value={filterStatus}>
                {listStatus &&
                  listStatus.map((item) => (
                    <MenuItem
                      onClick={() => {
                        setFilterStatus(item.value);
                      }}
                      key={item}
                      value={item.value}
                    >
                      {item.label}
                    </MenuItem>
                  ))}
              </Select>
            </FormControl>
          </Grid>

          <Grid item flex={4}>
            <FormControl fullWidth sx={{ ml: 7, mt: 5, width: "110%" }}>
              <DesktopDatePicker
                label="Filter by Date"
                value={filterDate}
                onChange={(newValue) => {
                  newValue !== null || newValue === ""
                    ? (setFilterDate(newValue), setCollapseDate(true))
                    : (setFilterDate(newValue), setCollapseDate(false));
                }}
                renderInput={(params) => (
                  <TextField
                    size="small"
                    {...params}
                    sx={{
                      background: "white",
                    }}
                  />
                )}
              />
            </FormControl>
          </Grid>

          <Collapse in={collapseDate}>
            <Grid item flex={2}>
              <FormControl
                fullWidth
                sx={{
                  ml: -1,
                  mt: 5.6,
                  width: "2%",
                  height: "2%",
                }}
              >
                <Button
                  fullWidth
                  onClick={() => {
                    setFilterDate(null), deleteDate();
                  }}
                  sx={{
                    width: 1,
                    height: "1%",
                    borderRadius: 100,

                    maxWidth: "30px",
                    maxHeight: "30px",
                    minWidth: "30px",
                    minHeight: "30px",
                  }}
                >
                  <BackspaceIcon
                    sx={{ fontSize: 20, color: "grey" }}
                    size="small"
                  />
                </Button>
              </FormControl>
            </Grid>
          </Collapse>

          <Grow direction="down" in={collapseRefresh}>
            <Grid item flex={2}>
              <FormControl
                fullWidth
                sx={{
                  ml: 6,
                  mt: 5.6,
                  width: "2%",
                  height: "2%",
                }}
              >
                <Button
                  variant="contained"
                  fullWidth
                  onClick={() => {
                    deleteRefresh();
                  }}
                  sx={{
                    width: 1,
                    height: "1%",
                    backgroundColor: "darkred",

                    maxWidth: "90px",
                    maxHeight: "30px",
                    minWidth: "90px",
                    minHeight: "30px",
                  }}
                >
                  CLEAR
                </Button>
              </FormControl>
            </Grid>
          </Grow>

          <Grow in={collapseAllData}>
            <Grid item flex={1}>
              <FormControl
                fullWidth
                sx={{
                  ml: 6,
                  mt: 5.6,
                  width: "1%",
                  height: "2%",
                }}
              >
                <Button
                  variant="contained"
                  size="large"
                  fullWidth
                  onClick={() => {
                    getAllBatch();
                  }}
                  sx={{
                    minWidth: "150px",
                    minHeight: "30px",
                    backgroundColor: "teal",
                  }}
                >
                  ALL DATA
                </Button>
              </FormControl>
            </Grid>
          </Grow>

          <Grid item flex={2}></Grid>
          <Grid item flex={2}></Grid>
        </Grid>
      </Grid>

      {/* ------------------------------------------------------------ */}
      <Paper sx={{ mt: 3, ml: 3, mr: 2 }}>
        <Divider width="100%" objectFit="contain" sx={{ mt: 2 }} />
        <Divider width="100%" objectFit="contain" />
        <Table size="small">
          <TableHead>
            <TableRow>
              {tableHeader &&
                tableHeader.map((head, index) => (
                  <TableCell
                    sx={{
                      fontWeight: "600",
                    }}
                    key={index}
                  >
                    {head.name}
                  </TableCell>
                ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {listMonitor &&
              listMonitor.map((item, index) => (
                <TableRow key={index}>
                  <TableCell>{item.scan_procode}</TableCell>
                  <TableCell>{item.scan_proname}</TableCell>
                  <TableCell>{item.scan_batch}</TableCell>
                  <TableCell>{item.scan_status}</TableCell>
                  <TableCell>
                    {item.scan_submitdate === "" ||
                    item.scan_submitdate === null
                      ? "-"
                      : formatDate(item.scan_submitdate, "DD MMMM YYYY HH:mm")}
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="contained"
                      size="large"
                      sx={{ mr: 2, backgroundColor: "#EDBE4B" }}
                      onClick={() => detailMonitoring(item)}
                    >
                      Detail
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
          </TableBody>
          <TableFooter></TableFooter>

          <Collapse in={collapseEmpty}>
            <Grid
              sx={{
                width: "100%",
                ml: "190%",
              }}
            >
              <Grid
                sx={{
                  mt: 6,
                }}
              >
                <InfoIcon
                  sx={{
                    mt: 2,
                  }}
                />
              </Grid>
              <Grid sx={{}}>
                <Typography
                  sx={{
                    mb: "30%",
                    width: "100%",
                  }}
                >
                  Data not found.
                </Typography>
              </Grid>
            </Grid>
          </Collapse>
        </Table>
      </Paper>
    </Box>
  );
};

export default MonitoringProcessScan;

// monitoring-process-scan -> [id]

import {
  Box,
  Paper,
  Table,
  TableHead,
  FormControl,
  InputLabel,
  Select,
  Grid,
  Button,
  TextField,
  TableRow,
  TableCell,
  Typography,
  Modal,
  Divider,
  TableBody,
  MenuItem,
  Collapse,
  FormGroup,
  FormControlLabel,
  Checkbox,
} from "@mui/material";
import { useCallback, useEffect, useRef, useState } from "react";
import LogoutIcon from "@mui/icons-material/Logout";
import { AddCircle, CheckBox } from "@mui/icons-material";
import ArrowDropUpIcon from "@mui/icons-material/ArrowDropUp";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import qr from "../../services/qr";
import { debounce, set, isUndefined } from "lodash";
import { formatDate } from "../../utils/text";
import { detailApprovalBool, setDetailApprovalBool } from "./index";
import { useRouter } from "next/router";
import KeyboardBackspaceIcon from "@mui/icons-material/KeyboardBackspace";
import { getStorage } from "../../utils/storage";

const ScanNewBatch = () => {
  const styleModalErr = {
    position: "absolute",
    top: "30%",
    left: "60%",
    transform: "translate(-50%, -50%)",
    width: "35%",
    bgcolor: "background.paper",
    p: 4,
  };

  const styleModalStart = {
    position: "absolute",
    top: "30%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: "35%",
    bgcolor: "background.paper",
    p: 4,
  };

  const [listMasterBox, setListMasterBox] = useState([]);
  // const [selectProduct, setSelectProduct] = useState("");
  const [selectBatchNumber, setSelectBatchNumber] = useState("");
  const [modalScanBatch, setModalScanBatch] = useState(false);
  const [flag, setFlag] = useState("D");
  const test = "12346 - Name of Product 2";
  const test1 = "AAAA-123456-01";
  const test2 = "10 UB";
  const test3 = "DBL653783700870A1";
  const test4 = "03 January 2023";
  const test5 = "23 June 2025";
  const [collapseDetailScanNewBatch, setCollapseDetailScanNewBatch] =
    useState(true);

  const [masterCodeBox, setMasterCodeBox] = useState("");
  const [unitBox1, setUnitBox1] = useState("");
  const [unitBox2, setUnitBox2] = useState("");
  const [unitBox3, setUnitBox3] = useState("");
  const [unitBox4, setUnitBox4] = useState("");
  const [unitBox5, setUnitBox5] = useState("");
  const [unitBox6, setUnitBox6] = useState("");
  const [unitBox7, setUnitBox7] = useState("");
  const [unitBox8, setUnitBox8] = useState("");
  const [unitBox9, setUnitBox9] = useState("");
  const [unitBox10, setUnitBox10] = useState("");

  const [unitBox1EditVar, setUnitBox1EditVar] = useState("");
  const [unitBox2EditVar, setUnitBox2EditVar] = useState("");
  const [unitBox3EditVar, setUnitBox3EditVar] = useState("");
  const [unitBox4EditVar, setUnitBox4EditVar] = useState("");
  const [unitBox5EditVar, setUnitBox5EditVar] = useState("");
  const [unitBox6EditVar, setUnitBox6EditVar] = useState("");
  const [unitBox7EditVar, setUnitBox7EditVar] = useState("");
  const [unitBox8EditVar, setUnitBox8EditVar] = useState("");
  const [unitBox9EditVar, setUnitBox9EditVar] = useState("");
  const [unitBox10EditVar, setUnitBox10EditVar] = useState("");

  const [masterBoxDisable, setMasterBoxDisable] = useState(true);
  const [unitBox1Disabled, setUnitBox1Disabled] = useState(true);
  const [unitBox2Disabled, setUnitBox2Disabled] = useState(true);
  const [unitBox3Disabled, setUnitBox3Disabled] = useState(true);
  const [unitBox4Disabled, setUnitBox4Disabled] = useState(true);
  const [unitBox5Disabled, setUnitBox5Disabled] = useState(true);
  const [unitBox6Disabled, setUnitBox6Disabled] = useState(true);
  const [unitBox7Disabled, setUnitBox7Disabled] = useState(true);
  const [unitBox8Disabled, setUnitBox8Disabled] = useState(true);
  const [unitBox9Disabled, setUnitBox9Disabled] = useState(true);
  const [unitBox10Disabled, setUnitBox10Disabled] = useState(true);

  const [modalStartScanNewBatch, setModalStartScanNewBatch] = useState(false);
  const [modalScanningPackagingNotFull, setModalScanningPackagingNotFull] =
    useState(false);
  const [
    modalScanningPackagingNotFullFinish,
    setModalScanningPackagingNotFullFinish,
  ] = useState(false);
  const [modalPackingSelesai, setModalPackingSelesai] = useState(false);
  const [modalPackingSelesai2, setModalPackingSelesai2] = useState(false);
  const [modalValidationSaveAndFinish, setModalValidationSaveAndFinish] =
    useState(false);
  const [modalValidatonUnitBox10, setModalValidatonUnitBox10] = useState(false);
  const [modalSeeMbList, setModalSeeMbList] = useState(false);

  const [collapseDeleteUnitBox1, setCollapseDeleteUnitBox1] = useState(false);
  const [collapseDeleteUnitBox2, setCollapseDeleteUnitBox2] = useState(false);
  const [collapseDeleteUnitBox3, setCollapseDeleteUnitBox3] = useState(false);
  const [collapseDeleteUnitBox4, setCollapseDeleteUnitBox4] = useState(false);
  const [collapseDeleteUnitBox5, setCollapseDeleteUnitBox5] = useState(false);
  const [collapseDeleteUnitBox6, setCollapseDeleteUnitBox6] = useState(false);
  const [collapseDeleteUnitBox7, setCollapseDeleteUnitBox7] = useState(false);
  const [collapseDeleteUnitBox8, setCollapseDeleteUnitBox8] = useState(false);
  const [collapseDeleteUnitBox9, setCollapseDeleteUnitBox9] = useState(false);
  const [collapseDeleteUnitBox10, setCollapseDeleteUnitBox10] = useState(false);

  const [collapseEditUnitBox1, setCollapseEditUnitBox1] = useState(false);
  const [collapseEditUnitBox2, setCollapseEditUnitBox2] = useState(false);
  const [collapseEditUnitBox3, setCollapseEditUnitBox3] = useState(false);
  const [collapseEditUnitBox4, setCollapseEditUnitBox4] = useState(false);
  const [collapseEditUnitBox5, setCollapseEditUnitBox5] = useState(false);
  const [collapseEditUnitBox6, setCollapseEditUnitBox6] = useState(false);
  const [collapseEditUnitBox7, setCollapseEditUnitBox7] = useState(false);
  const [collapseEditUnitBox8, setCollapseEditUnitBox8] = useState(false);
  const [collapseEditUnitBox9, setCollapseEditUnitBox9] = useState(false);
  const [collapseEditUnitBox10, setCollapseEditUnitBox10] = useState(false);

  const [collapseSaveUnitBox1, setCollapseSaveUnitBox1] = useState(false);
  const [collapseSaveUnitBox2, setCollapseSaveUnitBox2] = useState(false);
  const [collapseSaveUnitBox3, setCollapseSaveUnitBox3] = useState(false);
  const [collapseSaveUnitBox4, setCollapseSaveUnitBox4] = useState(false);
  const [collapseSaveUnitBox5, setCollapseSaveUnitBox5] = useState(false);
  const [collapseSaveUnitBox6, setCollapseSaveUnitBox6] = useState(false);
  const [collapseSaveUnitBox7, setCollapseSaveUnitBox7] = useState(false);
  const [collapseSaveUnitBox8, setCollapseSaveUnitBox8] = useState(false);
  const [collapseSaveUnitBox9, setCollapseSaveUnitBox9] = useState(false);
  const [collapseSaveUnitBox10, setCollapseSaveUnitBox10] = useState(false);
  const [arrProduct, setArrProduct] = useState([]);
  // const tempArrEdit = [];

  const [collapsePackagingSelesaiButton, setCollapsePackagingSelesaiButton] =
    useState(false);
  const [
    collapseDetailScanNewBatchButtonUp,
    setCollapseDetailScanNewBatchButtonUp,
  ] = useState(true);
  const [
    collapseDetailScanNewBatchButtonDown,
    setCollapseDetailScanNewBatchButtonDown,
  ] = useState(false);

  const [collapseButtonFinishPackaging, setCollapseButtonFinishPackaging] =
    useState(false);

  const unitBox1Ref = useRef();
  const unitBox2Ref = useRef();
  const unitBox3Ref = useRef();
  const unitBox4Ref = useRef();
  const unitBox5Ref = useRef();
  const unitBox6Ref = useRef();
  const unitBox7Ref = useRef();
  const unitBox8Ref = useRef();
  const unitBox9Ref = useRef();
  const unitBox10Ref = useRef();
  // const unitBox11Ref = useRef();

  const [listProduct, setListProduct] = useState([]);
  const [listHeader, setListHeader] = useState("");
  const [listSeeMB, setListSeeMB] = useState([]);
  const [listScanningPackaging, setListScanningPackaging] = useState([]);

  const [payloadHeader, setPayloadHeader] = useState([]);

  const [selectedProdDate, setSelectedProdDate] = useState("");
  const [selectedExpDate, setSelectedExpDate] = useState("");

  const [checkedSample, setCheckedSample] = useState(false);

  const [detailBool, setDetailBool] = useState(false);

  const [disableUnitBox1, setDisableUnitBox1] = useState(true);
  const [disableUnitBox2, setDisableUnitBox2] = useState(true);
  const [disableUnitBox3, setDisableUnitBox3] = useState(true);
  const [disableUnitBox4, setDisableUnitBox4] = useState(true);
  const [disableUnitBox5, setDisableUnitBox5] = useState(true);
  const [disableUnitBox6, setDisableUnitBox6] = useState(true);
  const [disableUnitBox7, setDisableUnitBox7] = useState(true);
  const [disableUnitBox8, setDisableUnitBox8] = useState(true);
  const [disableUnitBox9, setDisableUnitBox9] = useState(true);
  const [disableUnitBox10, setDisableUnitBox10] = useState(true);

  const [listSample, setListSample] = useState(false);

  const router = useRouter();

  const [noID, setNoID] = useState("");

  const [collapseAddButton, setCollapseAddButton] = useState(false);

  const [collapseUnitBox11, setCollapseUnitBox11] = useState(false);
  const [unitBox11Disabled, setUnitBox11Disabled] = useState(false);
  const [unitBox11, setUnitBox11] = useState("");
  const [modalValidationFullUB, setModalValidationFullUB] = useState(false);

  const [modalValidationMBCode, setModalValidationMBCode] = useState(false);
  const [modalValidationUBCode, setModalValidationUBCode] = useState(false);
  const [modalValidationUBBoxFull, setModalValidationUBBoxFull] =
    useState(false);

  const [testing, setTesting] = useState([]);

  const [disableTestBox1, setDisableTestBox1] = useState(true);
  const [isOpen, setIsOpen] = useState([]);
  // const tempArrUnitBox = testing;
  const [testingArr, setTestingArr] = useState([]);
  const [testingArr2, setTestingArr2] = useState([]);
  const [productTest, setProductTest] = useState([]);
  // -------------------------------------------------------

  const [called, isCalled] = useState(false);

  const [ubBox, setUbBox] = useState();

  const [selectProduct, setSelectProduct] = useState({
    pro_name: "",
    pro_code: "",
  });

  const [totalArr, setTotalArr] = useState([]);

  const accessList = getStorage("access_list");

  useEffect(() => {
    if (!isUndefined(accessList)) {
      var parsedAccess = JSON.parse(accessList);
      if (
        !parsedAccess["QR_BPOM_MONITORING_OPERATOR"].includes(
          "QR_BPOM_MONITORING_OPERATOR_CREATE"
        )
      ) {
        router.push("/403");
      }
    } else {
      router.push("/403");
    }
  }, [accessList]);

  async function start(item) {
    if (selectBatchNumber === "" || selectBatchNumber === undefined) {
      setModalScanBatch(true);
    }
    if (selectBatchNumber !== "") {
      setModalStartScanNewBatch(true);
    }

    // if (masterCodeBox === "") {
    //   setModalValidationSaveAndFinish(true);
    // }
    console.log("selectBatchNumber", selectBatchNumber);
    console.log("getproduct", listProduct);
  }

  async function start2() {
    debounceMountCreateHeaderNewBatch();
    setFlag("D");
  }

  async function hideDetailScanNewBatch() {
    // if (
    //   (selectProduct === 0) &
    //   (selectProduct === 0) &
    //   (selectBatchNumber === "") &
    //   (selectBatchNumber === 0)
    // ) {
    //   // setModalScanBatch(true);
    // }
    // console.log("pro_code", payloadHeader.pro_code);
    // console.log("pro_name", payloadHeader.pro_name);
    // console.log("selectBatchNumber", selectBatchNumber);
    console.log("listHeader", listHeader);
    setCollapseDetailScanNewBatch(false);
    setCollapseDetailScanNewBatchButtonUp(false);
    setCollapseDetailScanNewBatchButtonDown(true);
  }

  async function showDetailScanNewBatch() {
    // if (
    //   (selectProduct === 0) &
    //   (selectProduct === 0) &
    //   (selectBatchNumber === "") &
    //   (selectBatchNumber === 0)
    // ) {
    //   // setModalScanBatch(true);
    // }
    setCollapseDetailScanNewBatch(true);
    setCollapseDetailScanNewBatchButtonUp(true);
    setCollapseDetailScanNewBatchButtonDown(false);
  }

  async function packaging() {
    setFlag("P");
    setCollapseSaveUnitBox1(false);
    setCollapseSaveUnitBox2(false);
    setCollapseSaveUnitBox3(false);
    setCollapseSaveUnitBox4(false);
    setCollapseSaveUnitBox5(false);
    setCollapseSaveUnitBox6(false);
    setCollapseSaveUnitBox7(false);
    setCollapseSaveUnitBox8(false);
    setCollapseSaveUnitBox9(false);
    setCollapseSaveUnitBox10(false);
  }

  async function saveAndContinueButton() {
    if (
      (unitBox1 !== 0 && unitBox1 !== "") ||
      (unitBox2 !== 0 && unitBox2 !== "") ||
      (unitBox3 !== 0 && unitBox3 !== "") ||
      (unitBox4 !== 0 && unitBox4 !== "") ||
      (unitBox5 !== 0 && unitBox5 !== "") ||
      (unitBox6 !== 0 && unitBox6 !== "") ||
      (unitBox7 !== 0 && unitBox7 !== "") ||
      (unitBox8 !== 0 && unitBox8 !== "") ||
      (unitBox9 !== 0 && unitBox9 !== "")
    ) {
      setModalScanningPackagingNotFull(true);
    }
    if (masterCodeBox === "") {
      setModalValidationSaveAndFinish(true);
    }
    if (unitBox10 !== 0 && unitBox10 !== "") {
      // mountCreateDetailNewBatch();
      console.log("testmasooooooooook");
      saveAndContinueFinish();
    }
  }

  async function saveAndContinueFinish() {
    debounceMountGetListMasterBox(listHeader.scan_id);

    setCollapsePackagingSelesaiButton(true);
    console.log(
      "setCollapsePackagingSelesaiButton",
      collapsePackagingSelesaiButton
    );
    mountCreateDetailNewBatch();

    setMasterCodeBox("");
    setUnitBox1("");
    setUnitBox2("");
    setUnitBox3("");
    setUnitBox4("");
    setUnitBox5("");
    setUnitBox6("");
    setUnitBox7("");
    setUnitBox8("");
    setUnitBox9("");
    setUnitBox10("");

    setCollapseDeleteUnitBox1(false);
    setCollapseDeleteUnitBox2(false);
    setCollapseDeleteUnitBox3(false);
    setCollapseDeleteUnitBox4(false);
    setCollapseDeleteUnitBox5(false);
    setCollapseDeleteUnitBox6(false);
    setCollapseDeleteUnitBox7(false);
    setCollapseDeleteUnitBox8(false);
    setCollapseDeleteUnitBox9(false);
    setCollapseDeleteUnitBox10(false);

    setUnitBox1Disabled(true);
    setUnitBox2Disabled(true);
    setUnitBox3Disabled(true);
    setUnitBox4Disabled(true);
    setUnitBox5Disabled(true);
    setUnitBox6Disabled(true);
    setUnitBox7Disabled(true);
    setUnitBox8Disabled(true);
    setUnitBox9Disabled(true);
    setUnitBox10Disabled(true);

    setModalScanningPackagingNotFull(false);
    setModalScanningPackagingNotFullFinish(false);

    setDetailBool(false);
  }

  const style = {
    position: "absolute",
    top: "25%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 600,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    pt: 2,
    px: 4,
    pb: 3,
  };

  // ------- Edit Unit Box Function -------

  async function editUnitBox1() {
    setUnitBox1Disabled(false);
    setCollapseEditUnitBox1(false);
    setCollapseSaveUnitBox1(true);
    // if (collapseEditUnitBox1 === false) {
    setUnitBox1EditVar(unitBox1);
    setUnitBox1("");
    // }
    console.log("product", product);
    console.log("savebutton(click edit)", collapseSaveUnitBox1);
  }
  async function editUnitBox2() {
    setUnitBox2Disabled(false);
    setCollapseEditUnitBox2(false);
    setCollapseSaveUnitBox2(true);
    setUnitBox2EditVar(unitBox2);
    setUnitBox2("");
  }
  async function editUnitBox3() {
    setUnitBox3Disabled(false);
    setCollapseEditUnitBox3(false);
    setCollapseSaveUnitBox3(true);
    setUnitBox3EditVar(unitBox3);
    setUnitBox3("");
  }
  async function editUnitBox4() {
    setUnitBox4Disabled(false);
    setCollapseEditUnitBox4(false);
    setCollapseSaveUnitBox4(true);
    setUnitBox4EditVar(unitBox4);
    setUnitBox4("");
  }
  async function editUnitBox5() {
    setUnitBox5Disabled(false);
    setCollapseEditUnitBox5(false);
    setCollapseSaveUnitBox5(true);
    setUnitBox5EditVar(unitBox5);
    setUnitBox5("");
  }
  async function editUnitBox6() {
    setUnitBox1Disabled(false);
    setCollapseEditUnitBox6(false);
    setCollapseSaveUnitBox6(true);
    setUnitBox6EditVar(unitBox6);
    setUnitBox6("");
  }
  async function editUnitBox7() {
    setUnitBox7Disabled(false);
    setCollapseEditUnitBox7(false);
    setCollapseSaveUnitBox7(true);
    setUnitBox7EditVar(unitBox7);
    setUnitBox7("");
  }
  async function editUnitBox8() {
    setUnitBox8Disabled(false);
    setCollapseEditUnitBox8(false);
    setCollapseSaveUnitBox8(true);
    setUnitBox8EditVar(unitBox8);
    setUnitBox8("");
  }
  async function editUnitBox9() {
    setUnitBox9Disabled(false);
    setCollapseEditUnitBox9(false);
    setCollapseSaveUnitBox9(true);
    setUnitBox9EditVar(unitBox9);
    setUnitBox9("");
  }
  async function editUnitBox10() {
    setUnitBox10Disabled(false);
    setCollapseEditUnitBox10(false);
    setCollapseSaveUnitBox10(true);
    setUnitBox10EditVar(unitBox10);
    setUnitBox10("");
  }
  // --------------------------------------

  // -------- Save Unit Box Button Function --------
  // const tempArrEdit = [];
  async function saveUnitBox1() {
    setUnitBox1Disabled(true);
    setCollapseEditUnitBox1(true);
    setCollapseSaveUnitBox1(false);
    if (unitBox1 === "") {
      setUnitBox1(unitBox1EditVar);
    }
    // if (unitBox1Edit === "") {
    //   setProductEdit(listScanningPackaging[0].scan_ubid);
    //   setUnitBox1(listScanningPackaging[0].scan_ubid);
    //   // tempArrEdit.push(unitBox1Edit);
    //   tempArrEdit.push(unitBox1Edit);
    // }
    // setUnitBox1Edit(listScanningPackaging[0].scan_ubid);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    // if (unitBox1Edit !== "") {
    //   tempArrEdit.push(unitBox1Edit);
    // }
    // if (unitBox1Edit === "") {
    //   setUnitBox1Edit(product[0]);
    //   tempArrEdit.push(product[0]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox2() {
    setUnitBox2Disabled(true);
    setCollapseEditUnitBox2(true);
    setCollapseSaveUnitBox2(false);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    if (unitBox2 === "") {
      setUnitBox2(unitBox2EditVar);
    }
    // if (unitBox2Edit !== "") {
    //   tempArrEdit.push(unitBox2Edit);
    // }
    // if (unitBox2Edit === "") {
    //   setUnitBox2Edit(product[1]);
    //   tempArrEdit.push(product[1]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox3() {
    setUnitBox3Disabled(true);
    setCollapseEditUnitBox3(true);
    setCollapseSaveUnitBox3(false);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    if (unitBox3 === "") {
      setUnitBox3(unitBox3EditVar);
    }
    // if (unitBox3Edit !== "") {
    //   tempArrEdit.push(unitBox3Edit);
    // }
    // if (unitBox3Edit === "") {
    //   setUnitBox3Edit(product[2]);
    //   tempArrEdit.push(product[2]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox4() {
    setUnitBox4Disabled(true);
    setCollapseEditUnitBox4(true);
    setCollapseSaveUnitBox4(false);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    if (unitBox4 === "") {
      setUnitBox4(unitBox4EditVar);
    }
    // if (unitBox4Edit !== "") {
    //   tempArrEdit.push(unitBox4Edit);
    // }
    // if (unitBox4Edit === "") {
    //   setUnitBox4Edit(product[3]);
    //   tempArrEdit.push(product[3]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox5() {
    setUnitBox5Disabled(true);
    setCollapseEditUnitBox5(true);
    setCollapseSaveUnitBox5(false);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    if (unitBox5 === "") {
      setUnitBox5(unitBox5EditVar);
    }
    // if (unitBox5Edit !== "") {
    //   tempArrEdit.push(unitBox5Edit);
    // }
    // if (unitBox5Edit === "") {
    //   setUnitBox5Edit(product[4]);
    //   tempArrEdit.push(product[4]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox6() {
    setUnitBox6Disabled(true);
    setCollapseEditUnitBox6(true);
    setCollapseSaveUnitBox6(false);
    if (unitBox6 === "") {
      setUnitBox6(unitBox6EditVar);
    }
    // if (unitBox6Edit !== "") {
    //   tempArrEdit.push(unitBox6Edit);
    // }
    // if (unitBox6Edit === "") {
    //   setUnitBox6Edit(product[5]);
    //   tempArrEdit.push(product[5]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox7() {
    setUnitBox7Disabled(true);
    setCollapseEditUnitBox7(true);
    setCollapseSaveUnitBox7(false);
    if (unitBox7 === "") {
      setUnitBox7(unitBox7EditVar);
    }
    // if (unitBox7Edit !== "") {
    //   tempArrEdit.push(unitBox7Edit);
    // }
    // if (unitBox7Edit === "") {
    //   setUnitBox7Edit(product[6]);
    //   tempArrEdit.push(product[6]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox8() {
    setUnitBox8Disabled(true);
    setCollapseEditUnitBox8(true);
    setCollapseSaveUnitBox8(false);
    if (unitBox8 === "") {
      setUnitBox8(unitBox8EditVar);
    }
    // if (unitBox8Edit !== "") {
    //   tempArrEdit.push(unitBox8Edit);
    // }
    // if (unitBox8Edit === "") {
    //   setUnitBox8Edit(product[7]);
    //   tempArrEdit.push(product[7]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox9() {
    setUnitBox9Disabled(true);
    setCollapseEditUnitBox9(true);
    setCollapseSaveUnitBox9(false);
    if (unitBox9 === "") {
      setUnitBox9(unitBox9EditVar);
    }
    // if (unitBox9Edit !== "") {
    //   tempArrEdit.push(unitBox9Edit);
    // }
    // if (unitBox9Edit === "") {
    //   setUnitBox9Edit(product[8]);
    //   tempArrEdit.push(product[8]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox10() {
    setUnitBox10Disabled(true);
    setCollapseEditUnitBox10(true);
    setCollapseSaveUnitBox10(false);
    if (unitBox10 === "") {
      setUnitBox10(unitBox10EditVar);
    }
    // if (unitBox10Edit !== "") {
    //   tempArrEdit.push(unitBox10Edit);
    // }
    // if (unitBox10Edit === "") {
    //   setUnitBox10Edit(product[9]);
    //   tempArrEdit.push(product[9]);
    // }
    // setProductEdit(tempArrEdit);
  }
  // --------------------------------------------------

  async function packingFinish() {
    setModalPackingSelesai(true);
  }

  async function packingFinishModal() {
    setModalPackingSelesai2(false);
    setModalPackingSelesai(false);
    // setFlag("Y");
    router.push(`/monitoring-process-scan`);
    setModalStartScanNewBatch(false);
  }

  async function finishScanningPackaging() {
    // if (detailBool !== true) {
    // if (
    //   (unitBox1 !== 0 && unitBox1 !== "") ||
    //   (unitBox2 !== 0 && unitBox2 !== "") ||
    //   (unitBox3 !== 0 && unitBox3 !== "") ||
    //   (unitBox4 !== 0 && unitBox4 !== "") ||
    //   (unitBox5 !== 0 && unitBox5 !== "") ||
    //   (unitBox6 !== 0 && unitBox6 !== "") ||
    //   (unitBox7 !== 0 && unitBox7 !== "") ||
    //   (unitBox8 !== 0 && unitBox8 !== "") ||
    //   (unitBox9 !== 0 && unitBox9 !== "")
    // ) {
    //   setModalScanningPackagingNotFullFinish(true);
    //   // setFlag("D");
    // }
    // if (masterCodeBox === "") {
    //   setModalValidationSaveAndFinish(true);
    // }
    // if (unitBox10 !== 0 && unitBox10 !== "") {
    //   // if (masterCodeBox !== "") {
    //   setFlag("D");
    //   console.log("product", product);
    //   saveAndContinueFinish();
    // }
    // if (detailBool === true) {

    // }
    // }

    // if (detailBool === true) {
    setFlag("D");
    mountUpdateUBID();
    console.log("finishMasuk");
    setProduct([]);
    // setProductEdit([]);
    setCollapseSaveUnitBox1(false);
    setCollapseSaveUnitBox2(false);
    setCollapseSaveUnitBox3(false);
    setCollapseSaveUnitBox4(false);
    setCollapseSaveUnitBox5(false);
    setCollapseSaveUnitBox6(false);
    setCollapseSaveUnitBox7(false);
    setCollapseSaveUnitBox8(false);
    setCollapseSaveUnitBox9(false);
    setCollapseSaveUnitBox10(false);
    // }
  }

  // const listMasterBox = [
  //   {
  //     scan_mbid: "MBCODE001",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE002",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE003",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE004",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE005",
  //     scan_ubid: "10",
  //   },
  // ];

  // const handleKeyDownUnitBox1 = (event) => {
  //   if (event.key === "Enter") {
  //     unitBox1Ref.focus();
  //   }
  // };

  const [MBBox, setMBBox] = useState("");
  const [unitBox1Edit, setUnitBox1Edit] = useState("");
  const [unitBox2Edit, setUnitBox2Edit] = useState("");
  const [unitBox3Edit, setUnitBox3Edit] = useState("");
  const [unitBox4Edit, setUnitBox4Edit] = useState("");
  const [unitBox5Edit, setUnitBox5Edit] = useState("");
  const [unitBox6Edit, setUnitBox6Edit] = useState("");
  const [unitBox7Edit, setUnitBox7Edit] = useState("");
  const [unitBox8Edit, setUnitBox8Edit] = useState("");
  const [unitBox9Edit, setUnitBox9Edit] = useState("");
  const [unitBox10Edit, setUnitBox10Edit] = useState("");
  const scanData = [];
  const [mbSizeDetail, setMbsizeDetail] = useState([]);

  // console.log(
  //   "listScanningPackagingFunc2",
  //   listScanningPackaging && listScanningPackaging
  // );
  // }

  useEffect(() => {
    // console log

    console.log("scanningPackaging", listScanningPackaging);
  }, [listScanningPackaging, listSample, checkedSample]);

  // const debounceMountGetListMasterBox = useCallback(
  //   debounce(mountGetListMasterBox, 400)
  // );

  // async function mountGetListMasterBox(scanid) {
  //   try {
  //     const getListMasterBox = await qr.getListMasterBox(scanid);
  //     const { data } = getListMasterBox.data;
  //     setListMasterBox(data);
  //     console.log("dataMasterBox", data);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // }

  async function mountGetListAllProduct() {
    try {
      const getListProduct = await qr.getListAllProduct();
      const { data } = getListProduct.data;
      setListProduct(data);
    } catch (error) {
      console.log(error);
    }
  }

  useEffect(() => {
    setCollapseButtonFinishPackaging(true);
    if (listHeader.scan_status === "O" || listHeader.scan_status === "R") {
      setCollapseButtonFinishPackaging(true);
      setCollapsePackagingSelesaiButton(true);
      // setCollapseAddButton(true);
      console.log("collapseAddButton", collapseAddButton);
      console.log("listHeader", listHeader);
    }
  }, [
    unitBox1,
    unitBox2,
    unitBox3,
    unitBox4,
    unitBox5,
    unitBox6,
    unitBox7,
    unitBox8,
    unitBox9,
    unitBox10,

    listHeader,
    collapseButtonFinishPackaging,
    collapsePackagingSelesaiButton,
    collapseAddButton,
    ,
  ]);

  useEffect(() => {
    // console log
    console.log("product", product);
    console.log("productEdit", productEdit);
  }, [
    unitBox1,
    unitBox2,
    unitBox3,
    unitBox4,
    unitBox5,
    unitBox6,
    unitBox7,
    unitBox8,
    unitBox9,
    unitBox10,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,
  ]);

  async function mountCreateDetailNewBatch() {
    try {
      var k;
      var y;
      y = 0;
      // for (k = 1; k <= 10; k++) {
      if (unitBox1 !== "") {
        y = y + 1;
      }
      if (unitBox2 !== "") {
        y = y + 1;
      }
      if (unitBox3 !== "") {
        y = y + 1;
      }
      if (unitBox4 !== "") {
        y = y + 1;
      }
      if (unitBox5 !== "") {
        y = y + 1;
      }
      if (unitBox6 !== "") {
        y = y + 1;
      }
      if (unitBox7 !== "") {
        y = y + 1;
      }
      if (unitBox8 !== "") {
        y = y + 1;
      }
      if (unitBox9 !== "") {
        y = y + 1;
      }
      if (unitBox10 !== "") {
        y = y + 1;
      }
      // }
      console.log("y", y);
      var x;
      var j;
      j = 10 - y;
      var k;
      k = 1;
      console.log("j", j);
      for (x = 1; x <= listHeader.scan_mbsize - j; x++) {
        var test;
        test = listHeader.scan_id;
        // var payload = {
        //   data: {
        //     scan_id: test,
        //     scan_mbid: masterCodeBox,
        //     scan_ubid:
        //       // unitBox1,
        //       x === 1
        //         ? unitBox1
        //         : x === 2
        //         ? unitBox2
        //         : x === 3
        //         ? unitBox3
        //         : x === 4
        //         ? unitBox4
        //         : x === 5
        //         ? unitBox5
        //         : x === 6
        //         ? unitBox6
        //         : x === 7
        //         ? unitBox7
        //         : x === 8
        //         ? unitBox8
        //         : x === 9
        //         ? unitBox9
        //         : unitBox10,
        //     scan_sampleyn: "Y",

        //     // scan_id: listHeader[0].scan_id,
        //     // scan_mbid:
        //   },
        // };

        var payload = {
          data: {
            scan_id: test,
            scan_mbid: masterCodeBox,
            scan_uburut:
              x === 1
                ? k
                : x === 2
                ? k
                : x === 3
                ? k
                : x === 4
                ? k
                : x === 5
                ? k
                : x === 6
                ? k
                : x === 7
                ? k
                : x === 8
                ? k
                : x === 9
                ? k
                : k,
            scan_ubid:
              // unitBox1,
              x === 1
                ? product[0]
                : x === 2
                ? product[1]
                : x === 3
                ? product[2]
                : x === 4
                ? product[3]
                : x === 5
                ? product[4]
                : x === 6
                ? product[5]
                : x === 7
                ? product[6]
                : x === 8
                ? product[7]
                : x === 9
                ? product[8]
                : product[9],
            scan_sampleyn: "Y",

            // scan_id: listHeader[0].scan_id,
            // scan_mbid:
          },
        };
        k = k + 1;

        // }

        console.log("payload", payload);
        const createDetailNewBatch = await qr.createDetailNewBatch(payload);
        const { data } = createDetailNewBatch.data;
        console.log("data", data);
        // setListHeader(data);
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function mountUpdateUBID(item) {
    try {
      // var k;
      var y;
      y = 0;
      // for (k = 1; k <= 10; k++) {
      console.log("unitBox1FinishEdit", unitBox1);
      if (unitBox1 !== "") {
        y = y + 1;
      }
      if (unitBox2 !== "") {
        y = y + 1;
      }
      if (unitBox3 !== "") {
        y = y + 1;
      }
      if (unitBox4 !== "") {
        y = y + 1;
      }
      if (unitBox5 !== "") {
        y = y + 1;
      }
      if (unitBox6 !== "") {
        y = y + 1;
      }
      if (unitBox7 !== "") {
        y = y + 1;
      }
      if (unitBox8 !== "") {
        y = y + 1;
      }
      if (unitBox9 !== "") {
        y = y + 1;
      }
      if (unitBox10 !== "") {
        y = y + 1;
      }
      // }
      console.log("y", y);
      var x;
      var j;
      j = 10 - y;
      // var k;
      // k = 1;
      console.log("unitBox1FinishEdit2", unitBox1);
      console.log("mbSizeDetail.cnt", mbSizeDetail.cnt);

      console.log("j", j);
      // for (x = 1; x <= listHeader.scan_mbsize - j; x++) {
      for (x = 1; x <= mbSizeDetail.cnt; x++) {
        var test;
        test = listHeader.scan_id;
        var payload = {
          data: {
            scan_id: test,
            scan_mbid: listScanningPackaging[0].scan_mbid,
            scan_uburut:
              x === 1
                ? 1
                : x === 2
                ? 2
                : x === 3
                ? 3
                : x === 4
                ? 4
                : x === 5
                ? 5
                : x === 6
                ? 6
                : x === 7
                ? 7
                : x === 8
                ? 8
                : x === 9
                ? 9
                : 10,
            scan_ubid:
              // unitBox1,
              x === 1
                ? productEdit[0]
                : x === 2
                ? productEdit[1]
                : x === 3
                ? productEdit[2]
                : x === 4
                ? productEdit[3]
                : x === 5
                ? productEdit[4]
                : x === 6
                ? productEdit[5]
                : x === 7
                ? productEdit[6]
                : x === 8
                ? productEdit[7]
                : x === 9
                ? productEdit[8]
                : productEdit[9],
            scan_sampleyn: checkedSample === false ? false : true,

            // scan_id: listHeader[0].scan_id,
            // scan_mbid:
          },
        };
        // k = k + 1;

        // }

        console.log("finishMasukUpdate");
        console.log("listHeaderFinish", listHeader);

        console.log("payloadUpdate", payload);
        const updateUBID = await qr.updateDetailUBID(payload);
        const { data } = updateUBID.data;
        console.log("data", data);
        // setListHeader(data);
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function savePayloadHeader(e) {
    setSelectProduct(e.target.value);
    setPayloadHeader(item);
  }

  async function checkSample() {
    console.log("checkSample", checkedSample);
    if (checkedSample === false) {
      setCheckedSample(true);
      console.log("testSample", checkedSample);
      // setListSample(false)
      // console.log("listSample", listSample)
    }
    if (checkedSample === true) {
      setCheckedSample(false);
      console.log("testSample", checkedSample);
      //   setListSample(true)
      // console.log("listSample", listSample)
    }
    console.log("listSampleFInsihCheck", listSample);
  }

  // const debounceMountGetSeeMBList = useCallback(
  //   debounce(mountGetSeeMBList, 400)
  // );

  // async function mountGetSeeMBList() {
  //   try {
  //     const mountGetSeeMBList = await qr.getSeeMBList(listHeader.scan_id);
  //     const { data } = mountGetSeeMBList.data;
  //     setListSeeMB(data);
  //     setModalSeeMbList(true);
  //     console.log("listScanningPackagingSeeMBList", listScanningPackaging);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // }

  async function testLog() {
    console.log("seeMBList", listSeeMB);
    setModalSeeMbList(false);
  }

  // async function detailScanningPackaging(item) {
  //   setFlag("P");
  //   // setDetailBool(true);
  //   // debounceMountGetScanningPackagingData(listHeader.scan_id, item.scan_mbid);
  //   // setMbsizeDetail(item);
  //   // console.log("scanid", listHeader.scan_id);
  //   // console.log("itemMBID", item);
  //   // console.log("listScanningPackaging", listScanningPackaging);
  //   // console.log("product", product);
  //   // console.log("productEdit", productEdit);
  //   // setCollapseSaveUnitBox1(false);
  //   // setCollapseSaveUnitBox2(false);
  //   // setCollapseSaveUnitBox3(false);
  //   // setCollapseSaveUnitBox4(false);
  //   // setCollapseSaveUnitBox5(false);
  //   // setCollapseSaveUnitBox6(false);
  //   // setCollapseSaveUnitBox7(false);
  //   // setCollapseSaveUnitBox8(false);
  //   // setCollapseSaveUnitBox9(false);
  //   // setCollapseSaveUnitBox10(false);
  // }

  async function finishPackaging() {
    try {
      const mountUpdateUBID = await qr.updatePackingSelesai(listHeader.scan_id);
      const { data } = mountUpdateUBID.data;
      setModalPackingSelesai2(true);

      // console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  // ---------------------------------------------------------------------
  useEffect(() => {
    if (!router.isReady) return;
    if (router.query.id !== "undefined") {
      var props = router.query;
      setNoID(props.id);
    } else {
      router.push({
        pathname: "/approval",
      });
    }
    // debounceMountGetHeader(noID);
    // console.log("listHeader", listHeader);
  }, [router.isReady]);

  async function mountGetHeader() {
    try {
      const mountGetHeader = await qr.getHeader(noID);
      const { data } = mountGetHeader.data;
      setListHeader(data);
      console.log("noID", noID);
      // setListSeeMB(data);
      // setModalSeeMbList(true);
      console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetHeader = useCallback(debounce(mountGetHeader, 400));

  useEffect(() => {
    console.log("listheaderstatus", listHeader.scan_status);

    if (flag === "D" && noID !== "") {
      debounceMountGetHeader();
      debounceMountGetListMasterBox(noID);
      console.log("listHeader", listHeader);
    }
  }, [noID]);

  // const debounceMountGetListMasterBox = useCallback(
  //   debounce(mountGetListMasterBox, 400)
  // );

  // async function mountGetListMasterBox(scanid) {
  //   try {
  //     const getListMasterBox = await qr.getListMasterBox(scanid);
  //     const { data } = getListMasterBox.data;
  //     setListMasterBox(data);
  //     console.log("dataMasterBox", data);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // }

  async function detailScanningPackaging(item) {
    setFlag("P");
    debounceMountGetScanningPackagingData(noID, item.scan_mbid);
    setMbsizeDetail(item);
  }

  async function back() {
    setFlag("D");
    setProductEdit([]);
    setUnitBox1("");
    setUnitBox2("");
    setUnitBox3("");
    setUnitBox4("");
    setUnitBox5("");
    setUnitBox6("");
    setUnitBox7("");
    setUnitBox8("");
    setUnitBox9("");
    setUnitBox10("");
  }

  // FROM SCAN NEW BATCH

  // const [collapseAddButton, setCollapseAddButton] = useState(false);

  // const [collapseUnitBox11, setCollapseUnitBox11] = useState(false);
  // const [unitBox11Disabled, setUnitBox11Disabled] = useState(false);
  // const [unitBox11, setUnitBox11] = useState("");
  // const [modalValidationFullUB, setModalValidationFullUB] = useState(false);

  // const [modalValidationMBCode, setModalValidationMBCode] = useState(false);
  // const [modalValidationUBCode, setModalValidationUBCode] = useState(false);
  // const [modalValidationUBBoxFull, setModalValidationUBBoxFull] =
  //   useState(false);

  // const [testing, setTesting] = useState([]);

  // const [disableTestBox1, setDisableTestBox1] = useState(true);
  // const [isOpen, setIsOpen] = useState([]);
  // // const tempArrUnitBox = testing;
  // const [testingArr, setTestingArr] = useState([]);
  // const [testingArr2, setTestingArr2] = useState([]);
  // const [productTest, setProductTest] = useState([]);
  // // -------------------------------------------------------

  // const [called, isCalled] = useState(false);

  // const [ubBox, setUbBox] = useState();

  // const [selectProduct, setSelectProduct] = useState({
  //   pro_name: "",
  //   pro_code: "",
  // });

  // const [totalArr, setTotalArr] = useState([]);

  // const [unit1, setUnit1] = useState(0);
  // const [unit2, setUnit2] = useState(0);
  // const [unit3, setUnit3] = useState(0);
  // const [unit4, setUnit4] = useState(0);
  // const [unit5, setUnit5] = useState(0);
  // const [unit6, setUnit6] = useState(0);
  // const [unit7, setUnit7] = useState(0);
  // const [unit8, setUnit8] = useState(0);
  // const [unit9, setUnit9] = useState(0);
  // const [unit10, setUnit10] = useState(0);

  // const [boolDelete, setBoolDelete] = useState(false);
  async function start(item) {
    if (
      selectBatchNumber === "" ||
      selectBatchNumber === undefined ||
      selectProduct === "" ||
      selectProduct === undefined ||
      selectedProdDate === "" ||
      selectedProdDate === undefined ||
      selectedExpDate === "" ||
      selectedExpDate === undefined
    ) {
      setModalScanBatch(true);
    }
    if (
      selectBatchNumber !== "" &&
      selectProduct !== "" &&
      selectedProdDate !== "" &&
      selectedExpDate !== ""
    ) {
      setModalStartScanNewBatch(true);
    }
    console.log("selectBatchNumber", selectBatchNumber);
    console.log("getproduct", listProduct);
  }

  async function start2() {
    var z;
    debounceMountCreateHeaderNewBatch();
    setFlag("D");
  }

  async function hideDetailScanNewBatch() {
    console.log("listHeader", listHeader);
    setCollapseDetailScanNewBatch(false);
    setCollapseDetailScanNewBatchButtonUp(false);
    setCollapseDetailScanNewBatchButtonDown(true);
  }

  async function showDetailScanNewBatch() {
    setCollapseDetailScanNewBatch(true);
    setCollapseDetailScanNewBatchButtonUp(true);
    setCollapseDetailScanNewBatchButtonDown(false);
  }

  async function packaging() {
    setFlag("P");
    setCollapseSaveUnitBox1(false);
    setCollapseSaveUnitBox2(false);
    setCollapseSaveUnitBox3(false);
    setCollapseSaveUnitBox4(false);
    setCollapseSaveUnitBox5(false);
    setCollapseSaveUnitBox6(false);
    setCollapseSaveUnitBox7(false);
    setCollapseSaveUnitBox8(false);
    setCollapseSaveUnitBox9(false);
    setCollapseSaveUnitBox10(false);
    // setTesting(tempArrMbSize);
    if (listHeader.scan_mbsize !== "") {
      var z;
      for (z = 1; z <= listHeader.scan_mbsize; z++) {
        // tempArrMbSize.push(z);
        tempArrMbSize.push("");
        // setTesting(z);
      }
      setTesting(tempArrMbSize);
      console.log("testinggggggggz", testing);
      // tempArrMapTest.push(unitBox1);
      // setProduct(tempArrMapTest);
    }
  }

  useEffect(() => {
    console.log("detailBool", detailBool);
    if (masterCodeBox === "") {
      setMasterBoxDisable(false);
    }
    if (detailBool !== true) {
      setUnitBox1Disabled(false);
      if (
        // masterCodeBox !== 0 &&
        // masterCodeBox !== "" &&
        // masterCodeBox.length >= 58
        masterCodeBox.length >= 58
      ) {
        unitBox1Ref[`item${0}`].focus();
        setMasterBoxDisable(true);
        setDisableTestBox1(false);
        console.log("testRef", unitBox1Ref[`item${0}`]);
      }
      console.log("MasterBoxDisable", masterBoxDisable);
    }
    // var input = testing[index];
    // if()
    if (flag === "Y") {
      debounceMountGetListAllProduct();
      console.log("getlistallproduct");
    }

    // ---------- validasi button edit di menu scanning packaging ----------
    // const tempArrMapTest = [];

    // console.log("testSetProduct", product);
    // ---------------------------------------------------------------------
  }, [
    // testing,

    masterCodeBox,
    unitBox1Disabled,
    unitBox1,
    unitBox2Disabled,
    unitBox2,
    unitBox3Disabled,
    unitBox3,
    unitBox4Disabled,
    unitBox4,
    unitBox5Disabled,
    unitBox5,
    unitBox6Disabled,
    unitBox6,
    unitBox7Disabled,
    unitBox7,
    unitBox8Disabled,
    unitBox8,
    unitBox9Disabled,
    unitBox9,
    unitBox10Disabled,
    unitBox10,
    detailBool,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,
  ]);

  // useEffect(() => {
  //   console.log("boolApproval-ScanNewBatch", detailApprovalBool);
  // }, [detailApprovalBool]);

  async function saveAndContinueButton() {
    if (
      (unitBox1 !== 0 && unitBox1 !== []) ||
      (unitBox2 !== 0 && unitBox2 !== "") ||
      (unitBox3 !== 0 && unitBox3 !== "") ||
      (unitBox4 !== 0 && unitBox4 !== "") ||
      (unitBox5 !== 0 && unitBox5 !== "") ||
      (unitBox6 !== 0 && unitBox6 !== "") ||
      (unitBox7 !== 0 && unitBox7 !== "") ||
      (unitBox8 !== 0 && unitBox8 !== "") ||
      (unitBox9 !== 0 && unitBox9 !== "")
    ) {
      setModalScanningPackagingNotFull(true);
    }
    if (masterCodeBox === "") {
      setModalValidationSaveAndFinish(true);
    }
    if (unitBox10 !== 0 && unitBox10 !== "") {
      console.log("testmasooooooooook");
      saveAndContinueFinish();
    }
    // setBoolDelete(false);
  }

  async function saveAndContinueFinish() {
    console.log("testArray", inputValue);
    var x;
    // const arrS = [];
    console.log("inputValue[1]", inputValue[1]);
    console.log("inputValue", inputValue);
    var y;
    y = 0;
    for (x = 1; x <= listHeader.scan_mbsize; x++) {
      if (testingArr[x] !== "") {
        testingArr2.push(testingArr[y]);
        y++;
      }
    }
    setProductTest(testingArr2);

    console.log("testingFinish", testingArr);
    console.log("testingFinish2", testingArr[0]);
    // console.log("testArray2", tempArrUnitBox);
    debounceMountGetListMasterBox(listHeader.scan_id);
    console.log("sampleyn", checkedSample);
    setCheckedSample(false);

    setCollapsePackagingSelesaiButton(true);
    console.log(
      "setCollapsePackagingSelesaiButton",
      collapsePackagingSelesaiButton
    );
    mountCreateDetailNewBatch();

    setMasterCodeBox("");
    setUnitBox1("");
    setUnitBox2("");
    setUnitBox3("");
    setUnitBox4("");
    setUnitBox5("");
    setUnitBox6("");
    setUnitBox7("");
    setUnitBox8("");
    setUnitBox9("");
    setUnitBox10("");
    for (y = 0; y < scanData.length; y++) {
      unitBox1EditKeep.push(scanData[y].scan_ubid);
      unitBox1EditKeepStr.push("");
      console.log("testLoopBoxEdit", scanData[y].scan_ubid);
    }
    setTesting(unitBox1EditKeep);

    setCollapseDeleteUnitBox1(false);
    setCollapseDeleteUnitBox2(false);
    setCollapseDeleteUnitBox3(false);
    setCollapseDeleteUnitBox4(false);
    setCollapseDeleteUnitBox5(false);
    setCollapseDeleteUnitBox6(false);
    setCollapseDeleteUnitBox7(false);
    setCollapseDeleteUnitBox8(false);
    setCollapseDeleteUnitBox9(false);
    setCollapseDeleteUnitBox10(false);

    setUnitBox1Disabled(true);
    setUnitBox2Disabled(true);
    setUnitBox3Disabled(true);
    setUnitBox4Disabled(true);
    setUnitBox5Disabled(true);
    setUnitBox6Disabled(true);
    setUnitBox7Disabled(true);
    setUnitBox8Disabled(true);
    setUnitBox9Disabled(true);
    setUnitBox10Disabled(true);

    setModalScanningPackagingNotFull(false);
    setModalScanningPackagingNotFullFinish(false);

    setDetailBool(false);
    setProductTest([]);
    setTestingArr2([]);
    // setTesting([]);
  }

  async function deleteUnitBox1(index) {
    console.log("arr penampung", testing);
    console.log("index", index);
    var tempArr = [...testing];
    tempArr[index] = "";
    console.log("temparr final", tempArr);
    setTesting(tempArr);
    unitBox1Ref[`item${index}`].focus();
  }

  // --------------------------------------------------

  async function packingFinish() {
    setModalPackingSelesai(true);
  }

  // async function packingFinishModal() {
  //   setModalPackingSelesai2(false);
  //   setModalPackingSelesai(false);
  //   setFlag("Y");
  //   setModalStartScanNewBatch(false);
  // }

  async function finishScanningPackaging() {
    var i;
    if (detailBool !== true) {
      for (i = 0; i < totalArr.length; i++) {
        if (totalArr[i] === "") {
          setModalScanningPackagingNotFullFinish(true);
          console.log("masuk1", i);
          break;
        }
        if (totalArr[totalArr.length - 1] !== "") {
          setFlag("D");
          console.log("product", product);
          saveAndContinueFinish();
          console.log("masuk2", i);
          console.log("totalArr.length-masuk2", totalArr.length);

          break;
        }
        console.log("masuk0", i);
        console.log("totalArr.length", totalArr.length);
      }
      if (masterCodeBox === "") {
        setModalValidationSaveAndFinish(true);
      }

      console.log("totalArr", totalArr);
      console.log("masokDetail");
    }

    if (detailBool === true) {
      setFlag("D");
      mountUpdateUBID();
      setUnitBox1Edit([]);
      setDetailBool(false);
      setProduct([]);
      setTesting(unitBox1EditKeep);
      setCollapseSaveUnitBox1(true);

      setUnitBox1Edit("");
      console.log("detailBoolDetailBoolTrue", detailBool);
      console.log("masokDetailTrue");
    }
  }

  const debounceMountGetScanningPackagingData = useCallback(
    debounce(mountGetScanningPackagingData, 400)
  );
  const unitBox1EditKeep = [];
  const unitBox1EditKeepStr = [];
  async function mountGetScanningPackagingData(scanid, mbid) {
    try {
      const getScanningPackaging = await qr.getScanningPackagingData(
        noID,
        mbid
      );
      const { data } = getScanningPackaging.data;

      if (data !== null) {
        setListScanningPackaging(data);
        scanData = data;
        console.log("dataScanningPackaging", data);
        console.log("scandata", scanData);
        console.log("scandataLength", scanData.length);
        setMBBox(scanData[0].scan_mbid);
        var y;
        const unitBox1EditKeep = [];
        for (y = 0; y < scanData.length; y++) {
          unitBox1EditKeep.push(scanData[y].scan_ubid);
          unitBox1EditKeepStr.push("");
          console.log("testLoopBoxEdit", scanData[y].scan_ubid);
        }

        // --------------------------------------------------------

        let arrayOfData = [];
        for (let i = 0; i <= data.length - 1; i++) {
          arrayOfData.push(true);
        }
        setIsOpen(arrayOfData);

        // --------------------------------------------------------
        setTesting(unitBox1EditKeep);
        // }
        console.log("testUnitBoxEdit", unitBox1Edit);
        console.log("testUnitBoxEditKeep", unitBox1EditKeep);
        console.log("testUnitBox1EditKeepStr", unitBox1EditKeepStr);
        console.log("testingFunction", testing);
      }
    } catch (error) {
      console.log(error);
    }
  }

  // useEffect(() => {
  //   console.log("scanningPackaging", listScanningPackaging);
  // }, [listScanningPackaging]);

  const debounceMountGetListMasterBox = useCallback(
    debounce(mountGetListMasterBox, 400)
  );

  async function mountGetListMasterBox(scanid) {
    try {
      const getListMasterBox = await qr.getListMasterBox(scanid);
      const { data } = getListMasterBox.data;
      setListMasterBox(data);
      console.log("dataMasterBox", data);
      //   var z;
      //   for (z = 0; z < listHeader.scan_mbid; z++) {
      //     console.log("testZ", z);
      //     setTesting(z);
      //   }
      console.log("testing", testing);
      console.log("listHeader", listHeader);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetListAllProduct = useCallback(
    debounce(mountGetListAllProduct, 400)
  );

  async function mountGetListAllProduct() {
    try {
      const getListProduct = await qr.getListAllProduct();
      const { data } = getListProduct.data;
      setListProduct(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountCreateHeaderNewBatch = useCallback(
    debounce(mountCreateHeaderNewBatch, 400)
  );
  // const [testing, setTesting] = useState([]);+
  // scan_procode: payloadHeader.pro_code,
  //         scan_proname: payloadHeader.pro_name,
  async function mountCreateHeaderNewBatch() {
    try {
      var payload = {
        data: {
          scan_procode: selectProduct.pro_code,
          scan_proname: selectProduct.pro_name,
          scan_batch: selectBatchNumber,
          scan_proddate: formatDate(selectedProdDate, "YYMMDD"),
          scan_expdate: formatDate(selectedExpDate, "YYMMDD"),
        },
      };

      try {
        console.log("payload", payload);
        const createHeaderNewBatch = await qr.createHeaderNewBatch(payload);
        const { data } = createHeaderNewBatch.data;
        console.log("data", data);
        setListHeader(data);
        console.log("datascanid", data.scan_id);
        console.log("datambsize", data.scan_mbsize);
        debounceMountGetListMasterBox(data.scan_id);
        // var z;
        // for (z = 0; z < data.scan_mbid; z++) {
        //   console.log("testZ", z);
        //   setTesting(z);
        // }
        console.log("testing", testing);
      } catch (error) {
        console.log(error);
      }

      // console.log("pro_code", payloadHeader.pro_code);
      // console.log("pro_name", payloadHeader.pro_name);
      console.log("selectBatchNumber", selectBatchNumber);
    } catch (error) {
      console.log(error);
    }
  }
  const [product, setProduct] = useState([]);
  const [productEdit, setProductEdit] = useState([]);

  // const [productUrut, setProductUrut] = useState([]);
  const tempArrMbSize = [];
  useEffect(() => {
    if (detailBool !== true) {
      if (listHeader !== []) {
        setCollapseAddButton(true);
      }
    }

    if (detailBool === true) {
      console.log("testOpen", isOpen);
    }
  }, [
    unitBox1,
    unitBox2,
    unitBox3,
    unitBox4,
    unitBox5,
    unitBox6,
    unitBox7,
    unitBox8,
    unitBox9,
    unitBox10,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,

    disableUnitBox1,
    disableUnitBox2,
    disableUnitBox3,
    disableUnitBox4,
    disableUnitBox5,
    disableUnitBox6,
    disableUnitBox7,
    disableUnitBox8,
    disableUnitBox9,
    disableUnitBox10,

    listHeader,
    detailBool,
  ]);

  async function mountCreateDetailNewBatch() {
    try {
      var test;
      const noEmptyStrings = testing.filter((str) => str !== "");
      test = listHeader.scan_id;
      var payload = {
        data: {
          scan_id: test,
          scan_mbid: masterCodeBox,
          // scan_uburut: productUrut,
          scan_ubid: noEmptyStrings,
          scan_sampleyn: checkedSample === false ? "N" : "Y",
        },
      };

      console.log("testArrnoEmptyStrings", noEmptyStrings);
      console.log("payload", payload);
      const createDetailNewBatch = await qr.createDetailNewBatch2(payload);
      const { data } = createDetailNewBatch.data;
      console.log("data", data);
    } catch (error) {
      console.log(error);
    }
  }

  async function mountUpdateUBID() {
    try {
      var y;
      y = 0;
      var x;
      console.log("testCnt", testing.length);
      for (x = 1; x <= testing.length; x++) {
        var test;
        test = listHeader.scan_id;
        var payload = {
          data: {
            scan_id: test,
            scan_mbid: listScanningPackaging[0].scan_mbid,
            scan_uburut: x,
            scan_ubid: testing[y],
            scan_sampleyn: checkedSample === false ? false : true,
          },
        };

        console.log("payloadUpdate", payload);
        const updateUBID = await qr.updateDetailUBID(payload);
        const { data } = updateUBID.data;
        console.log("data", data);
        console.log("updateUBID", updateUBID);
        console.log("testing[y]", testing[y]);
        y++;
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function checkSample() {
    console.log("checkSample", checkedSample);
    if (checkedSample === false) {
      setCheckedSample(true);
      console.log("testSample", checkedSample);
    }
    if (checkedSample === true) {
      setCheckedSample(false);
      console.log("testSample", checkedSample);
    }
    console.log("listSampleFInsihCheck", listSample);
  }

  const debounceMountGetSeeMBList = useCallback(
    debounce(mountGetSeeMBList, 400)
  );

  async function mountGetSeeMBList() {
    try {
      const mountGetSeeMBList = await qr.getSeeMBList(listHeader.scan_id);
      const { data } = mountGetSeeMBList.data;
      setListSeeMB(data);
      setModalSeeMbList(true);
      console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  async function testLog() {
    console.log("seeMBList", listSeeMB);
    setModalSeeMbList(false);
  }

  async function detailScanningPackaging(item) {
    setFlag("P");
    setDetailBool(true);
    debounceMountGetScanningPackagingData(listHeader.scan_id, item.scan_mbid);
    setMbsizeDetail(item);
    console.log("scanid", listHeader.scan_id);
    console.log("itemMBID", item);
    console.log("listScanningPackaging", listScanningPackaging);
    console.log("product", product);
    console.log("productEdit", productEdit);
    console.log("Testing", testing);
    console.log("DetailBool-Detail", detailBool);
    console.log("detailBool", detailBool);
    console.log("listHeader.scan_mbsize", listHeader.scan_mbsize);
    setDisableTestBox1(true);
    console.log("detailBool", detailBool);
  }

  async function finishPackaging() {
    try {
      const mountUpdateUBID = await qr.updatePackingSelesai(listHeader.scan_id);
      const { data } = mountUpdateUBID.data;
      setModalPackingSelesai2(true);
      setSelectedProdDate("");
      setSelectedExpDate("");
    } catch (error) {
      console.log(error);
    }
  }

  async function unitBox1Test(e, item) {
    // if (item == 1) {
    let newIsOpen = [...isOpen];
    newIsOpen.splice(item, 1, !newIsOpen[item]);
    setIsOpen(newIsOpen);
    // setDisableTestBox1(true);
    setUnitBox1(e.target.value);
    // }
  }
  // ---------------------------------------------
  const [inputValue] = useState([]);
  // const [testingArr, setTestingArr] = useState([]);
  const tempArrUnitBox = testing;

  function handleInputUB(value, item, index) {
    var tempArr = [...testing];
    tempArr[index] = value.value;
    setTesting(tempArr);
    setTotalArr(tempArr);

    const id = value.getAttribute("id");

    console.log("testIndex", index);
    console.log("id", id);
    console.log("detail", detailBool);
    console.log("testValue", value.value);
    console.log("testtempArr", tempArr[index]);

    if (id === `item${index}` && detailBool !== true) {
      var input = tempArr[index];
      var input2 = testing[index];
      console.log("input", input);
      if (tempArr[19].length >= 50) {
        setModalValidationUBBoxFull(true);
        console.log("masukFull");
      }
      if (input.length >= 56 && testing[totalArr.length - 2] == "") {
        console.log("totalArr.length-1", totalArr.length - 1);
        console.log("totalArr19", totalArr[19]);
        console.log("masukFocus");
        unitBox1Ref[`item${index + 1}`].focus();
      }
      console.log("input.length", input.length);
    }
    console.log("testing", testing);
    console.log("testingTempArr", tempArr[index]);
    console.log("testItem", item);
  }

  useEffect(() => {
    if (flag === "D") {
      console.log("testingFinishArrNew", productTest);
    }
    console.log("testingArr2", testingArr2);
  }, [flag, productTest, testingArr2]);

  console.log(inputValue[0] !== "" ? "Disabled" : "Bisa Bawah");
  console.log(inputValue);

  function changeButton(item, index) {
    // if (called === true) {
    if (detailBool === true) {
      return (
        // <Box>
        <Grid item flex={1.5}>
          {isOpen[index] === false ? (
            <Button
              variant="contained"
              sx={{ float: "left", ml: 2, backgroundColor: "blue" }}
              // onClick={() => saveUnitBox1()}
              // disabled={disableUnitBox1}
              onClick={(e) => debounceMountEditUB(e, item, index)}
            >
              SAVE
            </Button>
          ) : (
            <Button
              variant="contained"
              sx={{ float: "left", ml: 2, backgroundColor: "blue" }}
              // onClick={() => editUnitBox1()}
              onClick={(e) => saveUB(e, item, index)}
            >
              Edit
            </Button>
          )}
        </Grid>
      );
    } else {
      return (
        // <Box>
        // <Collapse in={testing[index] !== "" ? true : false}>
        <Grid item flex={1.5}>
          <Collapse in={testing[index] !== "" ? true : false}>
            <Button
              id={`item${index}`}
              variant="contained"
              sx={{
                float: "left",
                ml: 2,
                backgroundColor: "error.main",
              }}
              onClick={(e) => deleteUnitBox1(index)}
              // disabled={inputValue[`item${index - 1}`].trim() === ""}
              // disabled={inputValue}
            >
              Delete
            </Button>
          </Collapse>
        </Grid>
        // </Collapse>
      );
    }
  }

  function saveUB(e, item, index) {
    let newIsOpen = [...isOpen];
    newIsOpen.splice(index, 1, !newIsOpen[index]);
    setIsOpen(newIsOpen);
    console.log("testOpenSave", isOpen);
    // setDisableTestBox1(false);
    // const id = e.target.getAttribute("id");
    // if (id === `item${index}` && detailBool === true) {
    //   disableTestBox1[`item${index}`] = false;
    // }
    console.log("testDisable", disableTestBox1[`item${index}`]);
  }

  const debounceMountEditUB = useCallback(debounce(mountEditUB, 400));

  async function mountEditUB(e, item, index) {
    let newIsOpen = [...isOpen];
    newIsOpen.splice(index, 1, !newIsOpen[index]);
    setIsOpen(newIsOpen);

    console.log("testOpenEdit", isOpen);
    console.log("disableBoolSave", detailBool);
    // setDisableTestBox1(true);
  }

  // FROM SCAN NEW BATCH1

  return (
    <>
      {flag === "D" ? (
        <Box sx={{ width: "100%", textAlign: "center" }}>
          <Grid
            container
            justifyContent={"space-between"}
            sx={{ margin: "1%" }}
          >
            <Grid container item xs={10} sx={{ mb: 2 }}>
              <Button
                variant="contained"
                // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                onClick={() => router.push(`/monitoring-process-scan`)}
              >
                <KeyboardBackspaceIcon />
              </Button>
            </Grid>
            <Grid container item xs={10}>
              {/* <Button
                    variant="contained"
                    // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                    onClick={() => router.push(`/approval`)}
                  >
                    <KeyboardBackspaceIcon />
                  </Button> */}
              <Typography
                variant="h5"
                sx={{
                  fontWeight: 600,
                  mt: 0.5,
                  textAlign: "left",
                  ml: 2,
                  mb: 3,
                }}
              >
                SCAN NEW BATCH
              </Typography>
            </Grid>
          </Grid>
          {/* ------------------------------------------------------------ */}

          <Grid container sx={{ ml: 6 }}>
            <Grid container>
              <Grid item>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 2,
                  }}
                >
                  Product
                </Typography>
              </Grid>

              <Grid item>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 11,
                  }}
                >
                  :
                </Typography>
              </Grid>

              <Grid>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    // mt: 1,
                    textAlign: "left",
                    ml: 5,
                  }}
                >
                  {listHeader.scan_proname}
                </Typography>
              </Grid>
            </Grid>

            <Grid container sx={{ mt: 1 }}>
              <Grid item>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 2,
                  }}
                >
                  Batch Number
                </Typography>
              </Grid>

              <Grid item>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 5,
                  }}
                >
                  :
                </Typography>
              </Grid>

              <Grid>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    // mt: 1,
                    textAlign: "left",
                    ml: 5,
                  }}
                >
                  {listHeader.scan_batch}
                </Typography>
              </Grid>
            </Grid>

            <Collapse in={collapseDetailScanNewBatch}>
              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    MB Size
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 11,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {listHeader.scan_mbsize} {"UB"}
                  </Typography>
                </Grid>
              </Grid>

              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    NIE
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 15,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5.3,
                    }}
                  >
                    {listHeader.scan_nie}
                  </Typography>
                </Grid>
              </Grid>

              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    Production Date
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 3.3,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {formatDate(listHeader.scan_proddate, "DD MMM YYYY")}
                  </Typography>
                </Grid>
              </Grid>

              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    Expired Date
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 6.5,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {formatDate(listHeader.scan_expdate, "DD MMM YYYY")}
                  </Typography>
                </Grid>
              </Grid>
            </Collapse>
            <Divider width="93%" objectFit="contain" sx={{ mt: 4 }} />
            <Divider width="93%" objectFit="contain" />
          </Grid>

          {/* ------------------------------------------------------------ */}
          {/* <Paper fullWidth fullHeight> */}
          <Grid sx={{ backgroundColor: "white" }}>
            {/* <Paper
                // width="100%" height="100%" objectFit="contain"
                > */}
            <Collapse in={collapseDetailScanNewBatchButtonUp}>
              <Grid sx={{ textAlign: "right", mr: 3 }}>
                {/* <Typography>adasfagdsv</Typography> */}
                <Button
                  // color="error"
                  variant="outlined"
                  onClick={() => hideDetailScanNewBatch()}
                  // fullWidth
                  startIcon={<ArrowDropUpIcon />}
                  sx={{ backgroundColor: "#f0f0f0", textAlign: "center" }}
                  size="small"
                >
                  {/* Keluar */}
                </Button>
              </Grid>
            </Collapse>
            <Collapse in={collapseDetailScanNewBatchButtonDown}>
              <Grid sx={{ textAlign: "right", mr: 3 }}>
                {/* <Typography>adasfagdsv</Typography> */}
                <Button
                  // color="error"
                  variant="outlined"
                  onClick={() => showDetailScanNewBatch()}
                  // fullWidth
                  startIcon={<ArrowDropDownIcon />}
                  sx={{ backgroundColor: "#f0f0f0", textAlign: "center" }}
                >
                  {/* Keluar */}
                </Button>
              </Grid>
            </Collapse>
            {/* </Paper> */}
            {/* </Grid> */}
            <Grid>
              <Typography
                sx={{ fontWeight: 600, textAlign: "left", ml: 5, mt: 1 }}
              >
                List Of Master Box
                <Divider sx={{ width: "95%" }} />
                <Divider sx={{ width: "95%" }} />
              </Typography>
            </Grid>
            <Table sx={{ ml: 5 }}>
              <TableBody>
                {/* {listMasterBox &&
                      listMasterBox.map((item, index) => ( */}
                {listMasterBox &&
                  listMasterBox.map((item, index) => (
                    <TableRow key={item}>
                      <TableCell>
                        {/* <Link
                          href={`/general-ledger/${item.tahun}/${item.bulan}/${item.coa_id}`}
                        > */}
                        {/* {item.scan_mbid} - {item.scan_ubid} {"UB"} */}
                        {item.scan_mbid} - {item.cnt} {"UB"}
                        {/* </Link> */}
                      </TableCell>
                      <TableCell>
                        <Button
                          variant="contained"
                          sx={{
                            float: "right",
                            marginBottom: 2,
                            mr: 13,
                            mt: 2,
                            color: "black",
                            backgroundColor: "white",
                            // bo
                          }}
                          // onClick={() => packingFinish()}
                          onClick={() => detailScanningPackaging(item)}
                        >
                          Detail
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
            <Grid
              container
              // sx={{ float: "right", width: "15%" }}
              // sx={{ width: "100%" }}
            >
              <Grid container>
                {/* <Collapse
                  in={collapseAddButton}
                  sx={{ float: "right", width: "100%" }}
                > */}
                <Grid item sx={{ float: "right", width: "100%" }}>
                  <Collapse
                    in={collapsePackagingSelesaiButton}
                    sx={{ float: "right", width: "100%" }}
                  >
                    <Button
                      // color="error"
                      // variant="outlined"

                      // fullWidth
                      // startIcon={<AddCircle />}
                      // sx={{ backgroundColor: "#f0f0f0" }}
                      // sx={{}}
                      onClick={() => packaging()}
                      sx={{ float: "right", width: "15%" }}
                    >
                      <AddCircle sx={{ fontSize: 35, color: "teal" }} />
                    </Button>
                  </Collapse>
                </Grid>

                <Grid item sx={{ float: "right", width: "100%" }}>
                  <Collapse in={collapsePackagingSelesaiButton}>
                    <Button
                      variant="contained"
                      sx={{ float: "right", marginBottom: 2, mr: 13, mt: 2 }}
                      onClick={() => packingFinish()}
                    >
                      Packaging Selesai
                    </Button>
                  </Collapse>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
          {/* </Paper> */}
          <Modal open={modalPackingSelesai}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Watch out!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Are you sure to finish packing process?
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "27em",
                    }}
                    onClick={() => finishPackaging()}
                  >
                    YES
                  </Button>

                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                    onClick={() => setModalPackingSelesai(false)}
                  >
                    NO
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
          <Modal open={modalPackingSelesai2}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Congrats!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  {/* Data QR Batch AAAA-123456-01 successfully saved. */}
                  Data QR Batch {""}
                  {listHeader.scan_batch}
                  {""} successfully saved.
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => packingFinishModal()}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
        </Box>
      ) : flag === "P" ? (
        <Box sx={{ width: "100%", textAlign: "center" }}>
          <Grid
            container
            justifyContent={"space-between"}
            sx={{ margin: "1%", mb: 2 }}
          >
            <Grid container item xs={10}>
              <Typography
                variant="h5"
                sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
              >
                SCANNING PACKAGING
              </Typography>
            </Grid>
          </Grid>

          <Divider
            width="91%"
            objectFit="contain"
            sx={{ mt: 4, float: "center", ml: 8 }}
          />
          <Divider
            width="91%"
            objectFit="contain"
            sx={{ float: "center", ml: 8 }}
          />

          <Grid sx={{ ml: 6, mt: 5 }} container>
            {/* <Paper> */}
            <Grid item flex={1}>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 2,
                }}
              >
                Master Code Box
              </Typography>
            </Grid>
            <Grid item flex={0.2}>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 2,
                  mt: 1,
                }}
              >
                :
              </Typography>
            </Grid>
            <Grid item flex={5}>
              <TextField
                sx={{ float: "left" }}
                fullWidth
                size="small"
                onChange={(e) => setMasterCodeBox(e.target.value)}
                value={
                  detailBool !== true
                    ? masterCodeBox
                    : // 0
                      // scanData &&
                      // scanData[0].scan_mbid
                      MBBox
                }
                disabled={detailBool === true ? true : masterBoxDisable}

                // onKeyDown={handleKeyDownUnitBox1}
                // disabled
              ></TextField>
            </Grid>
            <Grid item flex={2}>
              <Button
                // color="error"
                variant="outlined"
                onClick={() => debounceMountGetSeeMBList()}
                // fullWidth
                // startIcon={<LogoutIcon />}
                sx={{ float: "center" }}
                size="medium"
              >
                See MB List
              </Button>
            </Grid>
          </Grid>
          <Divider
            width="91%"
            objectFit="contain"
            sx={{ mt: 4, float: "center", ml: 8 }}
          />
          <Divider
            width="91%"
            objectFit="contain"
            sx={{ float: "center", ml: 8 }}
          />

          {/* {testing.map((item, index) => ( */}

          <Grid sx={{ ml: 8, mt: 2 }} container>
            {testing.map((item, index) => (
              <Grid key={index} sx={{ mt: 2 }} container>
                <Grid item flex={1}>
                  {/* <Typography>{item.name}</Typography> */}
                  <Typography
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                      mt: 1,
                    }}
                  >
                    Unit Box Code {index + 1}
                  </Typography>
                </Grid>
                <Grid item flex={0.2}>
                  <Typography
                    sx={{
                      fontWeight: 600,
                      textAlign: "left",
                      ml: 2,
                      mt: 1,
                    }}
                  >
                    :
                  </Typography>
                </Grid>
                <Grid item flex={3.5}>
                  <TextField
                    id={`item${index}`}
                    //{detailBool !== true ? testing[item] : item}
                    value={testing[index]}
                    onChange={(e) => handleInputUB(e.target, item, index)}
                    // inputRef={(el) => (unitBox1Ref = el)}
                    inputRef={(el) => (unitBox1Ref[`item${index}`] = el)}
                    // disabled={(index) => disableTestBox1[`item${index}`]}
                    // disabled={!disableTestBox1.some(({}))}
                    // disabled
                    // disabled={disableTestBox1}
                    // sx={{ ml: 2 }}
                    sx={{ float: "left", width: "100%" }}
                    size="small"
                    // disabled={index > 0 && inputValue[`item${index - 1}`].trim() === ""}
                    // disabled={testing[index] !== "" ? false : true}
                    // disabled={
                    //   testing[0] !== "" && testing[index] === "" ? true : false
                    // }
                    s
                    // disabled={disableTestBox1[`item${index}`]}
                    disabled={
                      // detailBool !== true
                      //   ? false
                      //   : isOpen[index] === false
                      //   ? false
                      //   : true
                      // detailBool !== true
                      //  && testing[index-1] === ""
                      // && testing[index].length <= 56
                      // ? true :
                      detailBool !== true &&
                      masterCodeBox === "" &&
                      masterCodeBox.length != 58
                        ? true
                        : detailBool === true && isOpen[index] == false
                        ? false
                        : detailBool === true && isOpen[index] == true
                        ? true
                        : false
                    }
                  ></TextField>
                </Grid>

                {changeButton(item, index)}
              </Grid>
            ))}
          </Grid>

          <Grid sx={{ marginTop: 2, mr: 7 }}>
            {/* <FormGroup> */}
            <FormControlLabel
              control={
                <Checkbox
                  checked={checkedSample}
                  onClick={() => checkSample()}
                />
              }
              label="Retained Sample"
              sx={{ float: "left", ml: 8 }}
            />
            {/* <FormControlLabel
                  disabled
                  control={<Checkbox />}
                  label="Disabled"
                /> */}
            {/* </FormGroup> */}
            <Button
              variant="contained"
              sx={{ float: "right", marginBottom: 2, ml: 2 }}
              onClick={() => finishScanningPackaging()}
            >
              Finish
            </Button>
            <Button
              variant="contained"
              sx={{ float: "right", marginBottom: 2 }}
              onClick={() => saveAndContinueButton()}
              disabled={detailBool === true ? true : false}
            >
              Save & Continue
            </Button>
          </Grid>

          {/* <G */}
          <Modal open={modalScanningPackagingNotFull}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Data of unit box code is incomplete. Are you sure to proceed?
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
                    onClick={() => saveAndContinueFinish()}
                  >
                    YES
                  </Button>

                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                    onClick={() => setModalScanningPackagingNotFull(false)}
                  >
                    NO
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalScanningPackagingNotFullFinish}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Data of unit box code is incomplete. Are you sure to proceed?
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
                    onClick={() => saveAndContinueFinish() && setFlag("D")}
                  >
                    YES
                  </Button>

                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                    onClick={() =>
                      setModalScanningPackagingNotFullFinish(false)
                    }
                  >
                    NO
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalValidationSaveAndFinish}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Scan QR on master box ﬁrst!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationSaveAndFinish(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal
            open={modalValidatonUnitBox10}
            inputRef={(el) => (unitBox11Ref = el)}
          >
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Error
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidatonUnitBox10(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalSeeMbList}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  {/* Heads Up! */}
                  Master Box Code ={" "}
                  {listSeeMB.scan_id !== ""
                    ? ("", listSeeMB.scan_mbid)
                    : "Empty"}
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  {/* Error */}
                  This Master Box is{" "}
                  {listSeeMB.scan_sampleyn === "Y"
                    ? "retained sample"
                    : listSeeMB.scan_sampleyn === "N"
                    ? "not retained sample"
                    : "Empty"}
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    // onClick={() => setModalSeeMbList(false)}
                    onClick={() => testLog(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalValidationFullUB}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  UB Box Full!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationFullUB(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalValidationMBCode}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Master Box Code must be 58 characters, please try again!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationMBCode(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>

          <Modal open={modalValidationUBCode}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Unit Box Code must be 57 characters, please try again!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationUBCode(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
          <Modal open={modalValidationUBBoxFull}>
            <Box sx={style}>
              <Grid>
                <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  variant="h5"
                  sx={{ fontWeight: 600, mb: 1 }}
                >
                  Heads Up!
                </Typography>
                <Typography
                // sx={{ textAlign: "center", fontWeight: "bold" }}
                >
                  Unit Box Code has reached full!
                </Typography>
                <Divider sx={{ my: 2 }}></Divider>
                <Grid>
                  {/* <Divider sx={{ my: 2 }}></Divider> */}
                  <Button
                    variant="contained"
                    sx={{
                      backgroundColor: "primary.main",
                      marginLeft: "33em",
                    }}
                    onClick={() => setModalValidationUBBoxFull(false)}
                  >
                    OK
                  </Button>
                </Grid>
              </Grid>
            </Box>
          </Modal>
        </Box>
      ) : (
        <Box sx={{ width: "50%", textAlign: "center" }}>
          <Grid
            container
            justifyContent={"space-between"}
            sx={{ margin: "1%" }}
          >
            <Grid container item xs={10}>
              <Typography
                variant="h5"
                sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
              >
                SCAN NEW BATCH
              </Typography>
            </Grid>
          </Grid>
        </Box>
      )}
    </>
  );
};

export default ScanNewBatch;

monitoring-manager -> index.js

import {
  Box,
  Paper,
  Table,
  TableHead,
  FormControl,
  InputLabel,
  Select,
  Grid,
  Button,
  TextField,
  TableRow,
  TableCell,
  Typography,
  Modal,
  Divider,
  TableBody,
  TableFooter,
  MenuItem,
  Collapse,
  Fade,
  Grow,
  Zoom,
  Slide,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Autocomplete,
} from "@mui/material";
import * as React from "react";
import { useCallback, useEffect, useRef, useState } from "react";
import qr from "../../services/qr";
import { debounce, set, isUndefined } from "lodash";
import LogoutIcon from "@mui/icons-material/Logout";
import { AddCircle, CheckBox } from "@mui/icons-material";
import ClearIcon from "@mui/icons-material/Clear";
import BackspaceIcon from "@mui/icons-material/Backspace";
import RefreshIcon from "@mui/icons-material/Refresh";
import InfoIcon from '@mui/icons-material/Info';
import ArrowDropUpIcon from "@mui/icons-material/ArrowDropUp";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import { formatDate } from "../../utils/text";
import { fontWeight } from "@mui/system";
import { useRouter } from "next/router";
import { getStorage } from "../../utils/storage";

const ScanNewBatch = () => {
  const styleModalErr = {
    position: "absolute",
    top: "30%",
    left: "60%",
    transform: "translate(-50%, -50%)",
    width: "35%",
    bgcolor: "background.paper",
    p: 4,
  };

  const styleModalStart = {
    position: "absolute",
    top: "30%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: "35%",
    bgcolor: "background.paper",
    p: 4,
  };

  const [selectProduct, setSelectProduct] = useState("");
  const [selectBatchNumber, setSelectBatchNumber] = useState("");
  const [modalScanBatch, setModalScanBatch] = useState(false);

  const [listMonitor, setListMonitor] = useState([]);
  const [listProduct, setListProduct] = useState([]);

  const [searchMonitorByDate, setSearchMonitorByDate] = useState("");

  const [filterByDateBool, setFilterByDateBool] = useState(false);

  const [dataScanStatus, setDataScanStatus] = useState([]);

  const [totalOnProcess, setTotalOnProcess] = useState("");
  const [totalDone, setTotalDone] = useState("");
  const [totalReject, setTotalReject] = useState("");
  const [totalUploaded, setTotalUploaded] = useState("");

  const [filterStatus, setFilterStatus] = useState("");
  const [filterDate, setFilterDate] = useState("");
  const [filterRefresh, setFilterRefresh] = useState("");

  const [collapseDate, setCollapseDate] = useState(false);
  const [collapseRefresh, setCollapseRefresh] = useState(false);
  const [collapseAllData, setCollapseAllData] = useState(true);
  const [collapseEmpty, setCollapseEmpty] = useState(false);
  const [collapseDefault, setCollapseDefault] = useState(true);

  
  const debounceMountGetFilter = useCallback(debounce(mountGetFilter, 400));

  const accessList = getStorage("access_list");

  useEffect(() => {
    if (!isUndefined(accessList)) {
      var parsedAccess = JSON.parse(accessList);
      if (
        !parsedAccess["QR_BPOM_MONITORING_MANAGER"].includes(
          "QR_BPOM_MONITORING_MANAGER_CREATE"
        )
      ) {
        router.push("/403");
      }
    } else {
      router.push("/403");
    }
  }, [accessList]);

  async function mountGetFilter(procode, status, submitdate) {
    // console.log("procode", procode);
    // console.log("status", status);
    // console.log("date", submitdate);
    var date = formatDate(submitdate, "YYMMDD");
    // console.log("datebaru", date);
    try {
      const getFilter = await qr.getFilterHeader(procode, status, date);
      const { data } = getFilter.data;

      setListMonitor(data);
      setTotalOnProcess(data[0].onp);
      setTotalDone(data[0].dn);
      setTotalReject(data[0].rjt);
      setTotalUploaded(data[0].upd);
      console.log("list =>", data);
      setCollapseEmpty(false);
      if (getFilter.data.length < 0){
        setCollapseEmpty(true);
      }
    } catch (error) {
      console.log("error getfilter",error);
      setCollapseEmpty(true);
    }
  }

  // useEffect (() => {
  //   if (filterDate != "") {
  //     debounceMountGetFilter("","",filterDate)
  //   }
  // },[filterDate])

  const [inputSearch, setInputSearch] = useState({
    pro_name: "",
    pro_code: "",
  });

  const router = useRouter();

  // const [status, setStatus] = useState("");

  var myObject = {
    key: "something",
    "other-key": "something else",
    "another-key": "another thing",
  };
  var count = Object.keys(myObject).length;

  async function start() {
    if (
      (selectProduct === 0) &
      (selectProduct === 0) &
      (selectBatchNumber === "") &
      (selectBatchNumber === 0)
    ) {
      setModalScanBatch(true);
    }
  }

  const tableHeader = [
    {
      name: "Procode",
    },
    {
      name: "Product Name",
    },
    {
      name: "Batch Number",
    },
    {
      name: "Status",
    },
    {
      name: "Submitted On",
    },
  ];

  // const listMonitor = [
  //   {
  //     scan_procode: 1,
  //     scan_proname: "Panadol Merah",
  //     scan_batch: "X3",
  //     scan_status: "O",
  //     scan_submitteddate: "2023-02-17 00:00:00",
  //   },
  //   {
  //     scan_procode: 1,
  //     scan_proname: "Panadol Merah",
  //     scan_batch: "X3",
  //     scan_status: "O",
  //     scan_submitteddate: "2023-02-17 00:00:00",
  //   },
  //   {
  //     scan_procode: 1,
  //     scan_proname: "Panadol Merah",
  //     scan_batch: "X3",
  //     scan_status: "O",
  //     scan_submitteddate: "2023-02-17 00:00:00",
  //   },
  //   {
  //     scan_procode: 1,
  //     scan_proname: "Panadol Merah",
  //     scan_batch: "X3",
  //     scan_status: "O",
  //     scan_submitteddate: "2023-02-17 00:00:00",
  //   },
  //   {
  //     scan_procode: 1,
  //     scan_proname: "Panadol Merah",
  //     scan_batch: "X3",
  //     scan_status: "O",
  //     scan_submitteddate: "2023-02-17 00:00:00",
  //   },
  // ];

  const debounceMountGetListBatchToMonitor = useCallback(
    debounce(mountGetListBatchToMonitor, 400)
  );

  async function mountGetListBatchToMonitor() {
    try {
      var i;
      const getBatchToMonitor = await qr.getListBatchToMonitor();
      const { data } = getBatchToMonitor.data;
      // const countData = Object.keys(data).length;
      // console.log("lengthjsonData", countData);
      // console.log("datamountGetListBatchToMonitor", data);
      // console.log("datamountGetListBatchToMonitorStatus", data.scan_status);
      // console.log("callDataStatus", data[0].scan_status);
      // for (i = 0; i <= countData; i++) {
      //   dataScanStatus = data[i].scan_procode;
      //   console.log("dataFor", i);
      // }
      // setListMonitor(data);
      setTotalOnProcess(data[0].onp);
      setTotalDone(data[0].dn);
      setTotalReject(data[0].rjt);
      setTotalUploaded(data[0].upd);
      console.log("ListBatchToMonitor",getBatchToMonitor);
    } catch (error) {
      console.log(error);
    }
  }

  // useEffect(() => {
  //   console.log(listMonitor.length);
  // }, [listMonitor]);

  const debounceMountGetListAllProduct = useCallback(
    debounce(mountGetListAllProduct, 400)
  );

  async function mountGetListAllProduct() {
    try {
      const getListProduct = await qr.getListAllProduct();
      // const getListProduct = await qr.getListBatchToMonitor();

      const { data } = getListProduct.data;
      setListProduct(data);
      // setListApproval(data);
      console.log("data getlistAllProduct", data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetBatchMonitorByProcode = useCallback(
    debounce(mountGetBatchMonitorByProcode, 400)
  );

  async function mountGetBatchMonitorByProcode(procode) {
    try {
      const getBatchToReview = await qr.getBatchMonitorByProcode(procode);
      const { data } = getBatchToReview.data;
      setListMonitor(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetBatchMonitorByDate = useCallback(
    debounce(mountGetBatchMonitorByDate, 400)
  );

  async function mountGetBatchMonitorByDate(date) {
    try {
      const getBatchToReview = await qr.getBatchMonitorByDate(date);
      const { data } = getBatchToReview.data;
      setListMonitor(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetBatchMonitorByStatus = useCallback(
    debounce(mountGetBatchMonitorByStatus, 400)
  );

  async function mountGetBatchMonitorByStatus(statusscan) {
    try {
      const getBatchToReview = await qr.getBatchMonitorByStatus(statusscan);
      const { data } = getBatchToReview.data;
      setListMonitor(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountCollapseDate = useCallback(
    debounce(mountCollapseDate, 400)
  );

  async function mountCollapseDate() {
    // CollapseDate(true);
  }

  async function deleteDate() {
    // setFilterDate("cek2")
    setCollapseDate(false);
  }

  async function deleteRefresh() {
    // setFilterRefresh("cek3")
    setCollapseRefresh(false);
    setCollapseAllData(true);
    setCollapseEmpty(false);
    setFilterRefresh(null);
    setFilterDate(null); 
    setFilterStatus(""); 
    setListMonitor([]);
    // setInputSearch(inputSearch.pro_code==="", inputSearch.pro_name===""); 
    setInputSearch({
      ...inputSearch,
      pro_code: "",
      pro_name: ""
    });
    deleteDate();
  }

  async function getAllBatch() {
    debounceMountGetFilter("", "", ""); 

    setInputSearch({
      ...inputSearch,
      pro_code: "",
      pro_name: ""
    });
    setFilterStatus("");
    setFilterDate(null); 
    deleteDate();

    setCollapseRefresh(true);
    setCollapseAllData(false);
  }


  // Sekali panggil
  useEffect(() => {
    debounceMountGetListBatchToMonitor();
    debounceMountGetListAllProduct();
    console.log("[X|>>>>>|] UseEffect Parent [|<<<<<<|X]");
  },[])


  useEffect(() => {
    console.log(" **************************** UseEffect **************************** ");
    // debounceMountGetFilter(inputSearch.pro_code, filterStatus, filterDate);

    if (inputSearch.pro_code !==""||inputSearch.pro_name !=="" || filterStatus !=="" ||  (filterDate !=="" && filterDate !== null)){
      console.log("| ceking IF ==> Filter terisi");
      debounceMountGetFilter(inputSearch.pro_code, filterStatus, filterDate);
      setCollapseAllData(true);
      // if (){

      // }
    } else if (inputSearch.pro_code ===""&&inputSearch.pro_name ===""&&filterStatus ==="" && (filterDate !=="" || filterDate !== null) && (collapseAllData === true || collapseRefresh ===false)){
      console.log("| ceking IF ==> Filter kosong");
      setListMonitor([]);
      setCollapseRefresh(false);
      setCollapseEmpty(false);
      setCollapseAllData(true);
      if (collapseAllData === true) {
      setCollapseRefresh(false);
      
      console.log("| ceking IF ==> Default");
      }
    } else if (collapseAllData === false){
      console.log("| ceking IF ==> Get ALLData ");
    }
    // else {
    //   console.log("| ceking IF ==> Kosong 2");
    //   setListMonitor([]);
    //   setCollapseRefresh(false);
    //   setCollapseAllData(true);
    // }

    
    
    // setCollapseRefresh(false)

    var date = formatDate(filterDate, "YYMMDD");
    if (inputSearch.pro_code !== "" || filterStatus !== "" || date !== "") {
      setCollapseRefresh(true);
    }

    
    console.log("| inputSearch.pro-code +>", inputSearch.pro_code);
    console.log("| inputSearch.pro-name +>", inputSearch.pro_name);
    console.log("| filterStatus +>", filterStatus);
    console.log("| filterDate +>", filterDate);
    console.log("| date +>", date);
    console.log("| collapse Date", collapseDate);
    console.log("| collapse Refresh", collapseRefresh);
    console.log("| listMonitor ", listMonitor);
    console.log(" ******************************************************** ");
  }, [inputSearch.pro_code, inputSearch.pro_name, filterStatus, filterDate, collapseDate, collapseRefresh]);




  const listStatus = [
    { value: "", label: "None" },
    { value: "O", label: "O" },
    { value: "D", label: "D" },
    { value: "R", label: "R" },
    { value: "U", label: "U" },
  ];

  const debounceMountGenerateCSVBpom = useCallback(
    debounce(mountGenerateCSVBpom, 400)
  );

  async function mountGenerateCSVBpom(scanid) {
    try {
      var i;
      const generateCSVBPOM = await qr.generateCSVBPOM(scanid);
      // const { data } = generateCSVBPOM.data;
      // const countData = Object.keys(data).length;
      // console.log("lengthjsonData", countData);
      // console.log("datamountGetListBatchToMonitor", data);
      // console.log("datamountGetListBatchToMonitorStatus", data.scan_status);
      // console.log("callDataStatus", data[0].scan_status);
      // for (i = 0; i <= countData; i++) {
      //   dataScanStatus = data[i].scan_procode;
      //   console.log("dataFor", i);
      // }
      // setListMonitor(data);
      // setTotalOnProcess(data[0].onp);
      // setTotalDone(data[0].dn);
      // setTotalReject(data[0].rjt);
      // setTotalUploaded(data[0].upd);
      // console.log(getBatchToMonitor);
    } catch (error) {
      console.log(error);
    }
  }

  async function detailMonitoring(item) {
    // router.push(`/monitoring-process-scan/${item.scan_id}`);
    router.push(`/monitoring-manager/${item.scan_id}`);
  }

  // function searchByProCode(value) {
  //   if (value !== null) {
  //     // debounceMountGetBatchMonitorByProcode(value.pro_code);
  //     debounceMountGetFilter(value.pro_code);
  //   } else {
  //     debounceMountGetListBatchToMonitor();
  //   }
  // }

  // function searchAllType(s_code,s_status,s_date){
  //   if (s_code !== null && s_status !== null && s_date !== null){
  //     debounceMountGetBatchMonitorByProcode()
  //     debounceMountGetBatchMonitorByDate()
  //     deboun
  //   }
  // }

  // useEffect(() => {
  //   console.log("inputSearch name => ", inputSearch.pro_name);
  //   console.log("inputSearch code => ", inputSearch.pro_code);
  //   console.log("filterStatus =>", filterStatus);
  //   console.log("filterDate => ", filterDate);
  //   // console.log("label", filterLabel);
  // }, [inputSearch.pro_name, inputSearch.pro_code, filterStatus, filterDate]);

  return (
    <Box sx={{ width: "100%", textAlign: "center" }}>
      <Grid container justifyContent={"space-between"} sx={{ margin: "1%" }}>
        <Grid container item xs={10}>
          <Typography
            variant="h5"
            sx={{
              fontWeight: 600,
              mt: 0.5,
              textAlign: "left",
              ml: 2,
              mb: 1,
            }}
          >
            Monitoring Manager
          </Typography>
        </Grid>
      </Grid>
      {/* ------------------------------------------------------------ */}

      <Grid container sx={{ mb: 5 }}>
        <Grid
          container
          justifyContent={"space-between"}
          spacing={2}
          sx={{ marginBottom: "1%" }}
        >
          <Grid item flex={2} sx={{ ml: 3 }}>
            <Typography
              // variant="h5"
              sx={{
                fontWeight: 600,
                // mt: 3,
                textAlign: "left",
                // ml: 2,
              }}
            >
              On Process
            </Typography>
            <TextField
              InputProps={{
                sx: {
                  "& input": {
                    textAlign: "center",
                  },
                  fontSize: {
                    lg: 30,
                    md: 20,
                    sm: 20,
                    xs: 10,
                  },
                  fontWeight: 700,
                },
              }}
              sx={{
                width: "100%",
                // maxWidth: "30px",
                // maxHeight: "30px",
                // minWidth: "30px",
                // minHeight: "30px",
                float: "center",
                fontWeight: 700,
              }}
              disabled
              value={totalOnProcess !== "" ? totalOnProcess : "-"}
              // size=""
            ></TextField>
          </Grid>
          <Grid item flex={2}>
            <Typography
              // variant="h5"
              sx={{
                fontWeight: 600,
                // mt: 3,
                textAlign: "left",
                // ml: 3,
              }}
            >
              Saved
            </Typography>
            <TextField
              // size="large"
              InputProps={{
                sx: {
                  "& input": {
                    textAlign: "center",
                  },
                  fontSize: {
                    lg: 30,
                    md: 20,
                    sm: 20,
                    xs: 10,
                  },
                  fontWeight: 700,
                },
              }}
              // placeholder={totalReject !== "" ? totalReject : "-"}
              sx={{ width: "100%", fontWeight: 600 }}
              disabled
              value={totalReject !== "" ? totalReject : "-"}
              // label={totalReject !== "" ? totalReject : "-"}
            >
              {/* {totalReject !== "" ? totalReject : "-"} */}
            </TextField>
          </Grid>
          <Grid item flex={2}>
            <Typography
              // variant="h5"
              sx={{
                fontWeight: 600,
                // mt: 3,
                textAlign: "left",
                // ml: 2,
              }}
            >
              Submitted
            </Typography>
            <TextField
              InputProps={{
                sx: {
                  "& input": {
                    textAlign: "center",
                  },
                  fontSize: {
                    lg: 30,
                    md: 20,
                    sm: 20,
                    xs: 10,
                  },
                  fontWeight: 700,
                },
              }}
              sx={{ width: "100%" }}
              disabled
              value={totalDone !== "" ? totalDone : "-"}
            ></TextField>
          </Grid>
          <Grid item flex={2} sx={{ mr: 2 }}>
            <Typography
              // variant="h5"
              sx={{
                fontWeight: 600,
                // mt: 3,
                textAlign: "left",
                // ml: 3,
              }}
            >
              Uploaded
            </Typography>
            <TextField
              InputProps={{
                sx: {
                  "& input": {
                    textAlign: "center",
                  },
                  fontSize: {
                    lg: 30,
                    md: 20,
                    sm: 20,
                    xs: 10,
                  },
                  fontWeight: 700,
                },
              }}
              sx={{ width: "100%", height: "100%" }}
              disabled
              value={totalUploaded !== "" ? totalUploaded : "-"}
            ></TextField>
          </Grid>
        </Grid>

        <Grid container sx={{ mt: 1 }}>
          <Grid item flex={2}>
            <Autocomplete
              options={listProduct}
              sx={{ backgroundColor: "white", ml: 3, mt: 5, width: "100%" }}
              getOptionLabel={(option) =>
                `${option.pro_name} - ${option.pro_code}`
              }
              isOptionEqualToValue={(option, value) => {
                option.pro_code === value.pro_code;
                option.pro_name === value.pro_name;
              }}
              renderInput={(params) => (
                <TextField
                  {...params}
                  size="small"
                  label="Filter by Product..."
                />
              )}
              onChange={(event, newValue) => {
                setInputSearch({
                  ...inputSearch,
                  pro_code: newValue === null ? "" : newValue.pro_code,
                  pro_name: newValue === null ? "" : newValue.pro_name,
                })
              }}
              value={inputSearch.pro_name === "" ? null : inputSearch}
            />
          </Grid>

          <Grid item flex={2}>
            <FormControl fullWidth sx={{ ml: 5, mt: 5, width: "100%" }}>
              <InputLabel>Filter by Status</InputLabel>
              <Select
                label="Filter by Status"
                size="small"
                value={filterStatus}
              >
                {listStatus &&
                  listStatus.map((item) => (
                    <MenuItem
                      onClick={() => {setFilterStatus(item.value) 
                        // ,setCollapseRefresh(true)
                      }}
                      key={item}
                      value={item.value}
                    >
                      {item.label}
                    </MenuItem>
                  ))}
              </Select>
            </FormControl>
          </Grid>

          <Grid item flex={2}>
            <FormControl fullWidth sx={{ ml: 7, mt: 5, width: "100%" }}>
              {/* <InputLabel id="bulan-label">Filter by Date</InputLabel> */}

              <DesktopDatePicker
                label="Filter by Date"
                // value={searchMonitorByDate}
                value={filterDate}
                onChange={(newValue) => {
                  newValue !== null || newValue === ""
                    ? (setFilterDate(newValue), setCollapseDate(true))
                    : (setFilterDate(newValue), setCollapseDate(false));
                }}
                // onClick={() => {
                //   // debounceMountGetReviewBatchByDate(newValue);
                //   // approvalSearchByDate(newValue);
                //   // );
                // }}
                renderInput={(params) => (
                  <TextField
                    // layout="responsive"
                    size="small"
                    {...params}
                    sx={{
                      background: "white",
                      // mr: 1,
                      // width: "14vw",
                    }}
                  />
                )}
              />
            </FormControl>
          </Grid>

          <Collapse in={collapseDate}>
            <Grid item flex={2}>
              <FormControl
                fullWidth
                sx={{
                  ml: -3,
                  mt: 5.6,
                  width: "2%",
                  height: "2%",
                  // border: "2px solid green",
                }}
              >
                <Button
                  fullWidth
                  onClick={() => {
                    setFilterDate(null), deleteDate();
                  }}
                  sx={{
                    // border: "1px solid blue",

                    width: 1,
                    height: "1%",
                    borderRadius: 100,

                    maxWidth: "30px",
                    maxHeight: "30px",
                    minWidth: "30px",
                    minHeight: "30px",
                  }}
                >
                  <BackspaceIcon
                    sx={{ fontSize: 20, color: "grey" }}
                    size="small"
                  />
                </Button>
              </FormControl>
            </Grid>
          </Collapse>

          <Grow direction="down" in={collapseRefresh}>
            <Grid item flex={2}>
              <FormControl
                fullWidth
                sx={{
                  ml: 6,
                  mt: 5.6,
                  width: "2%",
                  height: "2%",
                  // border: "2px solid green",
                }}
              >
                <Button
                  variant="contained"
                  fullWidth
                  onClick={() => {
                   deleteRefresh();
                  }}
                  sx={{
                    // border: "1px solid blue",

                    width: 1,
                    height: "1%",
                    backgroundColor: "darkred",
                    // borderRadius: "100%",

                    maxWidth: "90px",
                    maxHeight: "30px",
                    minWidth: "90px",
                    minHeight: "30px",

                  }}
                >
                  CLEAR 
                  {/* <ClearIcon
                    sx={{
                      fontSize: 27,
                      color: "white",
                      backgroundColor: "red",
                      borderRadius: "100%",
                    }}
                    size="small"
                  /> */}
                </Button>
              </FormControl>
            </Grid>
          </Grow>


          <Grow in={collapseAllData}>
            <Grid item flex={1}>
              <FormControl
                fullWidth
                sx={{
                  ml: 6,
                  mt: 5.6,
                  width: "2%",
                  height: "2%",
                  // border: "2px solid green",
                }}
              >
                <Button
                variant="contained"
                size="large"
                  fullWidth
                  onClick={() => {
                  //  deleteRefresh();
                  getAllBatch();
                  }}
                  sx={{
                    // border: "1px solid blue",
                    // borderRadius: "90%",

                    minWidth: "150px",
                    // maxHeight: "30px",
                    // minWidth: "30px",
                    minHeight: "30px",
                    backgroundColor: "teal",
                  }}
                >
                  ALL DATA
                </Button>
              </FormControl>
            </Grid>
          </Grow>

          <Grid item flex={2}>
            {/* <Select
                label="Filter by Product"
                sx={{ ml: 3, mt: 5, width: "100%" }}
              ></Select> */}
          </Grid>
        </Grid>

        {/* <Grid container sx={{ mt: 1 }}>
            <Grid item>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 2,
                }}
              >
                NIE
              </Typography>
            </Grid>
  
            <Grid item>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 15.4,
                }}
              >
                :
              </Typography>
            </Grid>
  
            <Grid>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  // mt: 1,
                  textAlign: "left",
                  ml: 5,
                }}
              ></Typography>
            </Grid>
          </Grid>
  
          <Grid container sx={{ mt: 1 }}>
            <Grid item>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 2,
                }}
              >
                Production Date
              </Typography>
            </Grid>
  
            <Grid item>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 3.3,
                }}
              >
                :
              </Typography>
            </Grid>
  
            <Grid>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  // mt: 1,
                  textAlign: "left",
                  ml: 5,
                }}
              ></Typography>
            </Grid>
          </Grid>
  
          <Grid container sx={{ mt: 1 }}>
            <Grid item>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 2,
                }}
              >
                Expired Date
              </Typography>
            </Grid>
  
            <Grid item>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  textAlign: "left",
                  ml: 6.5,
                }}
              >
                :
              </Typography>
            </Grid>
  
            <Grid>
              <Typography
                // variant="h5"
                sx={{
                  fontWeight: 600,
                  // mt: 3,
                  // mt: 1,
                  textAlign: "left",
                  ml: 5,
                }}
              ></Typography>
            </Grid>
          </Grid> */}
        {/* </Collapse> */}
      </Grid>

      {/* ------------------------------------------------------------ */}
      {/* <Paper fullWidth fullHeight> */}
      <Paper sx={{ mt: 3, ml: 3, mr: 2 }}>
        <Divider width="93%" objectFit="contain" sx={{ mt: 2 }} />
        <Divider width="93%" objectFit="contain" />
        <Table size="small">
          <TableHead>
            <TableRow>
              {tableHeader &&
                tableHeader.map((head, index) => (
                  <TableCell
                    sx={{
                      fontWeight: "600",
                      // textAlign:
                      //   head.name === "COA" || head.name === "Keterangan COA"
                      //     ? "left"
                      //     : "right",
                    }}
                    key={index}
                  >
                    {head.name}
                  </TableCell>
                ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {listMonitor &&
              listMonitor.map((item, index) => (
                <React.Fragment key={index}>
                  <TableRow>
                    <TableCell>
                      {/* <Link
                        href={`/general-ledger/${item.tahun}/${item.bulan}/${item.coa_id}`}
                      > */}
                      {item.scan_procode}
                      {/* </Link> */}
                    </TableCell>
                    <TableCell>{item.scan_proname}</TableCell>
                    <TableCell
                    // sx={{
                    //   textAlign: "right",
                    // }}
                    >
                      {/* {formatNumber(item.saldo_awal)} */}
                      {item.scan_batch}
                    </TableCell>
                    <TableCell
                    // sx={{
                    //   color: formatColor("DEBIT", item.total_debit),
                    //   textAlign: "right",
                    // }}
                    >
                      {/* {formatNumber(item.total_debit)} */}
                      {item.scan_status}
                    </TableCell>
                    <TableCell
                    // sx={{
                    //   color: formatColor("AKHIR", item.saldo_akhir),
                    //   textAlign: "right",
                    // }}
                    >
                      {/* {formatNumber(item.saldo_akhir)} */}
                      {item.scan_submitdate === "" ||
                      item.scan_submitdate === null
                        ? "-"
                        : formatDate(
                            item.scan_submitdate,
                            "DD MMMM YYYY HH:mm"
                          )}
                    </TableCell>
                    <TableCell
                    // sx={{
                    //   color: formatColor("AKHIR", item.saldo_akhir),
                    //   textAlign: "right",
                    // }}
                    >
                      <Button
                        variant="contained"
                        // startIcon={
                        //   <ArrowDownwardIcon sx={{ ml: 1 }} />
                        // }
                        size="large"
                        sx={{ mr: 2, backgroundColor: "#EDBE4B" }}
                        // onClick={
                        //   () => debounceMountDownloadPPNOUT(item)
                        //   // mountDownloadPPNOUT2()
                        // }
                        // href={`http://storage.googleapis.com/staging.cfu-main.appspot.com/sales-ppn-out/2022092712450492712.csv`}
                        onClick={() => detailMonitoring(item)}
                      >
                        Detail
                      </Button>
                      <Button
                        parameter
                        variant="contained"
                        sx={{ backgroundColor: "#4BA1B4", mr: 2 }}
                        // startIcon={<DeleteIcon sx={{ ml: 1 }} />}
                        size="large"
                        // onClick={() => mountDeletePPNOUT(item)}
                        // onClick={() => setModalDeletePPNOUT(true)}
                        // onClick={() => deletePPNOUT1(item)}
                        onClick={() =>
                          debounceMountGenerateCSVBpom(item.scan_id)
                        }
                      >
                        Export
                      </Button>
                    </TableCell>
                  </TableRow>
                </React.Fragment>
              ))}
          </TableBody>
          <TableFooter>
            {/* <TableRow>
                <TablePagination
                  rowsPerPageOptions={[10, 25, 50]}
                  count={totalData}
                  rowsPerPage={params.length}
                  page={params.page}
                  onPageChange={handlePageChange}
                  onRowsPerPageChange={handleRowsPerPageChange}
                />
              </TableRow> */}
          </TableFooter>

          <Collapse in={collapseEmpty}>
            <Grid
            sx={{
              // border:"2px solid red",
              width:"100%",
              ml:"190%"}}>
                <Grid
                sx={{ 
                // border:"2px solid red
                mt:6,}}>
                <InfoIcon 
                sx={{ 
                mt:2,
                // border:"2px solid black"
                }}/>
                </Grid>
                <Grid sx={{ 
                  // border:"2px solid blue"
                  }}>
               
              <Typography
              sx={{
                // border:"2px solid red",
                mb:"30%",
                // ml:"200%",
                width:"100%",
                // border:"2px solid red",
                }}> 
                
                Data not found.
              </Typography>

              </Grid>
            </Grid>
            </Collapse>
        </Table>
      </Paper>

      {/* </Paper> */}
    </Box>
  );
};

export default ScanNewBatch;

// monitoring-manager [id] -> 

import {
  Box,
  Paper,
  Table,
  TableHead,
  FormControl,
  InputLabel,
  Select,
  Grid,
  Button,
  TextField,
  TableRow,
  TableCell,
  Typography,
  Modal,
  Divider,
  TableBody,
  MenuItem,
  Collapse,
  FormGroup,
  FormControlLabel,
  Checkbox,
} from "@mui/material";
import { useCallback, useEffect, useRef, useState } from "react";
import LogoutIcon from "@mui/icons-material/Logout";
import { AddCircle, CheckBox } from "@mui/icons-material";
import ArrowDropUpIcon from "@mui/icons-material/ArrowDropUp";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import qr from "../../services/qr";
import { debounce, set, isUndefined } from "lodash";
import { formatDate } from "../../utils/text";
import { detailApprovalBool, setDetailApprovalBool } from "./index";
import { useRouter } from "next/router";
import KeyboardBackspaceIcon from "@mui/icons-material/KeyboardBackspace";
import { getStorage } from "../../utils/storage";

const ScanNewBatch = () => {
  const styleModalErr = {
    position: "absolute",
    top: "30%",
    left: "60%",
    transform: "translate(-50%, -50%)",
    width: "35%",
    bgcolor: "background.paper",
    p: 4,
  };

  const styleModalStart = {
    position: "absolute",
    top: "30%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: "35%",
    bgcolor: "background.paper",
    p: 4,
  };

  const [listMasterBox, setListMasterBox] = useState([]);
  const [selectProduct, setSelectProduct] = useState("");
  const [selectBatchNumber, setSelectBatchNumber] = useState("");
  const [modalScanBatch, setModalScanBatch] = useState(false);
  const [flag, setFlag] = useState("D");
  const test = "12346 - Name of Product 2";
  const test1 = "AAAA-123456-01";
  const test2 = "10 UB";
  const test3 = "DBL653783700870A1";
  const test4 = "03 January 2023";
  const test5 = "23 June 2025";
  const [collapseDetailScanNewBatch, setCollapseDetailScanNewBatch] =
    useState(true);

  const [masterCodeBox, setMasterCodeBox] = useState("");
  const [unitBox1, setUnitBox1] = useState("");
  const [unitBox2, setUnitBox2] = useState("");
  const [unitBox3, setUnitBox3] = useState("");
  const [unitBox4, setUnitBox4] = useState("");
  const [unitBox5, setUnitBox5] = useState("");
  const [unitBox6, setUnitBox6] = useState("");
  const [unitBox7, setUnitBox7] = useState("");
  const [unitBox8, setUnitBox8] = useState("");
  const [unitBox9, setUnitBox9] = useState("");
  const [unitBox10, setUnitBox10] = useState("");

  const [unitBox1EditVar, setUnitBox1EditVar] = useState("");
  const [unitBox2EditVar, setUnitBox2EditVar] = useState("");
  const [unitBox3EditVar, setUnitBox3EditVar] = useState("");
  const [unitBox4EditVar, setUnitBox4EditVar] = useState("");
  const [unitBox5EditVar, setUnitBox5EditVar] = useState("");
  const [unitBox6EditVar, setUnitBox6EditVar] = useState("");
  const [unitBox7EditVar, setUnitBox7EditVar] = useState("");
  const [unitBox8EditVar, setUnitBox8EditVar] = useState("");
  const [unitBox9EditVar, setUnitBox9EditVar] = useState("");
  const [unitBox10EditVar, setUnitBox10EditVar] = useState("");

  const [masterBoxDisable, setMasterBoxDisable] = useState(true);
  const [unitBox1Disabled, setUnitBox1Disabled] = useState(true);
  const [unitBox2Disabled, setUnitBox2Disabled] = useState(true);
  const [unitBox3Disabled, setUnitBox3Disabled] = useState(true);
  const [unitBox4Disabled, setUnitBox4Disabled] = useState(true);
  const [unitBox5Disabled, setUnitBox5Disabled] = useState(true);
  const [unitBox6Disabled, setUnitBox6Disabled] = useState(true);
  const [unitBox7Disabled, setUnitBox7Disabled] = useState(true);
  const [unitBox8Disabled, setUnitBox8Disabled] = useState(true);
  const [unitBox9Disabled, setUnitBox9Disabled] = useState(true);
  const [unitBox10Disabled, setUnitBox10Disabled] = useState(true);

  const [modalStartScanNewBatch, setModalStartScanNewBatch] = useState(false);
  const [modalScanningPackagingNotFull, setModalScanningPackagingNotFull] =
    useState(false);
  const [
    modalScanningPackagingNotFullFinish,
    setModalScanningPackagingNotFullFinish,
  ] = useState(false);
  const [modalPackingSelesai, setModalPackingSelesai] = useState(false);
  const [modalPackingSelesai2, setModalPackingSelesai2] = useState(false);
  const [modalValidationSaveAndFinish, setModalValidationSaveAndFinish] =
    useState(false);
  const [modalValidatonUnitBox10, setModalValidatonUnitBox10] = useState(false);
  const [modalSeeMbList, setModalSeeMbList] = useState(false);

  const [collapseDeleteUnitBox1, setCollapseDeleteUnitBox1] = useState(false);
  const [collapseDeleteUnitBox2, setCollapseDeleteUnitBox2] = useState(false);
  const [collapseDeleteUnitBox3, setCollapseDeleteUnitBox3] = useState(false);
  const [collapseDeleteUnitBox4, setCollapseDeleteUnitBox4] = useState(false);
  const [collapseDeleteUnitBox5, setCollapseDeleteUnitBox5] = useState(false);
  const [collapseDeleteUnitBox6, setCollapseDeleteUnitBox6] = useState(false);
  const [collapseDeleteUnitBox7, setCollapseDeleteUnitBox7] = useState(false);
  const [collapseDeleteUnitBox8, setCollapseDeleteUnitBox8] = useState(false);
  const [collapseDeleteUnitBox9, setCollapseDeleteUnitBox9] = useState(false);
  const [collapseDeleteUnitBox10, setCollapseDeleteUnitBox10] = useState(false);

  const [collapseEditUnitBox1, setCollapseEditUnitBox1] = useState(false);
  const [collapseEditUnitBox2, setCollapseEditUnitBox2] = useState(false);
  const [collapseEditUnitBox3, setCollapseEditUnitBox3] = useState(false);
  const [collapseEditUnitBox4, setCollapseEditUnitBox4] = useState(false);
  const [collapseEditUnitBox5, setCollapseEditUnitBox5] = useState(false);
  const [collapseEditUnitBox6, setCollapseEditUnitBox6] = useState(false);
  const [collapseEditUnitBox7, setCollapseEditUnitBox7] = useState(false);
  const [collapseEditUnitBox8, setCollapseEditUnitBox8] = useState(false);
  const [collapseEditUnitBox9, setCollapseEditUnitBox9] = useState(false);
  const [collapseEditUnitBox10, setCollapseEditUnitBox10] = useState(false);

  const [collapseSaveUnitBox1, setCollapseSaveUnitBox1] = useState(false);
  const [collapseSaveUnitBox2, setCollapseSaveUnitBox2] = useState(false);
  const [collapseSaveUnitBox3, setCollapseSaveUnitBox3] = useState(false);
  const [collapseSaveUnitBox4, setCollapseSaveUnitBox4] = useState(false);
  const [collapseSaveUnitBox5, setCollapseSaveUnitBox5] = useState(false);
  const [collapseSaveUnitBox6, setCollapseSaveUnitBox6] = useState(false);
  const [collapseSaveUnitBox7, setCollapseSaveUnitBox7] = useState(false);
  const [collapseSaveUnitBox8, setCollapseSaveUnitBox8] = useState(false);
  const [collapseSaveUnitBox9, setCollapseSaveUnitBox9] = useState(false);
  const [collapseSaveUnitBox10, setCollapseSaveUnitBox10] = useState(false);
  const [arrProduct, setArrProduct] = useState([]);
  // const tempArrEdit = [];

  const [collapsePackagingSelesaiButton, setCollapsePackagingSelesaiButton] =
    useState(false);
  const [
    collapseDetailScanNewBatchButtonUp,
    setCollapseDetailScanNewBatchButtonUp,
  ] = useState(true);
  const [
    collapseDetailScanNewBatchButtonDown,
    setCollapseDetailScanNewBatchButtonDown,
  ] = useState(false);

  const [collapseButtonFinishPackaging, setCollapseButtonFinishPackaging] =
    useState(false);

  const unitBox1Ref = useRef();
  const unitBox2Ref = useRef();
  const unitBox3Ref = useRef();
  const unitBox4Ref = useRef();
  const unitBox5Ref = useRef();
  const unitBox6Ref = useRef();
  const unitBox7Ref = useRef();
  const unitBox8Ref = useRef();
  const unitBox9Ref = useRef();
  const unitBox10Ref = useRef();
  // const unitBox11Ref = useRef();

  const [listProduct, setListProduct] = useState([]);
  const [listHeader, setListHeader] = useState("");
  const [listSeeMB, setListSeeMB] = useState([]);
  const [listScanningPackaging, setListScanningPackaging] = useState([]);

  const [payloadHeader, setPayloadHeader] = useState([]);

  const [selectedProdDate, setSelectedProdDate] = useState("");
  const [selectedExpDate, setSelectedExpDate] = useState("");

  const [checkedSample, setCheckedSample] = useState(false);

  const [detailBool, setDetailBool] = useState(false);

  const [disableUnitBox1, setDisableUnitBox1] = useState(true);
  const [disableUnitBox2, setDisableUnitBox2] = useState(true);
  const [disableUnitBox3, setDisableUnitBox3] = useState(true);
  const [disableUnitBox4, setDisableUnitBox4] = useState(true);
  const [disableUnitBox5, setDisableUnitBox5] = useState(true);
  const [disableUnitBox6, setDisableUnitBox6] = useState(true);
  const [disableUnitBox7, setDisableUnitBox7] = useState(true);
  const [disableUnitBox8, setDisableUnitBox8] = useState(true);
  const [disableUnitBox9, setDisableUnitBox9] = useState(true);
  const [disableUnitBox10, setDisableUnitBox10] = useState(true);

  const [listSample, setListSample] = useState(false);

  const router = useRouter();

  const [noID, setNoID] = useState("");

  const accessList = getStorage("access_list");

  useEffect(() => {
    if (!isUndefined(accessList)) {
      var parsedAccess = JSON.parse(accessList);
      if (
        !parsedAccess["QR_BPOM_MONITORING_MANAGER"].includes(
          "QR_BPOM_MONITORING_MANAGER_CREATE"
        )
      ) {
        router.push("/403");
      }
    } else {
      router.push("/403");
    }
  }, [accessList]);

  // useEffect(() => {
  //   console.log("GetListMasterBoxUseEffect", listMasterBox)
  // },[listMasterBox])

  // useEffect(() => {
  //   if (flag === "D"){
  //   // if (listMasterBox === 0 || listMasterBox === "") {
  //   //   setFlag("D");
  //   //   setCollapsePackagingSelesaiButton(false);

  //   //   console.log("listHeaderStart2MasterBoxNull", listHeader);
  //   //   console.log("setCollapsePackagingSelesaiButtonTrue", collapsePackagingSelesaiButton);

  //   // }

  //   if (listMasterBox !== 0 || listMasterBox !== "") {
  //     setFlag("D");
  //     setCollapsePackagingSelesaiButton(false);
  //     console.log("testPayload", payloadHeader);
  //     console.log("listHeaderStart2MasterBoxNotNull", listHeader);

  //   }
  // }
  // },[flag,listMasterBox,collapsePackagingSelesaiButton])

  // const handleChange = (event, newValue) => {
  //   setValue(newValue);
  // };
  async function start(item) {
    if (selectBatchNumber === "" || selectBatchNumber === undefined) {
      setModalScanBatch(true);
    }
    if (selectBatchNumber !== "") {
      setModalStartScanNewBatch(true);
    }

    // if (masterCodeBox === "") {
    //   setModalValidationSaveAndFinish(true);
    // }
    console.log("selectBatchNumber", selectBatchNumber);
    console.log("getproduct", listProduct);
  }

  async function start2() {
    debounceMountCreateHeaderNewBatch();
    setFlag("D");
  }

  async function hideDetailScanNewBatch() {
    // if (
    //   (selectProduct === 0) &
    //   (selectProduct === 0) &
    //   (selectBatchNumber === "") &
    //   (selectBatchNumber === 0)
    // ) {
    //   // setModalScanBatch(true);
    // }
    // console.log("pro_code", payloadHeader.pro_code);
    // console.log("pro_name", payloadHeader.pro_name);
    // console.log("selectBatchNumber", selectBatchNumber);
    console.log("listHeader", listHeader);
    setCollapseDetailScanNewBatch(false);
    setCollapseDetailScanNewBatchButtonUp(false);
    setCollapseDetailScanNewBatchButtonDown(true);
  }

  async function showDetailScanNewBatch() {
    // if (
    //   (selectProduct === 0) &
    //   (selectProduct === 0) &
    //   (selectBatchNumber === "") &
    //   (selectBatchNumber === 0)
    // ) {
    //   // setModalScanBatch(true);
    // }
    setCollapseDetailScanNewBatch(true);
    setCollapseDetailScanNewBatchButtonUp(true);
    setCollapseDetailScanNewBatchButtonDown(false);
  }

  async function packaging() {
    setFlag("P");
    setCollapseSaveUnitBox1(false);
    setCollapseSaveUnitBox2(false);
    setCollapseSaveUnitBox3(false);
    setCollapseSaveUnitBox4(false);
    setCollapseSaveUnitBox5(false);
    setCollapseSaveUnitBox6(false);
    setCollapseSaveUnitBox7(false);
    setCollapseSaveUnitBox8(false);
    setCollapseSaveUnitBox9(false);
    setCollapseSaveUnitBox10(false);
  }

  useEffect(() => {
    // if (detailApprovalBool === true) {
    //   setFlag("P");
    //   setDetailBool(true);
    //   debounceMountGetScanningPackagingData(
    //     listHeader.scan_id,
    //     mbSizeDetail.scan_mbid
    //   );
    //   // setMbsizeDetail(item);
    //   // console.log("scanid", listHeader.scan_id);
    //   // console.log("itemMBID", item);
    //   // console.log("listScanningPackaging", listScanningPackaging);
    //   // console.log("product", product);
    //   // console.log("productEdit", productEdit);
    //   setCollapseSaveUnitBox1(false);
    //   setCollapseSaveUnitBox2(false);
    //   setCollapseSaveUnitBox3(false);
    //   setCollapseSaveUnitBox4(false);
    //   setCollapseSaveUnitBox5(false);
    //   setCollapseSaveUnitBox6(false);
    //   setCollapseSaveUnitBox7(false);
    //   setCollapseSaveUnitBox8(false);
    //   setCollapseSaveUnitBox9(false);
    //   setCollapseSaveUnitBox10(false);
    //   console.log("boolApproval-ScanNewBatch", detailApprovalBool);
    //   // setDetailApprovalBool(false);
    // }
    console.log("boolApproval-ScanNewBatch", detailApprovalBool);
  }, [
    detailApprovalBool,
    // flag,
    // detailBool,
    // listHeader,
    // mbSizeDetail,
    // collapseSaveUnitBox1,
    // collapseSaveUnitBox2,
    // collapseSaveUnitBox3,
    // collapseSaveUnitBox4,
    // collapseSaveUnitBox5,
    // collapseSaveUnitBox6,
    // collapseSaveUnitBox7,
    // collapseSaveUnitBox8,
    // collapseSaveUnitBox9,
    // collapseSaveUnitBox10,
  ]);

  async function saveAndContinueButton() {
    if (
      (unitBox1 !== 0 && unitBox1 !== "") ||
      (unitBox2 !== 0 && unitBox2 !== "") ||
      (unitBox3 !== 0 && unitBox3 !== "") ||
      (unitBox4 !== 0 && unitBox4 !== "") ||
      (unitBox5 !== 0 && unitBox5 !== "") ||
      (unitBox6 !== 0 && unitBox6 !== "") ||
      (unitBox7 !== 0 && unitBox7 !== "") ||
      (unitBox8 !== 0 && unitBox8 !== "") ||
      (unitBox9 !== 0 && unitBox9 !== "")
    ) {
      setModalScanningPackagingNotFull(true);
    }
    if (masterCodeBox === "") {
      setModalValidationSaveAndFinish(true);
    }
    if (unitBox10 !== 0 && unitBox10 !== "") {
      // mountCreateDetailNewBatch();
      console.log("testmasooooooooook");
      saveAndContinueFinish();
    }
  }

  async function saveAndContinueFinish() {
    debounceMountGetListMasterBox(listHeader.scan_id);
    // if (listMasterBox === null || listMasterBox === "") {
    //   // setFlag("D");
    //   setCollapsePackagingSelesaiButton(true);

    //   // console.log("listHeaderStart2MasterBoxNull", listHeader);
    // }

    // if (listMasterBox !== 0 || listMasterBox !== "") {
    // setFlag("D");
    // setCollapsePackagingSelesaiButton(false);
    // console.log("testPayload", payloadHeader);
    // console.log("listHeaderStart2MasterBoxNotNull", listHeader);
    // }

    setCollapsePackagingSelesaiButton(true);
    console.log(
      "setCollapsePackagingSelesaiButton",
      collapsePackagingSelesaiButton
    );
    mountCreateDetailNewBatch();

    setMasterCodeBox("");
    setUnitBox1("");
    setUnitBox2("");
    setUnitBox3("");
    setUnitBox4("");
    setUnitBox5("");
    setUnitBox6("");
    setUnitBox7("");
    setUnitBox8("");
    setUnitBox9("");
    setUnitBox10("");

    setCollapseDeleteUnitBox1(false);
    setCollapseDeleteUnitBox2(false);
    setCollapseDeleteUnitBox3(false);
    setCollapseDeleteUnitBox4(false);
    setCollapseDeleteUnitBox5(false);
    setCollapseDeleteUnitBox6(false);
    setCollapseDeleteUnitBox7(false);
    setCollapseDeleteUnitBox8(false);
    setCollapseDeleteUnitBox9(false);
    setCollapseDeleteUnitBox10(false);

    setUnitBox1Disabled(true);
    setUnitBox2Disabled(true);
    setUnitBox3Disabled(true);
    setUnitBox4Disabled(true);
    setUnitBox5Disabled(true);
    setUnitBox6Disabled(true);
    setUnitBox7Disabled(true);
    setUnitBox8Disabled(true);
    setUnitBox9Disabled(true);
    setUnitBox10Disabled(true);

    setModalScanningPackagingNotFull(false);
    setModalScanningPackagingNotFullFinish(false);

    setDetailBool(false);
  }

  const style = {
    position: "absolute",
    top: "25%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 600,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    pt: 2,
    px: 4,
    pb: 3,
  };

  // const listMasterBox = [
  //   {
  //     scan_mbid: "MBCODE001",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE002",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE003",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE004",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE005",
  //     scan_ubid: "10",
  //   },
  // ];

  // const handleKeyDownUnitBox1 = (event) => {
  //   if (event.key === "Enter") {
  //     unitBox1Ref.focus();
  //   }
  // };

  const debounceMountGetScanningPackagingData = useCallback(
    debounce(mountGetScanningPackagingData, 400)
  );

  const [MBBox, setMBBox] = useState("");
  const [unitBox1Edit, setUnitBox1Edit] = useState("");
  const [unitBox2Edit, setUnitBox2Edit] = useState("");
  const [unitBox3Edit, setUnitBox3Edit] = useState("");
  const [unitBox4Edit, setUnitBox4Edit] = useState("");
  const [unitBox5Edit, setUnitBox5Edit] = useState("");
  const [unitBox6Edit, setUnitBox6Edit] = useState("");
  const [unitBox7Edit, setUnitBox7Edit] = useState("");
  const [unitBox8Edit, setUnitBox8Edit] = useState("");
  const [unitBox9Edit, setUnitBox9Edit] = useState("");
  const [unitBox10Edit, setUnitBox10Edit] = useState("");
  const scanData = [];
  const [mbSizeDetail, setMbsizeDetail] = useState([]);

  async function mountGetScanningPackagingData(scanid, mbid) {
    try {
      const getScanningPackaging = await qr.getScanningPackagingData(
        scanid,
        mbid
      );
      const { data } = getScanningPackaging.data;
      setListScanningPackaging(data);
      setMasterCodeBox(data[0].scan_mbid);
      setUnitBox1(data[0].scan_ubid !== "" ? data[0].scan_ubid : "-");
      setUnitBox2(data[1].scan_ubid !== "" ? data[1].scan_ubid : "-");
      setUnitBox3(data[2].scan_ubid !== "" ? data[2].scan_ubid : "-");
      setUnitBox4(data[3].scan_ubid !== "" ? data[3].scan_ubid : "-");
      setUnitBox5(data[4].scan_ubid !== "" ? data[4].scan_ubid : "-");
      setUnitBox6(data[5].scan_ubid !== "" ? data[5].scan_ubid : "-");
      setUnitBox7(data[6].scan_ubid !== "" ? data[6].scan_ubid : "-");
      setUnitBox8(data[7].scan_ubid !== "" ? data[7].scan_ubid : "-");
      setUnitBox9(data[8].scan_ubid !== "" ? data[8].scan_ubid : "-");
      setUnitBox10(data[9].scan_ubid !== "" ? data[9].scan_ubid : "-");
      // if (data !== null) {
      //   setListScanningPackaging(data);
      //   scanData = data;
      //   console.log("dataScanningPackaging", data);
      //   console.log("scandata", scanData);
      //   setMBBox(scanData[0].scan_mbid);
      //   setUnitBox1Edit(scanData[0].scan_ubid);
      //   if (scanData[0].scan_ubid !== "" && scanData[0].scan_ubid !== 0) {
      //     setCollapseEditUnitBox1(true);
      //   }
      //   setUnitBox2Edit(scanData[1].scan_ubid);
      //   if (scanData[1].scan_ubid !== "" && scanData[1].scan_ubid !== 0) {
      //     setCollapseEditUnitBox2(true);
      //   }
      //   setUnitBox3Edit(scanData[2].scan_ubid);
      //   if (scanData[2].scan_ubid !== "" && scanData[2].scan_ubid !== 0) {
      //     setCollapseEditUnitBox3(true);
      //   }
      //   setUnitBox4Edit(scanData[3].scan_ubid);
      //   if (scanData[3].scan_ubid !== "" && scanData[3].scan_ubid !== 0) {
      //     setCollapseEditUnitBox4(true);
      //   }
      //   setUnitBox5Edit(scanData[4].scan_ubid);
      //   if (scanData[4].scan_ubid !== "" && scanData[4].scan_ubid !== 0) {
      //     setCollapseEditUnitBox5(true);
      //   }
      //   setUnitBox6Edit(scanData[5].scan_ubid);
      //   if (scanData[5].scan_ubid !== "" && scanData[5].scan_ubid !== 0) {
      //     setCollapseEditUnitBox6(true);
      //   }
      //   setUnitBox7Edit(scanData[6].scan_ubid);
      //   if (scanData[6].scan_ubid !== "" && scanData[6].scan_ubid !== 0) {
      //     setCollapseEditUnitBox7(true);
      //   }
      //   setUnitBox8Edit(scanData[7].scan_ubid);
      //   if (scanData[7].scan_ubid !== "" && scanData[7].scan_ubid !== 0) {
      //     setCollapseEditUnitBox8(true);
      //   }
      //   setUnitBox9Edit(scanData[8].scan_ubid);
      //   if (scanData[8].scan_ubid !== "" && scanData[8].scan_ubid !== 0) {
      //     setCollapseEditUnitBox9(true);
      //   }
      //   setUnitBox10Edit(scanData[9].scan_ubid);
      //   if (scanData[9].scan_ubid !== "" && scanData[9].scan_ubid !== 0) {
      //     setCollapseEditUnitBox10(true);
      //   }
      // }

      //   if (data !== null) {
      //     setListScanningPackaging(data);
      //     scanData = data;
      //     console.log("dataScanningPackaging", data);
      //     console.log("scandata", scanData);
      //     setMBBox(scanData[0].scan_mbid);
      //     setUnitBox1Edit(scanData[0].scan_ubid);
      //     if (scanData[0].scan_ubid !== "" || scanData[0].scan_ubid !== 0) {
      //       setCollapseEditUnitBox1(true);
      //       // setUnitBox1Edit(scanData[0].scan_ubid);
      //     }
      //     setUnitBox2Edit(scanData[1].scan_ubid);
      //     if (scanData[1].scan_ubid !== "" || scanData[1].scan_ubid !== 0) {
      //       setCollapseEditUnitBox2(true);
      //       // setUnitBox2Edit(scanData[1].scan_ubid);
      //     }
      //     setUnitBox3Edit(scanData[2].scan_ubid);
      //     if (scanData[2].scan_ubid !== "" || scanData[2].scan_ubid !== 0) {
      //       setCollapseEditUnitBox3(true);
      //       // setUnitBox3Edit(scanData[2].scan_ubid);
      //     }
      //     setUnitBox4Edit(scanData[3].scan_ubid);
      //     if (scanData[3].scan_ubid !== "" || scanData[3].scan_ubid !== 0) {
      //       setCollapseEditUnitBox4(true);
      //       // setUnitBox4Edit(scanData[3].scan_ubid);
      //     }
      //     setUnitBox5Edit(scanData[4].scan_ubid);
      //     if (scanData[4].scan_ubid !== "" || scanData[4].scan_ubid !== 0) {
      //       setCollapseEditUnitBox5(true);
      //       // setUnitBox5Edit(scanData[4].scan_ubid);
      //     }
      //     setUnitBox6Edit(scanData[5].scan_ubid);
      //     if (scanData[5].scan_ubid !== "" || scanData[5].scan_ubid !== 0) {
      //       setCollapseEditUnitBox6(true);
      //       // setUnitBox6Edit(scanData[5].scan_ubid);
      //     }
      //     setUnitBox7Edit(scanData[6].scan_ubid);
      //     if (scanData[6].scan_ubid !== "" || scanData[6].scan_ubid !== 0) {
      //       setCollapseEditUnitBox7(true);
      //       // setUnitBox7Edit(scanData[6].scan_ubid);
      //     }
      //     setUnitBox8Edit(scanData[7].scan_ubid);
      //     if (scanData[7].scan_ubid !== "" || scanData[7].scan_ubid !== 0) {
      //       setCollapseEditUnitBox8(true);
      //       // setUnitBox8Edit(scanData[7].scan_ubid);
      //     }
      //     setUnitBox9Edit(scanData[8].scan_ubid);
      //     if (scanData[8].scan_ubid !== "" || scanData[8].scan_ubid !== 0) {
      //       setCollapseEditUnitBox9(true);
      //       // setUnitBox9Edit(scanData[8].scan_ubid);
      //     }
      //     setUnitBox10Edit(scanData[9].scan_ubid);
      //     if (scanData[9].scan_ubid !== "" || scanData[9].scan_ubid !== 0) {
      //       setCollapseEditUnitBox10(true);
      //       // setUnitBox10Edit(scanData[9].scan_ubid);
      //     }
      //   }
    } catch (error) {
      console.log(error);
    }

    // console.log(
    //   "listScanningPackagingFunc2",
    //   listScanningPackaging && listScanningPackaging
    // );
  }

  useEffect(() => {
    console.log("scanningPackaging", listScanningPackaging);
    //   if (checkedSample === false){
    //     setListSample(false)
    //     console.log("listSample", listSample)
    //     }
    //   if (checkedSample === true){
    //     setListSample(true)
    //   console.log("listSample", listSample)
    // }
    // console.log("listSampleFinish", listSample)
  }, [listScanningPackaging, listSample, checkedSample]);

  // const debounceMountGetListMasterBox = useCallback(
  //   debounce(mountGetListMasterBox, 400)
  // );

  // async function mountGetListMasterBox(scanid) {
  //   try {
  //     const getListMasterBox = await qr.getListMasterBox(scanid);
  //     const { data } = getListMasterBox.data;
  //     setListMasterBox(data);
  //     console.log("dataMasterBox", data);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // }

  const debounceMountGetListAllProduct = useCallback(
    debounce(mountGetListAllProduct, 400)
  );

  async function mountGetListAllProduct() {
    try {
      const getListProduct = await qr.getListAllProduct();
      const { data } = getListProduct.data;
      setListProduct(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountCreateHeaderNewBatch = useCallback(
    debounce(mountCreateHeaderNewBatch, 400)
  );

  async function mountCreateHeaderNewBatch() {
    try {
      var payload = {
        data: {
          scan_procode: payloadHeader.pro_code,
          scan_proname: payloadHeader.pro_name,
          scan_batch: selectBatchNumber,
          scan_proddate: formatDate(selectedProdDate, "YYMMDD"),
          scan_expdate: formatDate(selectedExpDate, "YYMMDD"),
        },
      };

      try {
        console.log("payload", payload);
        const createHeaderNewBatch = await qr.createHeaderNewBatch(payload);
        const { data } = createHeaderNewBatch.data;
        console.log("data", data);
        setListHeader(data);
        console.log("datascanid", data.scan_id);
        debounceMountGetListMasterBox(data.scan_id);
      } catch (error) {
        console.log(error);
      }

      console.log("pro_code", payloadHeader.pro_code);
      console.log("pro_name", payloadHeader.pro_name);
      console.log("selectBatchNumber", selectBatchNumber);
      // setModalAdd(false);
      // setModalAddSave(false);
      // debounceMountListExpired(pilihOption);
    } catch (error) {
      console.log(error);
    }
  }
  const [product, setProduct] = useState([]);
  const [productEdit, setProductEdit] = useState([]);

  useEffect(() => {
    // if (detailBool !== true) {
    // if (detailBool !== true) {
    //   const tempArr = [];
    //   if (unitBox1 !== "") {
    //     tempArr.push(unitBox1);
    //   }
    //   if (unitBox2 !== "") {
    //     tempArr.push(unitBox2);
    //   }
    //   if (unitBox3 !== "") {
    //     tempArr.push(unitBox3);
    //   }
    //   if (unitBox4 !== "") {
    //     tempArr.push(unitBox4);
    //   }
    //   if (unitBox5 !== "") {
    //     tempArr.push(unitBox5);
    //   }
    //   if (unitBox6 !== "") {
    //     tempArr.push(unitBox6);
    //   }
    //   if (unitBox7 !== "") {
    //     tempArr.push(unitBox7);
    //   }
    //   if (unitBox8 !== "") {
    //     tempArr.push(unitBox8);
    //   }
    //   if (unitBox9 !== "") {
    //     tempArr.push(unitBox9);
    //   }
    //   if (unitBox10 !== "") {
    //     tempArr.push(unitBox10);
    //   }
    //   console.log("tempArr", tempArr);
    //   if (detailBool !== true && flag === "P") {
    //     setProduct(tempArr);
    //   }
    // }

    // if (detailBool === true) {

    const tempArrEdit = [];

    // if (unitBox1 === "" && unitBox1EditVar !== "") {
    //   setDisableUnitBox1(false);
    //   tempArrEdit.push(unitBox1);
    // }
    if (unitBox1 !== "") {
      setDisableUnitBox1(false);
      tempArrEdit.push(unitBox1);
    }
    if (unitBox2 !== "") {
      setDisableUnitBox2(false);
      tempArrEdit.push(unitBox2);
    }
    if (unitBox3 !== "") {
      setDisableUnitBox3(false);
      tempArrEdit.push(unitBox3);
    }
    // tempArrEdit.push(product[2]);
    if (unitBox4 !== "") {
      setDisableUnitBox4(false);
      tempArrEdit.push(unitBox4);
    }
    if (unitBox5 !== "") {
      setDisableUnitBox5(false);
      tempArrEdit.push(unitBox5);
    }
    if (unitBox6 !== "") {
      setDisableUnitBox6(false);
      tempArrEdit.push(unitBox6);
    }
    if (unitBox7 !== "") {
      setDisableUnitBox7(false);
      tempArrEdit.push(unitBox7);
    }
    if (unitBox8 !== "") {
      setDisableUnitBox8(false);
      tempArrEdit.push(unitBox8);
    }
    if (unitBox9 !== "") {
      setDisableUnitBox9(false);
      tempArrEdit.push(unitBox9);
    }
    if (unitBox10 !== "") {
      setDisableUnitBox10(false);
      tempArrEdit.push(unitBox10);
    }
    setProductEdit(tempArrEdit);

    // if (unitBox1Edit === "") {
    //   setDisableUnitBox1(true);
    // }
    // if (unitBox2Edit === "") {
    //   setDisableUnitBox2(true);
    // }
    // if (unitBox3Edit === "") {
    //   setDisableUnitBox3(true);
    // }
    // if (unitBox4Edit === "") {
    //   setDisableUnitBox4(true);
    // }
    // if (unitBox5Edit === "") {
    //   setDisableUnitBox5(true);
    // }
    // if (unitBox6Edit === "") {
    //   setDisableUnitBox6(true);
    // }
    // if (unitBox7Edit === "") {
    //   setDisableUnitBox7(true);
    // }
    // if (unitBox8Edit === "") {
    //   setDisableUnitBox8(true);
    // }
    // if (unitBox9Edit === "") {
    //   setDisableUnitBox9(true);
    // }
    // if (unitBox10Edit === "") {
    //   setDisableUnitBox10(true);
    // }
    if (listHeader.scan_status !== "D") {
      if (unitBox1 !== "" && disableUnitBox1 !== false) {
        setCollapseEditUnitBox1(true);
      }

      if (unitBox2 !== "" && disableUnitBox2 !== false) {
        setCollapseEditUnitBox2(true);
      }

      if (unitBox3 !== "" && disableUnitBox3 !== false) {
        setCollapseEditUnitBox3(true);
      }

      if (unitBox4 !== "" && disableUnitBox4 !== false) {
        setCollapseEditUnitBox4(true);
      }

      if (unitBox5 !== "" && disableUnitBox5 !== false) {
        setCollapseEditUnitBox5(true);
      }

      if (unitBox6 !== "" && disableUnitBox6 !== false) {
        setCollapseEditUnitBox6(true);
      }

      if (unitBox7 !== "" && disableUnitBox7 !== false) {
        setCollapseEditUnitBox7(true);
      }

      if (unitBox8 !== "" && disableUnitBox8 !== false) {
        setCollapseEditUnitBox8(true);
      }

      if (unitBox9 !== "" && disableUnitBox9 !== false) {
        setCollapseEditUnitBox9(true);
      }

      if (unitBox10 !== "" && disableUnitBox10 !== false) {
        setCollapseEditUnitBox10(true);
      }
      // setCollapseButtonFinishPackaging(true);
    }

    if (listHeader.scan_status === "O" || listHeader.scan_status === "R") {
      setCollapsePackagingSelesaiButton(true);
    }
    if (listHeader.scan_status === "O" || listHeader.scan_status === "R") {
      setCollapseButtonFinishPackaging(true);
    }
  }, [
    unitBox1,
    unitBox2,
    unitBox3,
    unitBox4,
    unitBox5,
    unitBox6,
    unitBox7,
    unitBox8,
    unitBox9,
    unitBox10,

    listHeader,
    collapseButtonFinishPackaging,
    collapsePackagingSelesaiButton,
    // collapseButtonFinishPackaging,

    // unitBox1Edit,
    // unitBox2Edit,
    // unitBox3Edit,
    // unitBox4Edit,
    // unitBox5Edit,
    // unitBox6Edit,
    // unitBox7Edit,
    // unitBox8Edit,
    // unitBox9Edit,
    // unitBox10Edit,

    // disableUnitBox1,
    // disableUnitBox2,
    // disableUnitBox3,
    // disableUnitBox4,
    // disableUnitBox5,
    // disableUnitBox6,
    // disableUnitBox7,
    // disableUnitBox8,
    // disableUnitBox9,
    // disableUnitBox10,
    // detailBool,
    // product,
    // productEdit,
    ,
  ]);

  useEffect(() => {
    console.log("product", product);
    console.log("productEdit", productEdit);
  }, [
    unitBox1,
    unitBox2,
    unitBox3,
    unitBox4,
    unitBox5,
    unitBox6,
    unitBox7,
    unitBox8,
    unitBox9,
    unitBox10,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,
  ]);

  // useEffect(() => {
  //   if (!router.isReady) return;
  //   if (router.query.id !== "undefined") {
  //     var props = router.query;
  //     setNoID(props.id);
  //   } else {
  //     router.push({
  //       pathname: "/approval",
  //     });
  //   }
  // }, [router.isReady]);

  async function mountCreateDetailNewBatch() {
    try {
      var k;
      var y;
      y = 0;
      // for (k = 1; k <= 10; k++) {
      if (unitBox1 !== "") {
        y = y + 1;
      }
      if (unitBox2 !== "") {
        y = y + 1;
      }
      if (unitBox3 !== "") {
        y = y + 1;
      }
      if (unitBox4 !== "") {
        y = y + 1;
      }
      if (unitBox5 !== "") {
        y = y + 1;
      }
      if (unitBox6 !== "") {
        y = y + 1;
      }
      if (unitBox7 !== "") {
        y = y + 1;
      }
      if (unitBox8 !== "") {
        y = y + 1;
      }
      if (unitBox9 !== "") {
        y = y + 1;
      }
      if (unitBox10 !== "") {
        y = y + 1;
      }
      // }
      console.log("y", y);
      var x;
      var j;
      j = 10 - y;
      var k;
      k = 1;
      console.log("j", j);
      for (x = 1; x <= listHeader.scan_mbsize - j; x++) {
        var test;
        test = listHeader.scan_id;
        // var payload = {
        //   data: {
        //     scan_id: test,
        //     scan_mbid: masterCodeBox,
        //     scan_ubid:
        //       // unitBox1,
        //       x === 1
        //         ? unitBox1
        //         : x === 2
        //         ? unitBox2
        //         : x === 3
        //         ? unitBox3
        //         : x === 4
        //         ? unitBox4
        //         : x === 5
        //         ? unitBox5
        //         : x === 6
        //         ? unitBox6
        //         : x === 7
        //         ? unitBox7
        //         : x === 8
        //         ? unitBox8
        //         : x === 9
        //         ? unitBox9
        //         : unitBox10,
        //     scan_sampleyn: "Y",

        //     // scan_id: listHeader[0].scan_id,
        //     // scan_mbid:
        //   },
        // };

        var payload = {
          data: {
            scan_id: test,
            scan_mbid: masterCodeBox,
            scan_uburut:
              x === 1
                ? k
                : x === 2
                ? k
                : x === 3
                ? k
                : x === 4
                ? k
                : x === 5
                ? k
                : x === 6
                ? k
                : x === 7
                ? k
                : x === 8
                ? k
                : x === 9
                ? k
                : k,
            scan_ubid:
              // unitBox1,
              x === 1
                ? product[0]
                : x === 2
                ? product[1]
                : x === 3
                ? product[2]
                : x === 4
                ? product[3]
                : x === 5
                ? product[4]
                : x === 6
                ? product[5]
                : x === 7
                ? product[6]
                : x === 8
                ? product[7]
                : x === 9
                ? product[8]
                : product[9],
            scan_sampleyn: "Y",

            // scan_id: listHeader[0].scan_id,
            // scan_mbid:
          },
        };
        k = k + 1;

        // }

        console.log("payload", payload);
        const createDetailNewBatch = await qr.createDetailNewBatch(payload);
        const { data } = createDetailNewBatch.data;
        console.log("data", data);
        // setListHeader(data);
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function mountUpdateUBID(item) {
    try {
      // var k;
      var y;
      y = 0;
      // for (k = 1; k <= 10; k++) {
      console.log("unitBox1FinishEdit", unitBox1);
      if (unitBox1 !== "") {
        y = y + 1;
      }
      if (unitBox2 !== "") {
        y = y + 1;
      }
      if (unitBox3 !== "") {
        y = y + 1;
      }
      if (unitBox4 !== "") {
        y = y + 1;
      }
      if (unitBox5 !== "") {
        y = y + 1;
      }
      if (unitBox6 !== "") {
        y = y + 1;
      }
      if (unitBox7 !== "") {
        y = y + 1;
      }
      if (unitBox8 !== "") {
        y = y + 1;
      }
      if (unitBox9 !== "") {
        y = y + 1;
      }
      if (unitBox10 !== "") {
        y = y + 1;
      }
      // }
      console.log("y", y);
      var x;
      var j;
      j = 10 - y;
      // var k;
      // k = 1;
      console.log("unitBox1FinishEdit2", unitBox1);
      console.log("mbSizeDetail.cnt", mbSizeDetail.cnt);

      console.log("j", j);
      // for (x = 1; x <= listHeader.scan_mbsize - j; x++) {
      for (x = 1; x <= mbSizeDetail.cnt; x++) {
        var test;
        test = listHeader.scan_id;
        var payload = {
          data: {
            scan_id: test,
            scan_mbid: listScanningPackaging[0].scan_mbid,
            scan_uburut:
              x === 1
                ? 1
                : x === 2
                ? 2
                : x === 3
                ? 3
                : x === 4
                ? 4
                : x === 5
                ? 5
                : x === 6
                ? 6
                : x === 7
                ? 7
                : x === 8
                ? 8
                : x === 9
                ? 9
                : 10,
            scan_ubid:
              // unitBox1,
              x === 1
                ? productEdit[0]
                : x === 2
                ? productEdit[1]
                : x === 3
                ? productEdit[2]
                : x === 4
                ? productEdit[3]
                : x === 5
                ? productEdit[4]
                : x === 6
                ? productEdit[5]
                : x === 7
                ? productEdit[6]
                : x === 8
                ? productEdit[7]
                : x === 9
                ? productEdit[8]
                : productEdit[9],
            scan_sampleyn: checkedSample === false ? false : true,

            // scan_id: listHeader[0].scan_id,
            // scan_mbid:
          },
        };
        // k = k + 1;

        // }

        console.log("finishMasukUpdate");
        console.log("listHeaderFinish", listHeader);

        console.log("payloadUpdate", payload);
        const updateUBID = await qr.updateDetailUBID(payload);
        const { data } = updateUBID.data;
        console.log("data", data);
        // setListHeader(data);
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function savePayloadHeader(e) {
    setSelectProduct(e.target.value);
    setPayloadHeader(item);
  }

  async function checkSample() {
    console.log("checkSample", checkedSample);
    if (checkedSample === false) {
      setCheckedSample(true);
      console.log("testSample", checkedSample);
      // setListSample(false)
      // console.log("listSample", listSample)
    }
    if (checkedSample === true) {
      setCheckedSample(false);
      console.log("testSample", checkedSample);
      //   setListSample(true)
      // console.log("listSample", listSample)
    }
    console.log("listSampleFInsihCheck", listSample);
  }

  const debounceMountGetSeeMBList = useCallback(
    debounce(mountGetSeeMBList, 400)
  );

  async function mountGetSeeMBList() {
    try {
      const mountGetSeeMBList = await qr.getSeeMBList(listHeader.scan_id);
      const { data } = mountGetSeeMBList.data;
      setListSeeMB(data);
      setModalSeeMbList(true);
      console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  async function testLog() {
    console.log("seeMBList", listSeeMB);
    setModalSeeMbList(false);
  }

  // async function detailScanningPackaging(item) {
  //   setFlag("P");
  //   // setDetailBool(true);
  //   // debounceMountGetScanningPackagingData(listHeader.scan_id, item.scan_mbid);
  //   // setMbsizeDetail(item);
  //   // console.log("scanid", listHeader.scan_id);
  //   // console.log("itemMBID", item);
  //   // console.log("listScanningPackaging", listScanningPackaging);
  //   // console.log("product", product);
  //   // console.log("productEdit", productEdit);
  //   // setCollapseSaveUnitBox1(false);
  //   // setCollapseSaveUnitBox2(false);
  //   // setCollapseSaveUnitBox3(false);
  //   // setCollapseSaveUnitBox4(false);
  //   // setCollapseSaveUnitBox5(false);
  //   // setCollapseSaveUnitBox6(false);
  //   // setCollapseSaveUnitBox7(false);
  //   // setCollapseSaveUnitBox8(false);
  //   // setCollapseSaveUnitBox9(false);
  //   // setCollapseSaveUnitBox10(false);
  // }

  async function finishPackaging() {
    try {
      const mountUpdateUBID = await qr.updatePackingSelesai(listHeader.scan_id);
      const { data } = mountUpdateUBID.data;
      setModalPackingSelesai2(true);

      // console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  // ---------------------------------------------------------------------
  useEffect(() => {
    if (!router.isReady) return;
    if (router.query.id !== "undefined") {
      var props = router.query;
      setNoID(props.id);
    } else {
      router.push({
        pathname: "/approval",
      });
    }
    // debounceMountGetHeader(noID);
    // console.log("listHeader", listHeader);
  }, [router.isReady]);

  async function mountGetHeader() {
    try {
      const mountGetHeader = await qr.getHeader(noID);
      const { data } = mountGetHeader.data;
      setListHeader(data);
      console.log("noID", noID);
      // setListSeeMB(data);
      // setModalSeeMbList(true);
      console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetHeader = useCallback(debounce(mountGetHeader, 400));

  useEffect(() => {
    console.log("listheaderstatus", listHeader.scan_status);

    if (flag === "D" && noID !== "") {
      debounceMountGetHeader();
      debounceMountGetListMasterBox(noID);
      console.log("listHeader", listHeader);
    }
  }, [noID]);

  const debounceMountGetListMasterBox = useCallback(
    debounce(mountGetListMasterBox, 400)
  );

  async function mountGetListMasterBox(scanid) {
    try {
      const getListMasterBox = await qr.getListMasterBox(scanid);
      const { data } = getListMasterBox.data;
      setListMasterBox(data);
      console.log("dataMasterBox", data);
    } catch (error) {
      console.log(error);
    }
  }

  async function detailScanningPackaging(item) {
    setFlag("P");
    // setDetailBool(true);
    debounceMountGetScanningPackagingData(noID, item.scan_mbid);
    setMbsizeDetail(item);
    // console.log("scanid", listHeader.scan_id);
    // console.log("itemMBID", item);
    // console.log("listScanningPackaging", listScanningPackaging);
    // console.log("product", product);
    // console.log("productEdit", productEdit);
    // setCollapseSaveUnitBox1(false);
    // setCollapseSaveUnitBox2(false);
    // setCollapseSaveUnitBox3(false);
    // setCollapseSaveUnitBox4(false);
    // setCollapseSaveUnitBox5(false);
    // setCollapseSaveUnitBox6(false);
    // setCollapseSaveUnitBox7(false);
    // setCollapseSaveUnitBox8(false);
    // setCollapseSaveUnitBox9(false);
    // setCollapseSaveUnitBox10(false);
  }

  async function back() {
    setFlag("D");
    setProductEdit([]);
    setUnitBox1("");
    setUnitBox2("");
    setUnitBox3("");
    setUnitBox4("");
    setUnitBox5("");
    setUnitBox6("");
    setUnitBox7("");
    setUnitBox8("");
    setUnitBox9("");
    setUnitBox10("");
  }

  // useEffect(()=>)

  // function handleCheck(e) {
  //   const target = e.target;
  //   const value = target.value;
  //   var tempArr = [...arrProduct];

  //   if (
  //     target.checked === true &&
  //     tempArr.filter((item) => !item.includes(value))
  //   ) {
  //     tempArr.push(value);
  //     setArrProduct(tempArr);
  //   }
  //   if (target.checked === false) {
  //     tempArr = tempArr.filter((item) => !item.includes(value));
  //     setArrProduct(tempArr);
  //   }
  // }

  return (
    <>
      {
        //   flag === "Y" ? (
        //     <Box sx={{ width: "100%", textAlign: "center" }}>
        //       <Grid
        //         container
        //         justifyContent={"space-between"}
        //         sx={{ margin: "1%" }}
        //       >
        //         <Grid container item xs={10}>
        //           <Typography
        //             variant="h5"
        //             sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
        //           >
        //             SCAN NEW BATCH
        //           </Typography>
        //         </Grid>
        //       </Grid>

        //       <Grid
        //         container
        //         spacing={0}
        //         direction="column"
        //         alignItems="center"
        //         justifyContent="center"
        //         style={{ minHeight: "85vh", textAlign: "center" }}
        //       >
        //         <Paper>
        //           <Grid sx={{ ml: 2, mr: 2 }}>
        //             {/* <Paper sx={{ marginRight: "35px", marginLeft: "35px" }}> */}
        //             <Grid
        //             // sx={{ margin: "1%" }}
        //             >
        //               <FormControl
        //                 sx={{ backgroundColor: "white", width: "50vh", mt: 3 }}
        //               >
        //                 <InputLabel>Select Product</InputLabel>
        //                 <Select
        //                   variant="outlined"
        //                   size="small"
        //                   label="Select Product"
        //                   // value={selectProduct}
        //                   onChange={(e) => setSelectProduct(e.target.value)}
        //                 >
        //                   {listProduct &&
        //                     listProduct.map((item) => (
        //                       <MenuItem
        //                         onClick={() => setPayloadHeader(item)}
        //                         key={item}
        //                         value={item}
        //                       >
        //                         {/* {item.comco} -  */}
        //                         {item.pro_name}
        //                       </MenuItem>
        //                     ))}
        //                 </Select>
        //               </FormControl>
        //             </Grid>
        //             <Grid
        //               // sx={{ margin: "1%" }}
        //               sx={{ mt: 1 }}
        //             >
        //               <FormControl
        //                 sx={{
        //                   backgroundColor: "white",
        //                   width: "50vh",
        //                   marginTop: 1,
        //                 }}
        //               >
        //                 <TextField
        //                   size="small"
        //                   variant="outlined"
        //                   placeholder={"Input Batch Number"}
        //                   onChange={(e) => setSelectBatchNumber(e.target.value)}
        //                 ></TextField>
        //               </FormControl>
        //             </Grid>
        //             <Grid sx={{ mt: 2 }}>
        //               <DesktopDatePicker
        //                 label="Production Date"
        //                 value={selectedProdDate}
        //                 onChange={(newValue) => setSelectedProdDate(newValue)}
        //                 renderInput={(params) => (
        //                   <TextField
        //                     size="small"
        //                     {...params}
        //                     sx={{ background: "white", width: "100%" }}
        //                   />
        //                 )}
        //               />
        //             </Grid>
        //             <Grid sx={{ mt: 2 }}>
        //               <DesktopDatePicker
        //                 label="Expired Date"
        //                 value={selectedExpDate}
        //                 onChange={(newValue) => setSelectedExpDate(newValue)}
        //                 renderInput={(params) => (
        //                   <TextField
        //                     size="small"
        //                     {...params}
        //                     sx={{ background: "white", width: "100%" }}
        //                   />
        //                 )}
        //               />
        //             </Grid>
        //             <Grid sx={{ textAlign: "right", marginTop: 2 }}>
        //               <Button
        //                 variant="contained"
        //                 sx={{ marginBottom: 2 }}
        //                 onClick={() => start()}
        //               >
        //                 Start
        //               </Button>
        //             </Grid>
        //             {/* </Grid> */}
        //           </Grid>
        //         </Paper>
        //       </Grid>
        //       <Modal open={modalScanBatch}>
        //         <Box sx={style}>
        //           <Grid>
        //             <Typography sx={{ fontWeight: 600 }}>Watch out!</Typography>
        //             <Typography>
        //               Information of product and batch is still incomplete!
        //             </Typography>
        //             <Button
        //               sx={{
        //                 marginTop: 1,
        //                 float: "right",
        //               }}
        //               variant="outlined"
        //               onClick={() => setModalScanBatch(false)}
        //             >
        //               OK
        //             </Button>
        //           </Grid>
        //         </Box>
        //       </Modal>

        //       <Modal open={modalStartScanNewBatch}>
        //         <Box sx={style}>
        //           <Grid>
        //             <Typography variant="h5" sx={{ fontWeight: 600, mb: 1 }}>
        //               Hello!
        //             </Typography>
        //             <Typography>
        //               Are you sure to start the scanning process of new batch?
        //             </Typography>
        //             <Divider sx={{ my: 2 }}></Divider>
        //             <Grid>
        //               <Button
        //                 variant="contained"
        //                 sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
        //                 onClick={() => start2()}
        //               >
        //                 YES
        //               </Button>

        //               <Button
        //                 variant="contained"
        //                 sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
        //                 onClick={() => setModalStartScanNewBatch(false)}
        //               >
        //                 NO
        //               </Button>
        //             </Grid>
        //           </Grid>
        //         </Box>
        //       </Modal>
        //       {/* </Paper> */}
        //     </Box>
        //   ) :
        flag === "D" ? (
          <Box sx={{ width: "100%", textAlign: "center" }}>
            <Grid
              container
              justifyContent={"space-between"}
              sx={{ margin: "1%" }}
            >
              <Grid container item xs={10} sx={{ mb: 2 }}>
                <Button
                  variant="contained"
                  // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                  onClick={() => router.push(`/monitoring-process-scan`)}
                >
                  <KeyboardBackspaceIcon />
                </Button>
              </Grid>
              <Grid container item xs={10}>
                {/* <Button
                    variant="contained"
                    // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                    onClick={() => router.push(`/approval`)}
                  >
                    <KeyboardBackspaceIcon />
                  </Button> */}
                <Typography
                  variant="h5"
                  sx={{
                    fontWeight: 600,
                    mt: 0.5,
                    textAlign: "left",
                    ml: 2,
                    mb: 3,
                  }}
                >
                  SCAN NEW BATCH
                </Typography>
              </Grid>
            </Grid>
            {/* ------------------------------------------------------------ */}

            <Grid container sx={{ ml: 6 }}>
              <Grid container>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    Product
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 11,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {listHeader.scan_proname}
                  </Typography>
                </Grid>
              </Grid>

              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    Batch Number
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {listHeader.scan_batch}
                  </Typography>
                </Grid>
              </Grid>

              <Collapse in={collapseDetailScanNewBatch}>
                <Grid container sx={{ mt: 1 }}>
                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                      }}
                    >
                      MB Size
                    </Typography>
                  </Grid>

                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 11,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>

                  <Grid>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        // mt: 1,
                        textAlign: "left",
                        ml: 5,
                      }}
                    >
                      {listHeader.scan_mbsize} {"UB"}
                    </Typography>
                  </Grid>
                </Grid>

                <Grid container sx={{ mt: 1 }}>
                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                      }}
                    >
                      NIE
                    </Typography>
                  </Grid>

                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 15,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>

                  <Grid>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        // mt: 1,
                        textAlign: "left",
                        ml: 5.3,
                      }}
                    >
                      {listHeader.scan_nie}
                    </Typography>
                  </Grid>
                </Grid>

                <Grid container sx={{ mt: 1 }}>
                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                      }}
                    >
                      Production Date
                    </Typography>
                  </Grid>

                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 3.3,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>

                  <Grid>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        // mt: 1,
                        textAlign: "left",
                        ml: 5,
                      }}
                    >
                      {formatDate(listHeader.scan_proddate, "DD MMM YYYY")}
                    </Typography>
                  </Grid>
                </Grid>

                <Grid container sx={{ mt: 1 }}>
                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                      }}
                    >
                      Expired Date
                    </Typography>
                  </Grid>

                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 6.5,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>

                  <Grid>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        // mt: 1,
                        textAlign: "left",
                        ml: 5,
                      }}
                    >
                      {formatDate(listHeader.scan_expdate, "DD MMM YYYY")}
                    </Typography>
                  </Grid>
                </Grid>
              </Collapse>
              <Divider width="93%" objectFit="contain" sx={{ mt: 4 }} />
              <Divider width="93%" objectFit="contain" />
            </Grid>

            {/* ------------------------------------------------------------ */}
            {/* <Paper fullWidth fullHeight> */}
            <Grid sx={{ backgroundColor: "white" }}>
              {/* <Paper
                // width="100%" height="100%" objectFit="contain"
                > */}
              <Collapse in={collapseDetailScanNewBatchButtonUp}>
                <Grid sx={{ textAlign: "right", mr: 3 }}>
                  {/* <Typography>adasfagdsv</Typography> */}
                  <Button
                    // color="error"
                    variant="outlined"
                    onClick={() => hideDetailScanNewBatch()}
                    // fullWidth
                    startIcon={<ArrowDropUpIcon />}
                    sx={{ backgroundColor: "#f0f0f0", textAlign: "center" }}
                    size="small"
                  >
                    {/* Keluar */}
                  </Button>
                </Grid>
              </Collapse>
              <Collapse in={collapseDetailScanNewBatchButtonDown}>
                <Grid sx={{ textAlign: "right", mr: 3 }}>
                  {/* <Typography>adasfagdsv</Typography> */}
                  <Button
                    // color="error"
                    variant="outlined"
                    onClick={() => showDetailScanNewBatch()}
                    // fullWidth
                    startIcon={<ArrowDropDownIcon />}
                    sx={{ backgroundColor: "#f0f0f0", textAlign: "center" }}
                  >
                    {/* Keluar */}
                  </Button>
                </Grid>
              </Collapse>
              {/* </Paper> */}
              {/* </Grid> */}
              <Grid>
                <Typography
                  sx={{ fontWeight: 600, textAlign: "left", ml: 5, mt: 1 }}
                >
                  List Of Master Box
                  <Divider sx={{ width: "95%" }} />
                  <Divider sx={{ width: "95%" }} />
                </Typography>
              </Grid>
              <Table sx={{ ml: 5 }}>
                <TableBody>
                  {/* {listMasterBox &&
                      listMasterBox.map((item, index) => ( */}
                  {listMasterBox &&
                    listMasterBox.map((item, index) => (
                      <TableRow key={item}>
                        <TableCell>
                          {/* <Link
                          href={`/general-ledger/${item.tahun}/${item.bulan}/${item.coa_id}`}
                        > */}
                          {/* {item.scan_mbid} - {item.scan_ubid} {"UB"} */}
                          {item.scan_mbid} - {item.cnt} {"UB"}
                          {/* </Link> */}
                        </TableCell>
                        <TableCell>
                          <Button
                            variant="contained"
                            sx={{
                              float: "right",
                              marginBottom: 2,
                              mr: 13,
                              mt: 2,
                              color: "black",
                              backgroundColor: "white",
                              // bo
                            }}
                            // onClick={() => packingFinish()}
                            onClick={() => detailScanningPackaging(item)}
                          >
                            Detail
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                </TableBody>
              </Table>
              <Grid
                container
                // sx={{ float: "right", width: "15%" }}
                // sx={{ width: "100%" }}
              >
                <Grid container>
                  {/* <Grid item sx={{ float: "right", width: "100%" }}>
                      <Button
                        // color="error"
                        // variant="outlined"
  
                        // fullWidth
                        // startIcon={<AddCircle />}
                        // sx={{ backgroundColor: "#f0f0f0" }}
                        // sx={{}}
                        onClick={() => packaging()}
                        sx={{ float: "right", width: "15%" }}
                      >
                        <AddCircle sx={{ fontSize: 35, color: "teal" }} />
                      </Button>
                    </Grid> */}
                </Grid>
              </Grid>
            </Grid>
            {/* </Paper> */}
            <Modal open={modalPackingSelesai}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Watch out!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    Are you sure to finish packing process?
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "27em",
                      }}
                      onClick={() => finishPackaging()}
                    >
                      YES
                    </Button>

                    <Button
                      variant="contained"
                      sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                      onClick={() => setModalPackingSelesai(false)}
                    >
                      NO
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>
            <Modal open={modalPackingSelesai2}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Congrats!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    {/* Data QR Batch AAAA-123456-01 successfully saved. */}
                    Data QR Batch {""}
                    {listHeader.scan_batch}
                    {""} successfully saved.
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "33em",
                      }}
                      onClick={() => packingFinishModal()}
                    >
                      OK
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>
          </Box>
        ) : flag === "P" ? (
          <Box sx={{ width: "100%", textAlign: "center" }}>
            <Grid
              container
              justifyContent={"space-between"}
              sx={{ margin: "1%", mb: 2 }}
            >
              <Grid container item xs={10} sx={{ mb: 2 }}>
                <Button
                  variant="contained"
                  // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                  onClick={() => back()}
                >
                  <KeyboardBackspaceIcon />
                </Button>
                {/* <Typography
                    variant="h5"
                    sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
                  >
                    SCANNING PACKAGING
                  </Typography> */}
              </Grid>
              <Grid container item xs={10}>
                {/* <Button
                    variant="contained"
                    // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                    onClick={() => deleteUnitBox1()}
                  >
                    
                  </Button> */}
                <Typography
                  variant="h5"
                  sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
                >
                  SCANNING PACKAGING
                </Typography>
              </Grid>
            </Grid>

            <Divider
              width="91%"
              objectFit="contain"
              sx={{ mt: 4, float: "center", ml: 8 }}
            />
            <Divider
              width="91%"
              objectFit="contain"
              sx={{ float: "center", ml: 8 }}
            />

            <Grid sx={{ ml: 6, mt: 5 }} container>
              {/* <Paper> */}
              <Grid item flex={1}>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 2,
                  }}
                >
                  Master Code Box
                </Typography>
              </Grid>
              <Grid item flex={0.2}>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 2,
                    mt: 1,
                  }}
                >
                  :
                </Typography>
              </Grid>
              <Grid item flex={5}>
                <TextField
                  sx={{ float: "left" }}
                  fullWidth
                  size="small"
                  // onChange={(e) => setMasterCodeBox(e.target.value)}
                  value={masterCodeBox}
                  disabled

                  // onKeyDown={handleKeyDownUnitBox1}
                  // disabled
                ></TextField>
              </Grid>
              <Grid item flex={2}>
                <Button
                  // color="error"
                  variant="outlined"
                  onClick={() => debounceMountGetSeeMBList()}
                  // fullWidth
                  // startIcon={<LogoutIcon />}
                  sx={{ float: "center" }}
                  size="medium"
                >
                  See MB List
                </Button>
              </Grid>
            </Grid>
            <Divider
              width="91%"
              objectFit="contain"
              sx={{ mt: 4, float: "center", ml: 8 }}
            />
            <Divider
              width="91%"
              objectFit="contain"
              sx={{ float: "center", ml: 8 }}
            />

            <Grid sx={{ ml: 8, mt: 2 }} container>
              {listScanningPackaging.map((item, index) => (
                <Grid key={index} sx={{ mt: 2 }} container>
                  <Grid item flex={1}>
                    {/* <Typography>{item.name}</Typography> */}
                    <Typography
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                        mt: 1,
                      }}
                    >
                      Unit Box Code {index + 1}
                    </Typography>
                  </Grid>
                  <Grid item flex={0.2}>
                    <Typography
                      sx={{
                        fontWeight: 600,
                        textAlign: "left",
                        ml: 2,
                        mt: 1,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>
                  <Grid item flex={3.5}>
                    <TextField
                      id={`item${index}`}
                      value={item.scan_ubid}
                      // onChange={(e) => testings(e, index)}
                      // inputRef={(el) => (unitBox1Ref = el)}
                      // inputRef={(el) => (unitBox1Ref[`item${index}`] = el)}
                      // disabled={(index) => disableTestBox1[`item${index}`]}
                      // disabled={!disableTestBox1.some(({}))}
                      // disabled
                      // disabled={disableTestBox1}
                      // sx={{ ml: 2 }}
                      sx={{ float: "left", width: "100%" }}
                      size="small"
                      // disabled={index > 0 && inputValue[`item${index - 1}`].trim() === ""}
                      // disabled={
                      //   inputValue[`item${index - 1}`] == "" &&
                      //   masterCodeBox !== ""
                      // }
                      disabled
                    ></TextField>
                  </Grid>
                  <Grid item flex={1.57}></Grid>
                  {/* {changeButton(item, index)} */}
                </Grid>
                // </Grid>
              ))}
            </Grid>

            {/* <G */}
            <Modal open={modalScanningPackagingNotFull}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Heads Up!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    Data of unit box code is incomplete. Are you sure to
                    proceed?
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "27em",
                      }}
                      onClick={() => saveAndContinueFinish()}
                    >
                      YES
                    </Button>

                    <Button
                      variant="contained"
                      sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                      onClick={() => setModalScanningPackagingNotFull(false)}
                    >
                      NO
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>

            <Modal open={modalSeeMbList}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    {/* Heads Up! */}
                    Master Box Code ={" "}
                    {listSeeMB.scan_id !== ""
                      ? ("", listSeeMB.scan_mbid)
                      : "Empty"}
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    {/* Error */}
                    This Master Box is{" "}
                    {listSeeMB.scan_sampleyn === "Y"
                      ? "retained sample"
                      : listSeeMB.scan_sampleyn === "N"
                      ? "not retained sample"
                      : "Empty"}
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "33em",
                      }}
                      // onClick={() => setModalSeeMbList(false)}
                      onClick={() => testLog(false)}
                    >
                      OK
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>
          </Box>
        ) : (
          <Box sx={{ width: "50%", textAlign: "center" }}>
            <Grid
              container
              justifyContent={"space-between"}
              sx={{ margin: "1%" }}
            >
              <Grid container item xs={10}>
                <Typography
                  variant="h5"
                  sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
                >
                  SCAN NEW BATCH
                </Typography>
              </Grid>
            </Grid>
          </Box>
        )
      }
    </>
  );
};

export default ScanNewBatch;

// approval -> index.js

import {
  Box,
  Paper,
  Table,
  TableHead,
  FormControl,
  InputLabel,
  Select,
  Grid,
  Button,
  TextField,
  TableRow,
  TableCell,
  Typography,
  Modal,
  Divider,
  TableBody,
  TableFooter,
  MenuItem,
  Collapse,
  Fade,
  Grow,
  Zoom,
  Slide,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Autocomplete,
} from "@mui/material";
import React, { useCallback, useEffect, useRef, useState } from "react";
import qr from "../../services/qr";
import { debounce, reject, set, isUndefined } from "lodash";
import LogoutIcon from "@mui/icons-material/Logout";
import { AddCircle, CheckBox } from "@mui/icons-material";
import ArrowDropUpIcon from "@mui/icons-material/ArrowDropUp";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import BackspaceIcon from "@mui/icons-material/Backspace";
import RefreshIcon from "@mui/icons-material/Refresh";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import InfoIcon from '@mui/icons-material/Info';
import ArrowDownwardIcon from "@mui/icons-material/ArrowDownward";
import DeleteIcon from "@mui/icons-material/Delete";
import { formatDate } from "../../utils/text";
import { useRouter } from "next/router";
// import Link from "next/link";
import { getStorage } from "../../utils/storage";

// import // setFlag,
// // setDetailBool,
// // debounceMountGetScanningPackagingData,
// // listHeader,
// // mbSizeDetail,
// // setCollapseSaveUnitBox1,
// // setCollapseSaveUnitBox2,
// // setCollapseSaveUnitBox3,
// // setCollapseSaveUnitBox4,
// // setCollapseSaveUnitBox5,
// // setCollapseSaveUnitBox6,
// // setCollapseSaveUnitBox7,
// // setCollapseSaveUnitBox8,
// // setCollapseSaveUnitBox9,
// // setCollapseSaveUnitBox10,
// // ScanNewBatch,
// "../scan-new-batch/index";

const Approval = () => {
  // const styleModalErr = {
  //   position: "absolute",
  //   top: "30%",
  //   left: "60%",
  //   transform: "translate(-50%, -50%)",
  //   width: "35%",
  //   bgcolor: "background.paper",
  //   p: 4,
  // };

  // const styleModalStart = {
  //   position: "absolute",
  //   top: "30%",
  //   left: "50%",
  //   transform: "translate(-50%, -50%)",
  //   width: "35%",
  //   bgcolor: "background.paper",
  //   p: 4,
  // };

  const [modalCheckUploadToBPOM, setModalCheckUploadToBPOM] = useState(false);
  const [modalFinishUploadToBPOM, setModalFinishUploadToBPOM] = useState(false);

  const [modalCheckReject, setModalCheckReject] = useState(false);
  const [modalFinishReject, setModalFinishReject] = useState(false);

  const [listApproval, setListApproval] = useState([]);
  const [listProduct, setListProduct] = useState([]);

  const [searchApprovalByDate, setSearchApprovalByDate] = useState("");

  const [detailApprovalBool, setDetailApprovalBool] = useState(false);

  const [disabledUploadReject, setDisabledUploadReject] = useState(true);
  const [disabledDone, setDisabledDone] = useState(false);


  const [uploadItem, setUploadItem] = useState("");

  const [rejectItem, setRejectItem] = useState("");

  const accessList = getStorage("access_list");

  useEffect(() => {
    if (!isUndefined(accessList)) {
      var parsedAccess = JSON.parse(accessList);
      if (
        !parsedAccess["QR_BPOM_UPLOAD_TO_BPOM"].includes(
          "QR_BPOM_UPLOAD_TO_BPOM"
        )
      ) {
        router.push("/403");
      }
    } else {
      router.push("/403");
    }
  }, [accessList]);

  // const {disabledUploadReject}

  const router = useRouter();

  const style = {
    position: "absolute",
    top: "25%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 600,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    pt: 2,
    px: 4,
    pb: 3,
  };

  //   const testjson = {
  //     "posts": [
  //         {
  //             "scan_procode": 1,
  //             "scan_proname": "Post 1",
  //             "scan_batch": "This is the full content of post 1",
  //             "scan_submitteddate": "This is the full content of post 1"
  //         },
  //         {
  //           "scan_procode": 1,
  //           "scan_proname": "Post 1",
  //           "scan_batch": "This is the full content of post 1",
  //           "scan_submitteddate": "This is the full content of post 1"
  //         },
  //         {
  //           "scan_procode": 1,
  //           "scan_proname": "Post 1",
  //           "scan_batch": "This is the full content of post 1",
  //           "scan_submitteddate": "This is the full content of post 1"
  //         },
  //         {
  //           "scan_procode": 1,
  //           "scan_proname": "Post 1",
  //           "scan_batch": "This is the full content of post 1",
  //           "scan_submitteddate": "This is the full content of post 1"
  //         }
  //     ]
  // }

  const tableHeader = [
    {
      name: "Procode",
    },
    {
      name: "Product Name",
    },
    {
      name: "Batch Number",
    },
    {
      name: "Status",
    },
    {
      name: "Keterangan",
    },
    {
      name: "Submitted On",
    },
  ];

  // const listApproval = [
  //       {
  //           "scan_procode": 1,
  //           "scan_proname": "Panadol Merah",
  //           "scan_batch": "X3",
  //           "scan_status": "O",
  //           "scan_submitteddate": "2023-02-17 00:00:00"
  //       },
  //       {
  //         "scan_procode": 1,
  //         "scan_proname": "Panadol Merah",
  //         "scan_batch": "X3",
  //         "scan_status": "O",
  //         "scan_submitteddate": "2023-02-17 00:00:00"
  //     },
  //     {
  //       "scan_procode": 1,
  //       "scan_proname": "Panadol Merah",
  //       "scan_batch": "X3",
  //       "scan_status": "O",
  //       "scan_submitteddate": "2023-02-17 00:00:00"
  //   },
  //   {
  //     "scan_procode": 1,
  //     "scan_proname": "Panadol Merah",
  //     "scan_batch": "X3",
  //     "scan_status": "O",
  //     "scan_submitteddate": "2023-02-17 00:00:00"
  // },
  // {
  //   "scan_procode": 1,
  //   "scan_proname": "Panadol Merah",
  //   "scan_batch": "X3",
  //   "scan_status": "O",
  //   "scan_submitteddate": "2023-02-17 00:00:00"
  // },

  //   ]

  async function finishUploadToBPOM(item) {
    setUploadItem(item);
    // setModalFinishUploadToBPOM(false);
    setModalCheckUploadToBPOM(true);
  }

  async function finishReject(item) {
    setRejectItem(item);
    // setModalFinishUploadToBPOM(false);
    setModalCheckReject(true);
  }

  const debounceMountGetReviewBatch = useCallback(
    debounce(mountGetReviewBatch, 400)
  );

  async function mountGetReviewBatch() {
    try {
      const getBatchToReview = await qr.getListBatchToReview();
      const { data } = getBatchToReview.data;
      setListApproval(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountetReviewBatchByProcode = useCallback(
    debounce(mountGetReviewBatchByProcode, 400)
  );

  async function mountGetReviewBatchByProcode(procode) {
    try {
      const getBatchToReview = await qr.getReviewBatchByProcode(procode);
      const { data } = getBatchToReview.data;
      setListApproval(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetReviewBatchByDate = useCallback(
    debounce(mountGetReviewBatchByDate, 400)
  );

  async function mountGetReviewBatchByDate(date) {
    try {
      const getBatchToReview = await qr.getReviewBatchByDate(date);
      const { data } = getBatchToReview.data;
      setListApproval(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetListAllProduct = useCallback(
    debounce(mountGetListAllProduct, 400)
  );

  async function mountGetListAllProduct() {
    try {
      const getListProduct = await qr.getListAllProduct();
      const { data } = getListProduct.data;
      setListProduct(data);
      // setListApproval(data);
    } catch (error) {
      console.log(error);
    }
  }

  // async function filterByProduct(item) {
  //   debounceMountetReviewBatchByProcode(item.pro_code);
  // }

  // async function approvalSearchByDate(newValue) {
  //   setSearchApprovalByDate(formatDate(newValue, "YYMMDD"));

  //   debounceMountGetReviewBatchByDate(searchApprovalByDate);
  // }

  // useEffect(() => {
  //   debounceMountGetReviewBatch();
  //   debounceMountGetListAllProduct();
  // }, []);

  // useEffect(() => {
  //   if (searchApprovalByDate !== 0 && searchApprovalByDate !== "") {
  //     console.log("searchApprovalByDate", searchApprovalByDate);
  //     debounceMountGetReviewBatchByDate(
  //       formatDate(searchApprovalByDate, "YYMMDD")
  //     );
  //   }
  //   console.log("boolApproval-Approval", detailApprovalBool);
  // }, [searchApprovalByDate, detailApprovalBool]);

  async function detailApproval(item) {
    // const routers = `/scan-new-batch`;
    router.push(`/approval/${item.scan_id}`);
    // router.push(`:path/www.google.com`);
    setDetailApprovalBool(true);
    // if (routers === `/scan-new-batch`) {
    //   setFlag("P");
    //   setDetailBool(true);
    //   debounceMountGetScanningPackagingData(
    //     listHeader.scan_id,
    //     mbSizeDetail.scan_mbid
    //   );
    //   // setMbsizeDetail(item);
    //   // console.log("scanid", listHeader.scan_id);
    //   // console.log("itemMBID", item);
    //   // console.log("listScanningPackaging", listScanningPackaging);
    //   // console.log("product", product);
    //   // console.log("productEdit", productEdit);
    //   setCollapseSaveUnitBox1(false);
    //   setCollapseSaveUnitBox2(false);
    //   setCollapseSaveUnitBox3(false);
    //   setCollapseSaveUnitBox4(false);
    //   setCollapseSaveUnitBox5(false);
    //   setCollapseSaveUnitBox6(false);
    //   setCollapseSaveUnitBox7(false);
    //   setCollapseSaveUnitBox8(false);
    //   setCollapseSaveUnitBox9(false);
    //   setCollapseSaveUnitBox10(false);
    // }
  }

  async function uploadToBpom(scanid) {
    try {
      const uploadBpom = await qr.updateUploadBpom(scanid);
      const { data } = uploadBpom.data;
      // setModalPackingSelesai2(true);
      // debounceMountGetReviewBatch();
      debounceMountGetFilterApproval(inputSearch.pro_code, filterDate);
      // console.log("listScanningPackagingSeeMBList", listScanningPackaging);
      console.log("cek update", data);
    } catch (error) {
      console.log(error);
    }
  }

  async function rejectPackaging(scanid) {
    try {
      const mountUpdateUBID = await qr.updateReject(scanid);
      const { data } = mountUpdateUBID.data;
      // setModalPackingSelesai2(true);
      // debounceMountGetReviewBatch();
      debounceMountGetFilterApproval(inputSearch.pro_code, filterDate);
      // console.log("listScanningPackagingSeeMBList", listScanningPackaging);
      console.log("cek");
    } catch (error) {
      console.log(error);
    }
  }

  const [inputSearch, setInputSearch] = useState({
    pro_name: "",
    pro_code: "",
  });

  const [filterDate, setFilterDate] = useState("");

  const [collapseDate, setCollapseDate] = useState(false);
  const [collapseRefresh, setCollapseRefresh] = useState(false);
  const [collapseAllData, setCollapseAllData] = useState(true);
  const [collapseEmpty, setCollapseEmpty] = useState(false);
  const [collapseDefault, setCollapseDefault] = useState(true);

  const debounceMountGetFilterApproval = useCallback(debounce(mountGetFilterApproval, 400));

  async function mountGetFilterApproval(procode, submitdate) {
    console.log("procode", procode);
    // console.log("status", status);
    console.log("date", submitdate);
    var date = formatDate(submitdate, "YYMMDD");
    var status = "";
    console.log("datebaru", date);
    try {
      const getFilterHeaderApproval = await qr.getFilterHeaderApproval(procode, date);
      const { data } = getFilterHeaderApproval.data;
      setListApproval(data);
      console.log("list =>", data);
      setCollapseEmpty(false);
      if ( data == null){
        console.log("cek collapse Empty");
        setCollapseEmpty(true);
      }
    } catch (error) {
      console.log("error getFilterApproval",error);
      setCollapseEmpty(true);
    }
  }

  // useEffect(() => {
  //   debounceMountGetListAllProduct();
  //   debounceMountGetFilterApproval(inputSearch.pro_code, filterDate);
  // }, [inputSearch.pro_code, filterDate]);

  // useEffect(() => {
  //   console.log("============= Parameters =============");
  //   console.log("inputSearch name => ", inputSearch.pro_name);
  //   console.log("inputSearch code => ", inputSearch.pro_code);
  //   // console.log("filterStatus =>", filterStatus);
  //   console.log("filterDate => ", filterDate);
  //   // console.log("label", filterLabel);
  //   console.log("======================================");
  // }, [inputSearch.pro_name, inputSearch.pro_code, filterDate]);

  async function deleteDate() {
    // setFilterDate("cek2")
    setCollapseDate(false);
  }

  async function deleteRefresh() {
    // setFilterRefresh("cek3")
    setCollapseRefresh(false);
    setCollapseAllData(true);
    setCollapseEmpty(false);
    setFilterDate(null); 
    setListApproval([]);
    // setInputSearch(inputSearch.pro_code==="", inputSearch.pro_name===""); 
    setInputSearch({
      ...inputSearch,
      pro_code: "",
      pro_name: ""
    });
    deleteDate();
  }

  async function getAllBatch() {
    debounceMountGetFilterApproval("", ""); 

    setInputSearch({
      ...inputSearch,
      pro_code: "",
      pro_name: ""
    });
    setFilterDate(null); 
    deleteDate();

    setCollapseRefresh(true);
    setCollapseAllData(false);
  }

  // Sekali panggil
  useEffect(() => {
    debounceMountGetListAllProduct();
    console.log("[X|>>>>>|] UseEffect Parent [|<<<<<<|X]");
  },[])


  useEffect(() => {
    console.log(" **************************** UseEffect **************************** ");
    // debounceMountGetFilterApproval(inputSearch.pro_code, filterDate);
    // debounceMountGetListBatchToMonitor();
    // debounceMountGetListAllProduct();

    if (inputSearch.pro_code !==""||inputSearch.pro_name !=="" || (filterDate !=="" && filterDate !== null)){
      console.log("| ceking IF ==> Filter terisi");
      debounceMountGetFilterApproval(inputSearch.pro_code, filterDate);
      setCollapseAllData(true);

    } else if (inputSearch.pro_code ===""&&inputSearch.pro_name ==="" && (filterDate !=="" || filterDate !== null) && (collapseAllData === true || collapseRefresh ===false)){
      console.log("| ceking IF ==> Filter kosong");
      setListApproval([]);
      setCollapseRefresh(false);
      setCollapseEmpty(false);
      setCollapseAllData(true);
      if (collapseAllData === true) {
      setCollapseRefresh(false);
      
      console.log("| ceking IF ==> Default");
      }
    } else if (collapseAllData === false){
      console.log("| ceking IF ==> Get ALLData ");
    }
    // else {
    //   console.log("| ceking IF ==> Kosong 2");
    //   setListMonitor([]);
    //   setCollapseRefresh(false);
    //   setCollapseAllData(true);
    // }
    // debounceMountGetListAllProduct();

    
    
    // setCollapseRefresh(false)

    var date = formatDate(filterDate, "YYMMDD");
    if (inputSearch.pro_code !== "" || date !== "") {
      setCollapseRefresh(true);
    }
    
    console.log("| inputSearch.pro-code +>", inputSearch.pro_code);
    console.log("| inputSearch.pro-name +>", inputSearch.pro_name);
    console.log("| filterDate +>", filterDate);
    console.log("| date +>", date);
    console.log("| collapse Date", collapseDate);
    console.log("| collapse Refresh", collapseRefresh);
    console.log("| data +>", listApproval)
    console.log(" ******************************************************* ");
  }, [inputSearch.pro_code, inputSearch.pro_name, filterDate, collapseDate, collapseRefresh]);

  // async function mountUpload(){
  //   debounceMountGetFilterApproval();
  //   setModalFinishUploadToBPOM(true);
  // }

  return (
    <Box sx={{ width: "100%", textAlign: "center" }}>
      <Grid container justifyContent={"space-between"} sx={{ margin: "1%" }}>
        <Grid container item xs={10}>
          <Typography
            variant="h5"
            sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
          >
            APPROVAL
          </Typography>
        </Grid>
      </Grid>

      <Grid container>
        <Grid container sx={{ mt: 1 }}>
          <Grid item flex={5}>
            <Autocomplete
              options={listProduct}
              sx={{
                backgroundColor: "white",
                ml: 3,
                mt: 5,
                width: "100%",
              }}
              getOptionLabel={(option) =>
                `${option.pro_name} - ${option.pro_code}`
              }
              isOptionEqualToValue={(option, value) => {
                option.pro_code === value.pro_code;
                option.pro_name === value.pro_name;
              }}
              renderInput={(params) => (
                <TextField
                  {...params}
                  size="small"
                  label="Filter by Product..."
                />
              )}
              onChange={(event, newValue) => {
                setInputSearch({
                  ...inputSearch,
                  pro_code: newValue === null ? "" : newValue.pro_code,
                  pro_name: newValue === null ? "" : newValue.pro_name,
                });
              }}
              value={inputSearch.pro_name === "" ? null : inputSearch}
            />
          </Grid>

          {/* <Grid item flex={2}>
            <FormControl fullWidth sx={{ ml: 5, mt: 5, width: "100%" }}>
              <InputLabel id="bulan-label">Filter by Status</InputLabel>
              <Select label="Filter by Product" size="small"></Select>
            </FormControl>
          </Grid> */}

          <Grid item flex={4}>
            <FormControl fullWidth sx={{ ml: 7, mt: 5, width: "100%" }}>
              {/* <InputLabel id="bulan-label">Filter by Date</InputLabel> */}

              {/* <Select label="Filter by Product" size="small"></Select> */}
              <DesktopDatePicker
                label="Filter by Date"
                value={filterDate}
                onChange={(newValue) => {
                  newValue !== null || newValue === ""
                    ? (setFilterDate(newValue), setCollapseDate(true))
                    : (setFilterDate(newValue), setCollapseDate(false));
                }}
                // onChange={(newValue) => setSearchApprovalByDate(newValue)}
                // onClick={() => {
                //   // debounceMountGetReviewBatchByDate(newValue);
                //   // approvalSearchByDate(newValue);
                //   // );
                // }}
                renderInput={(params) => (
                  <TextField
                    // layout="responsive"
                    size="small"
                    {...params}
                    sx={{
                      background: "white",
                      // mr: 1,
                      // width: "14vw",
                    }}
                  />
                )}
              />
            </FormControl>
          </Grid>

          <Collapse in={collapseDate}>
            <Grid item flex={2}>
              <FormControl
                fullWidth
                sx={{
                  ml: -3,
                  mt: 5.6,
                  width: "2%",
                  height: "2%",
                  // border: "2px solid green",
                }}
              >
                <Button
                  fullWidth
                  onClick={() => {
                    setFilterDate(null), deleteDate();
                  }}
                  sx={{
                    // border: "1px solid blue",

                    width: 1,
                    height: "1%",
                    borderRadius: 100,

                    maxWidth: "30px",
                    maxHeight: "30px",
                    minWidth: "30px",
                    minHeight: "30px",
                  }}
                >
                  <BackspaceIcon
                    sx={{ fontSize: 20, color: "grey" }}
                    size="small"
                  />
                </Button>
              </FormControl>
            </Grid>
          </Collapse>

          {/* <Collapse in={collapseRefresh}>
            <Grid item flex={2}>
              <FormControl
                fullWidth
                sx={{
                  ml: 6,
                  mt: 5.6,
                  width: "2%",
                  height: "2%",
                  // border: "2px solid green",
                }}
              >
                <Button
                  fullWidth
                  onClick={() => {
                   deleteRefresh();
                  }}
                  sx={{
                    // border: "1px solid blue",

                    width: 1,
                    height: "1%",
                    borderRadius: "100%",

                    maxWidth: "30px",
                    maxHeight: "30px",
                    minWidth: "30px",
                    minHeight: "30px",
                  }}
                >
                  <RefreshIcon
                    sx={{
                      fontSize: 27,
                      color: "white",
                      backgroundColor: "teal",
                      borderRadius: "100%",
                    }}
                    size="small"
                  />
                </Button>
              </FormControl>
            </Grid>
          </Collapse> */}

<Grow direction="down" in={collapseRefresh}>
            <Grid item flex={2}>
              <FormControl
                fullWidth
                sx={{
                  ml: 6,
                  mt: 5.6,
                  width: "2%",
                  height: "2%",
                  // border: "2px solid green",
                }}
              >
                <Button
                  variant="contained"
                  fullWidth
                  onClick={() => {
                   deleteRefresh();
                  }}
                  sx={{
                    // border: "1px solid blue",

                    width: 1,
                    height: "1%",
                    backgroundColor: "darkred",
                    // borderRadius: "100%",

                    maxWidth: "90px",
                    maxHeight: "30px",
                    minWidth: "90px",
                    minHeight: "30px",

                  }}
                >
                  CLEAR 
                  {/* <ClearIcon
                    sx={{
                      fontSize: 27,
                      color: "white",
                      backgroundColor: "red",
                      borderRadius: "100%",
                    }}
                    size="small"
                  /> */}
                </Button>
              </FormControl>
            </Grid>
          </Grow>


          <Grow in={collapseAllData}>
            <Grid item flex={1}>
              <FormControl
                fullWidth
                sx={{
                  ml: 6,
                  mt: 5.6,
                  width: "1%",
                  height: "2%",
                  // border: "2px solid green",
                }}
              >
                <Button
                variant="contained"
                size="large"
                  fullWidth
                  onClick={() => {
                  //  deleteRefresh();
                  getAllBatch();
                  }}
                  sx={{
                    // border: "1px solid blue",
                    // borderRadius: "90%",

                    minWidth: "150px",
                    // maxHeight: "30px",
                    // minWidth: "30px",
                    minHeight: "30px",
                    backgroundColor: "teal",
                  }}
                >
                  ALL DATA
                </Button>
              </FormControl>
            </Grid>
          </Grow>


          <Grid item flex={2}>
            {/* <Select
              label="Filter by Product"
              sx={{ ml: 3, mt: 5, width: "100%" }}
            ></Select> */}
          </Grid>
          <Grid item flex={2}>
            {/* <Select
              label="Filter by Product"
              sx={{ ml: 3, mt: 5, width: "100%" }}
            ></Select> */}
          </Grid>
        </Grid>
      </Grid>
      <Paper sx={{ mt: 3, ml: 3, mr: 2 }}>
        <Divider width="93%" objectFit="contain" sx={{ mt: 2 }} />
        <Divider width="93%" objectFit="contain" />
        <Table size="small">
          <TableHead>
            <TableRow>
              {tableHeader &&
                tableHeader.map((head, index) => (
                  <TableCell
                    sx={{
                      fontWeight: "600",
                      // textAlign:
                      //   head.name === "COA" || head.name === "Keterangan COA"
                      //     ? "left"
                      //     : "right",
                    }}
                    key={index}
                  >
                    {head.name}
                  </TableCell>
                ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {listApproval &&
              listApproval.map((item, index) => (
                <React.Fragment key={index}>
                  {item.scan_status === "O" || item.scan_status === "R" ? (
                    ""
                  ) : (
                    <TableRow>
                      <TableCell>
                        {/* <Link
                      href={`/general-ledger/${item.tahun}/${item.bulan}/${item.coa_id}`}
                    > */}
                        {item.scan_procode}
                        {/* </Link> */}
                      </TableCell>
                      <TableCell>{item.scan_proname}</TableCell>
                      <TableCell
                      // sx={{
                      //   textAlign: "right",
                      // }}
                      >
                        {/* {formatNumber(item.saldo_awal)} */}
                        {item.scan_batch}
                      </TableCell>
                      <TableCell
                      // sx={{
                      //   color: formatColor("DEBIT", item.total_debit),
                      //   textAlign: "right",
                      // }}
                      >
                        {/* {formatNumber(item.total_debit)} */}
                        {item.scan_status}
                      </TableCell>
                      <TableCell
                      // sx={{
                      //   color: formatColor("KREDIT", item.total_kredit),
                      //   textAlign: "right",
                      // }}
                      >
                        {/* {formatNumber(item.total_kredit)} */}
                        {/* {item.scan_submitteddate} */}
                      </TableCell>
                      <TableCell
                      // sx={{
                      //   color: formatColor("AKHIR", item.saldo_akhir),
                      //   textAlign: "right",
                      // }}
                      >
                        {/* {formatNumber(item.saldo_akhir)} */}
                        {/* {item.scan_submitdate} */}
                        {formatDate(item.scan_submitdate, "DD MMMM YYYY")}
                      </TableCell>
                      <TableCell
                      // sx={{
                      //   color: formatColor("AKHIR", item.saldo_akhir),
                      //   textAlign: "right",
                      // }}
                      >
                        {/* <Link> */}
                        <Button
                          variant="contained"
                          // startIcon={
                          //   <ArrowDownwardIcon sx={{ ml: 1 }} />
                          // }
                          size="large"
                          sx={{ mr: 2, backgroundColor: "#EDBE4B" }}
                          // onClick={
                          //   () => debounceMountDownloadPPNOUT(item)
                          //   // mountDownloadPPNOUT2()
                          // }
                          // href={`http://storage.googleapis.com/staging.cfu-main.appspot.com/sales-ppn-out/2022092712450492712.csv`}
                          onClick={() => detailApproval(item)}
                          // href="www.google.com"
                          // src="www.google.com"
                          // onClick={() => Google}
                        >
                          Detail
                        </Button>
                        {/* </Link> */}

                        {/* {item.scan_status === "U" ? (
                          ""
                        ) : ( */}
                        <Button
                          parameter
                          variant="contained"
                          sx={{ backgroundColor: "#4BA1B4", mr: 2 }}
                          // startIcon={<DeleteIcon sx={{ ml: 1 }} />}
                          size="large"
                          // onClick={() => mountDeletePPNOUT(item)}
                          // onClick={() => setModalDeletePPNOUT(true)}
                          // onClick={() => deletePPNOUT1(item)}
                          onClick={() => finishUploadToBPOM(item)}
                          disabled={item.scan_status == "U" ? disabledUploadReject : disabledDone}
                          // value={
                          //   item.scan_status === "U"
                          //     ? : ""
                          // }
                        >
                          Upload
                        </Button>
                        {/* )} */}

                        {/* {item.scan_status === "U" ? (
                          ""
                        ) : ( */}
                        <Button
                          parameter
                          variant="contained"
                          sx={{ backgroundColor: "red" }}
                          // startIcon={<DeleteIcon sx={{ ml: 1 }} />}
                          size="large"
                          // onClick={() => mountDeletePPNOUT(item)}
                          onClick={() => finishReject(item)}
                          // onClick={() => {rejectPackaging(item.scan_id)}}
                          disabled={item.scan_status == "U" ? disabledUploadReject : disabledDone}
                        >
                          Reject
                        </Button>
                        {/* )} */}
                      </TableCell>
                    </TableRow>
                  )}
                </React.Fragment>
              ))}
          </TableBody>
          <TableFooter>
            {/* <TableRow>
              <TablePagination
                rowsPerPageOptions={[10, 25, 50]}
                count={totalData}
                rowsPerPage={params.length}
                page={params.page}
                onPageChange={handlePageChange}
                onRowsPerPageChange={handleRowsPerPageChange}
              />
            </TableRow> */}
          </TableFooter>

          <Collapse in={collapseEmpty}>
            <Grid
            sx={{
              // border:"2px solid red",
              width:"100%",
              ml:"250%"}}>
                <Grid
                sx={{ 
                // border:"2px solid red
                mt:6,}}>
                <InfoIcon 
                sx={{ 
                mt:2,
                // border:"2px solid black"
                }}/>
                </Grid>
                <Grid sx={{ 
                  // border:"2px solid blue"
                  }}>
               
              <Typography
              sx={{
                // border:"2px solid red",
                mb:"30%",
                // ml:"200%",
                width:"100%",
                // border:"2px solid red",
                }}> 
                
                Data not found.
              </Typography>

              </Grid>
            </Grid>
            </Collapse>
          
        </Table>
      </Paper>
      <Modal open={modalCheckUploadToBPOM}>
        <Box sx={style}>
          <Grid>
            <Typography
              // sx={{ textAlign: "center", fontWeight: "bold" }}
              variant="h5"
              sx={{ fontWeight: 600, mb: 1 }}
            >
              Heads Up!
            </Typography>
            <Typography
            // sx={{ textAlign: "center", fontWeight: "bold" }}
            >
              Are you sure to upload this data:{"\n"} 
              {uploadItem.scan_proname} to BPOM web?
            </Typography>
            <Divider sx={{ my: 2 }}></Divider>
            <Grid>
              {/* <Divider sx={{ my: 2 }}></Divider> */}
              <Button
                variant="contained"
                sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
                onClick={() =>{setModalCheckUploadToBPOM(false), setModalFinishUploadToBPOM(true),  uploadToBpom(uploadItem.scan_id)}}
              >
                YES
              </Button>

              <Button
                variant="contained"
                sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                onClick={() => setModalCheckUploadToBPOM(false)}
              >
                NO
              </Button>
            </Grid>
          </Grid>
        </Box>
      </Modal>
      <Modal open={modalFinishUploadToBPOM}>
        <Box sx={style}>
          <Grid>
            <Typography
              // sx={{ textAlign: "center", fontWeight: "bold" }}
              variant="h5"
              sx={{ fontWeight: 600, mb: 1 }}
            >
              Congrats!
            </Typography>
            <Typography
            // sx={{ textAlign: "center", fontWeight: "bold" }}
            >
              Data successfully uploaded.
            </Typography>
            <Divider sx={{ my: 2 }}></Divider>
            <Grid>
              {/* <Divider sx={{ my: 2 }}></Divider> */}
              <Button
                variant="contained"
                sx={{ backgroundColor: "primary.main", marginLeft: "33em" }}
                onClick={() => setModalFinishUploadToBPOM(false)}
              >
                OK
              </Button>
            </Grid>
          </Grid>
        </Box>
      </Modal>

      <Modal open={modalCheckReject}>
        <Box sx={style}>
          <Grid>
            <Typography
              // sx={{ textAlign: "center", fontWeight: "bold" }}
              variant="h5"
              sx={{ fontWeight: 600, mb: 1 }}
            >
              Heads Up!
            </Typography>
            <Typography
            // sx={{ textAlign: "center", fontWeight: "bold" }}
            >
              Are you sure to reject this data?
            </Typography>
            <Divider sx={{ my: 2 }}></Divider>
            <Grid>
              {/* <Divider sx={{ my: 2 }}></Divider> */}
              <Button
                variant="contained"
                sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
                onClick={() =>{setModalCheckReject(false), setModalFinishReject(true),  rejectPackaging(rejectItem.scan_id)}}
              >
                YES
              </Button>

              <Button
                variant="contained"
                sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                onClick={() => setModalCheckReject(false)}
              >
                NO
              </Button>
            </Grid>
          </Grid>
        </Box>
      </Modal>
      <Modal open={modalFinishReject}>
        <Box sx={style}>
          <Grid>
            <Typography
              // sx={{ textAlign: "center", fontWeight: "bold" }}
              variant="h5"
              sx={{ fontWeight: 600, mb: 1 }}
            >
              Congrats!...
            </Typography>
            <Typography
            // sx={{ textAlign: "center", fontWeight: "bold" }}
            >
              Data successfully rejected.
            </Typography>
            <Divider sx={{ my: 2 }}></Divider>
            <Grid>
              {/* <Divider sx={{ my: 2 }}></Divider> */}
              <Button
                variant="contained"
                sx={{ backgroundColor: "primary.main", marginLeft: "33em" }}
                onClick={() => setModalFinishReject(false)}
              >
                OK
              </Button>
            </Grid>
          </Grid>
        </Box>
      </Modal>
    </Box>
  );
};

export default Approval;

// approval -> [id]

import {
  Box,
  Paper,
  Table,
  TableHead,
  FormControl,
  InputLabel,
  Select,
  Grid,
  Button,
  TextField,
  TableRow,
  TableCell,
  Typography,
  Modal,
  Divider,
  TableBody,
  MenuItem,
  Collapse,
  FormGroup,
  FormControlLabel,
  Checkbox,
} from "@mui/material";
import { useCallback, useEffect, useRef, useState } from "react";
import LogoutIcon from "@mui/icons-material/Logout";
import { AddCircle, CheckBox } from "@mui/icons-material";
import ArrowDropUpIcon from "@mui/icons-material/ArrowDropUp";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import qr from "../../services/qr";
import { debounce, set, isUndefined } from "lodash";
import { formatDate } from "../../utils/text";
import { detailApprovalBool, setDetailApprovalBool } from "./index";
import { useRouter } from "next/router";
import KeyboardBackspaceIcon from "@mui/icons-material/KeyboardBackspace";
import { getStorage } from "../../utils/storage";

const ScanNewBatch = () => {
  const [listMasterBox, setListMasterBox] = useState([]);
  const [selectProduct, setSelectProduct] = useState("");
  const [selectBatchNumber, setSelectBatchNumber] = useState("");
  const [modalScanBatch, setModalScanBatch] = useState(false);
  const [flag, setFlag] = useState("D");
  const test = "12346 - Name of Product 2";
  const test1 = "AAAA-123456-01";
  const test2 = "10 UB";
  const test3 = "DBL653783700870A1";
  const test4 = "03 January 2023";
  const test5 = "23 June 2025";
  const [collapseDetailScanNewBatch, setCollapseDetailScanNewBatch] =
    useState(true);

  const [masterCodeBox, setMasterCodeBox] = useState("");
  const [unitBox1, setUnitBox1] = useState("");
  const [unitBox2, setUnitBox2] = useState("");
  const [unitBox3, setUnitBox3] = useState("");
  const [unitBox4, setUnitBox4] = useState("");
  const [unitBox5, setUnitBox5] = useState("");
  const [unitBox6, setUnitBox6] = useState("");
  const [unitBox7, setUnitBox7] = useState("");
  const [unitBox8, setUnitBox8] = useState("");
  const [unitBox9, setUnitBox9] = useState("");
  const [unitBox10, setUnitBox10] = useState("");

  const [masterBoxDisable, setMasterBoxDisable] = useState(true);
  const [unitBox1Disabled, setUnitBox1Disabled] = useState(true);
  const [unitBox2Disabled, setUnitBox2Disabled] = useState(true);
  const [unitBox3Disabled, setUnitBox3Disabled] = useState(true);
  const [unitBox4Disabled, setUnitBox4Disabled] = useState(true);
  const [unitBox5Disabled, setUnitBox5Disabled] = useState(true);
  const [unitBox6Disabled, setUnitBox6Disabled] = useState(true);
  const [unitBox7Disabled, setUnitBox7Disabled] = useState(true);
  const [unitBox8Disabled, setUnitBox8Disabled] = useState(true);
  const [unitBox9Disabled, setUnitBox9Disabled] = useState(true);
  const [unitBox10Disabled, setUnitBox10Disabled] = useState(true);

  const [modalStartScanNewBatch, setModalStartScanNewBatch] = useState(false);
  const [modalScanningPackagingNotFull, setModalScanningPackagingNotFull] =
    useState(false);
  const [
    modalScanningPackagingNotFullFinish,
    setModalScanningPackagingNotFullFinish,
  ] = useState(false);
  const [modalPackingSelesai, setModalPackingSelesai] = useState(false);
  const [modalPackingSelesai2, setModalPackingSelesai2] = useState(false);
  const [modalValidationSaveAndFinish, setModalValidationSaveAndFinish] =
    useState(false);
  const [modalValidatonUnitBox10, setModalValidatonUnitBox10] = useState(false);
  const [modalSeeMbList, setModalSeeMbList] = useState(false);

  const [collapseDeleteUnitBox1, setCollapseDeleteUnitBox1] = useState(false);
  const [collapseDeleteUnitBox2, setCollapseDeleteUnitBox2] = useState(false);
  const [collapseDeleteUnitBox3, setCollapseDeleteUnitBox3] = useState(false);
  const [collapseDeleteUnitBox4, setCollapseDeleteUnitBox4] = useState(false);
  const [collapseDeleteUnitBox5, setCollapseDeleteUnitBox5] = useState(false);
  const [collapseDeleteUnitBox6, setCollapseDeleteUnitBox6] = useState(false);
  const [collapseDeleteUnitBox7, setCollapseDeleteUnitBox7] = useState(false);
  const [collapseDeleteUnitBox8, setCollapseDeleteUnitBox8] = useState(false);
  const [collapseDeleteUnitBox9, setCollapseDeleteUnitBox9] = useState(false);
  const [collapseDeleteUnitBox10, setCollapseDeleteUnitBox10] = useState(false);

  const [collapseEditUnitBox1, setCollapseEditUnitBox1] = useState(false);
  const [collapseEditUnitBox2, setCollapseEditUnitBox2] = useState(false);
  const [collapseEditUnitBox3, setCollapseEditUnitBox3] = useState(false);
  const [collapseEditUnitBox4, setCollapseEditUnitBox4] = useState(false);
  const [collapseEditUnitBox5, setCollapseEditUnitBox5] = useState(false);
  const [collapseEditUnitBox6, setCollapseEditUnitBox6] = useState(false);
  const [collapseEditUnitBox7, setCollapseEditUnitBox7] = useState(false);
  const [collapseEditUnitBox8, setCollapseEditUnitBox8] = useState(false);
  const [collapseEditUnitBox9, setCollapseEditUnitBox9] = useState(false);
  const [collapseEditUnitBox10, setCollapseEditUnitBox10] = useState(false);

  const [collapseSaveUnitBox1, setCollapseSaveUnitBox1] = useState(false);
  const [collapseSaveUnitBox2, setCollapseSaveUnitBox2] = useState(false);
  const [collapseSaveUnitBox3, setCollapseSaveUnitBox3] = useState(false);
  const [collapseSaveUnitBox4, setCollapseSaveUnitBox4] = useState(false);
  const [collapseSaveUnitBox5, setCollapseSaveUnitBox5] = useState(false);
  const [collapseSaveUnitBox6, setCollapseSaveUnitBox6] = useState(false);
  const [collapseSaveUnitBox7, setCollapseSaveUnitBox7] = useState(false);
  const [collapseSaveUnitBox8, setCollapseSaveUnitBox8] = useState(false);
  const [collapseSaveUnitBox9, setCollapseSaveUnitBox9] = useState(false);
  const [collapseSaveUnitBox10, setCollapseSaveUnitBox10] = useState(false);

  // const tempArrEdit = [];

  const [collapsePackagingSelesaiButton, setCollapsePackagingSelesaiButton] =
    useState(false);
  const [
    collapseDetailScanNewBatchButtonUp,
    setCollapseDetailScanNewBatchButtonUp,
  ] = useState(true);
  const [
    collapseDetailScanNewBatchButtonDown,
    setCollapseDetailScanNewBatchButtonDown,
  ] = useState(false);

  const unitBox1Ref = useRef();
  const unitBox2Ref = useRef();
  const unitBox3Ref = useRef();
  const unitBox4Ref = useRef();
  const unitBox5Ref = useRef();
  const unitBox6Ref = useRef();
  const unitBox7Ref = useRef();
  const unitBox8Ref = useRef();
  const unitBox9Ref = useRef();
  const unitBox10Ref = useRef();
  // const unitBox11Ref = useRef();

  const [listProduct, setListProduct] = useState([]);
  const [listHeader, setListHeader] = useState("");
  const [listSeeMB, setListSeeMB] = useState([]);
  const [listScanningPackaging, setListScanningPackaging] = useState([]);

  const [payloadHeader, setPayloadHeader] = useState([]);

  const [selectedProdDate, setSelectedProdDate] = useState("");
  const [selectedExpDate, setSelectedExpDate] = useState("");

  const [checkedSample, setCheckedSample] = useState(false);

  const [detailBool, setDetailBool] = useState(false);

  const [disableUnitBox1, setDisableUnitBox1] = useState(true);
  const [disableUnitBox2, setDisableUnitBox2] = useState(true);
  const [disableUnitBox3, setDisableUnitBox3] = useState(true);
  const [disableUnitBox4, setDisableUnitBox4] = useState(true);
  const [disableUnitBox5, setDisableUnitBox5] = useState(true);
  const [disableUnitBox6, setDisableUnitBox6] = useState(true);
  const [disableUnitBox7, setDisableUnitBox7] = useState(true);
  const [disableUnitBox8, setDisableUnitBox8] = useState(true);
  const [disableUnitBox9, setDisableUnitBox9] = useState(true);
  const [disableUnitBox10, setDisableUnitBox10] = useState(true);

  const router = useRouter();

  const [noID, setNoID] = useState("");

  const accessList = getStorage("access_list");

  useEffect(() => {
    if (!isUndefined(accessList)) {
      var parsedAccess = JSON.parse(accessList);
      if (
        !parsedAccess["QR_BPOM_UPLOAD_TO_BPOM"].includes(
          "QR_BPOM_UPLOAD_TO_BPOM"
        )
      ) {
        router.push("/403");
      }
    } else {
      router.push("/403");
    }
  }, [accessList]);

  // useEffect(() => {
  //   console.log("GetListMasterBoxUseEffect", listMasterBox)
  // },[listMasterBox])

  // useEffect(() => {
  //   if (flag === "D"){
  //   // if (listMasterBox === 0 || listMasterBox === "") {
  //   //   setFlag("D");
  //   //   setCollapsePackagingSelesaiButton(false);

  //   //   console.log("listHeaderStart2MasterBoxNull", listHeader);
  //   //   console.log("setCollapsePackagingSelesaiButtonTrue", collapsePackagingSelesaiButton);

  //   // }

  //   if (listMasterBox !== 0 || listMasterBox !== "") {
  //     setFlag("D");
  //     setCollapsePackagingSelesaiButton(false);
  //     console.log("testPayload", payloadHeader);
  //     console.log("listHeaderStart2MasterBoxNotNull", listHeader);

  //   }
  // }
  // },[flag,listMasterBox,collapsePackagingSelesaiButton])

  // const handleChange = (event, newValue) => {
  //   setValue(newValue);
  // };
  async function start(item) {
    if (selectBatchNumber === "" || selectBatchNumber === undefined) {
      setModalScanBatch(true);
    }
    if (selectBatchNumber !== "") {
      setModalStartScanNewBatch(true);
    }

    // if (masterCodeBox === "") {
    //   setModalValidationSaveAndFinish(true);
    // }
    console.log("selectBatchNumber", selectBatchNumber);
    console.log("getproduct", listProduct);
  }

  async function start2() {
    debounceMountCreateHeaderNewBatch();
    setFlag("D");
  }

  async function hideDetailScanNewBatch() {
    // if (
    //   (selectProduct === 0) &
    //   (selectProduct === 0) &
    //   (selectBatchNumber === "") &
    //   (selectBatchNumber === 0)
    // ) {
    //   // setModalScanBatch(true);
    // }
    // console.log("pro_code", payloadHeader.pro_code);
    // console.log("pro_name", payloadHeader.pro_name);
    // console.log("selectBatchNumber", selectBatchNumber);
    console.log("listHeader", listHeader);
    setCollapseDetailScanNewBatch(false);
    setCollapseDetailScanNewBatchButtonUp(false);
    setCollapseDetailScanNewBatchButtonDown(true);
  }

  async function showDetailScanNewBatch() {
    // if (
    //   (selectProduct === 0) &
    //   (selectProduct === 0) &
    //   (selectBatchNumber === "") &
    //   (selectBatchNumber === 0)
    // ) {
    //   // setModalScanBatch(true);
    // }
    setCollapseDetailScanNewBatch(true);
    setCollapseDetailScanNewBatchButtonUp(true);
    setCollapseDetailScanNewBatchButtonDown(false);
  }

  async function packaging() {
    setFlag("P");
    setCollapseSaveUnitBox1(false);
    setCollapseSaveUnitBox2(false);
    setCollapseSaveUnitBox3(false);
    setCollapseSaveUnitBox4(false);
    setCollapseSaveUnitBox5(false);
    setCollapseSaveUnitBox6(false);
    setCollapseSaveUnitBox7(false);
    setCollapseSaveUnitBox8(false);
    setCollapseSaveUnitBox9(false);
    setCollapseSaveUnitBox10(false);
  }

  useEffect(() => {
    console.log("detailBool", detailBool);
    // console.log("detailmbsize", mbSizeDetail);
    if (masterCodeBox !== 0 && masterCodeBox !== "" && detailBool !== true) {
      setUnitBox1Disabled(false);
      // unitBox1Ref.focus();
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox1 !== 0 && unitBox1 !== "" && detailBool !== true) {
      setUnitBox2Disabled(false);
      // unitBox2Ref.focus();
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox1(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox1(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox2 !== 0 && unitBox2 !== "" && detailBool !== true) {
      setUnitBox3Disabled(false);
      // unitBox3Ref.focus();
      // setCollapseDeleteUnitBox2(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox2(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox2(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox3 !== 0 && unitBox3 !== "") {
      setUnitBox4Disabled(false);
      // unitBox4Ref.focus();
      // setCollapseDeleteUnitBox3(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox3(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox3(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox4 !== 0 && unitBox4 !== "") {
      setUnitBox5Disabled(false);
      // unitBox5Ref.focus();
      // setCollapseDeleteUnitBox4(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox4(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox4(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox5 !== 0 && unitBox5 !== "") {
      setUnitBox6Disabled(false);
      // unitBox6Ref.focus();
      // setCollapseDeleteUnitBox5(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox5(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox5(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox6 !== 0 && unitBox6 !== "") {
      setUnitBox7Disabled(false);
      // unitBox7Ref.focus();
      // setCollapseDeleteUnitBox6(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox6(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox6(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox7 !== 0 && unitBox7 !== "") {
      setUnitBox8Disabled(false);
      // unitBox8Ref.focus();
      // setCollapseDeleteUnitBox7(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox7(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox7(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox8 !== 0 && unitBox8 !== "") {
      setUnitBox9Disabled(false);
      // unitBox9Ref.focus();
      // setCollapseDeleteUnitBox8(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox8(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox8(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox9 !== 0 && unitBox9 !== "") {
      setUnitBox10Disabled(false);
      // unitBox10Ref.focus();
      // setCollapseDeleteUnitBox9(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox9(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox9(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    if (unitBox10 !== 0 && unitBox10 !== "") {
      // setUnitBox10Disabled(false)
      // unitBox11Ref.focus();
      // setCollapseDeleteUnitBox10(true);
      // if (detailBool !== true) {
      setCollapseDeleteUnitBox10(true);
      // }
      // if (detailBool === true) {
      //   setCollapseEditUnitBox10(true);
      // }
      // console.log("unitbox1",masterCodeBox)
    }
    // console.log("testget", debounceMountGetListAllProduct());
    if (detailBool === true) {
      // setCollapseEditUnitBox1(true);
      // setCollapseEditUnitBox2(true);
      // setCollapseEditUnitBox3(true);
      // setCollapseEditUnitBox4(true);
      // setCollapseEditUnitBox5(true);
      // setCollapseEditUnitBox6(true);
      // setCollapseEditUnitBox7(true);
      // setCollapseEditUnitBox8(true);
      // setCollapseEditUnitBox9(true);
      // setCollapseEditUnitBox10(true);

      // if (unitBox1Edit !== "" || unitBox1Edit !== 0) {
      //   setCollapseEditUnitBox1(true);
      // }
      // if (unitBox2Edit !== "" || unitBox2Edit !== 0) {
      //   setCollapseEditUnitBox2(true);
      // }
      // if (unitBox3Edit !== "" || unitBox3Edit !== 0) {
      //   setCollapseEditUnitBox3(true);
      // }
      // if (unitBox4Edit !== "" || unitBox4Edit !== 0) {
      //   setCollapseEditUnitBox4(true);
      // }
      // if (unitBox5Edit !== "" || unitBox5Edit !== 0) {
      //   console.log("data5", unitBox5Edit);
      //   setCollapseEditUnitBox5(true);
      // }
      // if (unitBox6Edit !== "" || unitBox6Edit !== 0) {
      //   console.log("data6", unitBox6Edit);
      //   setCollapseEditUnitBox6(true);
      // }
      // if (unitBox7Edit !== "" || unitBox7Edit !== 0) {
      //   setCollapseEditUnitBox7(true);
      // }
      // if (unitBox8Edit !== "" || unitBox8Edit !== 0) {
      //   setCollapseEditUnitBox8(true);
      // }
      // if (unitBox9Edit !== "" || unitBox9Edit !== 0) {
      //   setCollapseEditUnitBox9(true);
      // }
      // if (unitBox10Edit !== "" || unitBox10Edit !== 0) {
      //   setCollapseEditUnitBox10(true);
      // }

      setMasterBoxDisable(true);
    }
    if (flag === "Y") {
      debounceMountGetListAllProduct();
      console.log("getlistallproduct");
    }

    // ---------- validasi button edit di menu scanning packaging ----------
    // if (detailBool === true) {
    //   if (unitBox1Edit === "" || unitBox1Edit === 0) {
    //     setCollapseEditUnitBox1(false);
    //   }
    //   if (unitBox2Edit === "" || unitBox2Edit === 0) {
    //     setCollapseEditUnitBox2(false);
    //   }
    //   if (unitBox3Edit === "" || unitBox3Edit === 0) {
    //     setCollapseEditUnitBox3(false);
    //   }
    //   if (unitBox4Edit === "" || unitBox4Edit === 0) {
    //     setCollapseEditUnitBox4(false);
    //   }
    //   if (unitBox5Edit === "" || unitBox5Edit === 0) {
    //     setCollapseEditUnitBox5(false);
    //   }
    //   if (unitBox6Edit === "" || unitBox6Edit === 0) {
    //     setCollapseEditUnitBox6(false);
    //   }
    //   if (unitBox7Edit === "" || unitBox7Edit === 0) {
    //     setCollapseEditUnitBox7(false);
    //   }
    //   if (unitBox8Edit === "" || unitBox8Edit === 0) {
    //     setCollapseEditUnitBox8(false);
    //   }
    //   if (unitBox9Edit === "" || unitBox9Edit === 0) {
    //     setCollapseEditUnitBox9(false);
    //   }
    //   if (unitBox10Edit === "" || unitBox10Edit === 0) {
    //     setCollapseEditUnitBox10(false);
    //   }
    // }

    if (detailBool === false) {
      setCollapseEditUnitBox1(false);
      setCollapseEditUnitBox2(false);
      setCollapseEditUnitBox3(false);
      setCollapseEditUnitBox4(false);
      setCollapseEditUnitBox5(false);
      setCollapseEditUnitBox6(false);
      setCollapseEditUnitBox7(false);
      setCollapseEditUnitBox8(false);
      setCollapseEditUnitBox9(false);
      setCollapseEditUnitBox10(false);

      setProductEdit([]);
    }
    // ---------------------------------------------------------------------
  }, [
    masterCodeBox,
    unitBox1Disabled,
    unitBox1,
    unitBox2Disabled,
    unitBox2,
    unitBox3Disabled,
    unitBox3,
    unitBox4Disabled,
    unitBox4,
    unitBox5Disabled,
    unitBox5,
    unitBox6Disabled,
    unitBox6,
    unitBox7Disabled,
    unitBox7,
    unitBox8Disabled,
    unitBox8,
    unitBox9Disabled,
    unitBox9,
    unitBox10Disabled,
    unitBox10,
    detailBool,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,
  ]);

  useEffect(() => {
    // if (detailApprovalBool === true) {
    //   setFlag("P");
    //   setDetailBool(true);
    //   debounceMountGetScanningPackagingData(
    //     listHeader.scan_id,
    //     mbSizeDetail.scan_mbid
    //   );
    //   // setMbsizeDetail(item);
    //   // console.log("scanid", listHeader.scan_id);
    //   // console.log("itemMBID", item);
    //   // console.log("listScanningPackaging", listScanningPackaging);
    //   // console.log("product", product);
    //   // console.log("productEdit", productEdit);
    //   setCollapseSaveUnitBox1(false);
    //   setCollapseSaveUnitBox2(false);
    //   setCollapseSaveUnitBox3(false);
    //   setCollapseSaveUnitBox4(false);
    //   setCollapseSaveUnitBox5(false);
    //   setCollapseSaveUnitBox6(false);
    //   setCollapseSaveUnitBox7(false);
    //   setCollapseSaveUnitBox8(false);
    //   setCollapseSaveUnitBox9(false);
    //   setCollapseSaveUnitBox10(false);
    //   console.log("boolApproval-ScanNewBatch", detailApprovalBool);
    //   // setDetailApprovalBool(false);
    // }
    console.log("boolApproval-ScanNewBatch", detailApprovalBool);
  }, [
    detailApprovalBool,
    // flag,
    // detailBool,
    // listHeader,
    // mbSizeDetail,
    // collapseSaveUnitBox1,
    // collapseSaveUnitBox2,
    // collapseSaveUnitBox3,
    // collapseSaveUnitBox4,
    // collapseSaveUnitBox5,
    // collapseSaveUnitBox6,
    // collapseSaveUnitBox7,
    // collapseSaveUnitBox8,
    // collapseSaveUnitBox9,
    // collapseSaveUnitBox10,
  ]);

  async function saveAndContinueButton() {
    if (
      (unitBox1 !== 0 && unitBox1 !== "") ||
      (unitBox2 !== 0 && unitBox2 !== "") ||
      (unitBox3 !== 0 && unitBox3 !== "") ||
      (unitBox4 !== 0 && unitBox4 !== "") ||
      (unitBox5 !== 0 && unitBox5 !== "") ||
      (unitBox6 !== 0 && unitBox6 !== "") ||
      (unitBox7 !== 0 && unitBox7 !== "") ||
      (unitBox8 !== 0 && unitBox8 !== "") ||
      (unitBox9 !== 0 && unitBox9 !== "")
    ) {
      setModalScanningPackagingNotFull(true);
    }
    if (masterCodeBox === "") {
      setModalValidationSaveAndFinish(true);
    }
    if (unitBox10 !== 0 && unitBox10 !== "") {
      // mountCreateDetailNewBatch();
      console.log("testmasooooooooook");
      saveAndContinueFinish();
    }
  }

  async function saveAndContinueFinish() {
    debounceMountGetListMasterBox(listHeader.scan_id);
    // if (listMasterBox === null || listMasterBox === "") {
    //   // setFlag("D");
    //   setCollapsePackagingSelesaiButton(true);

    //   // console.log("listHeaderStart2MasterBoxNull", listHeader);
    // }

    // if (listMasterBox !== 0 || listMasterBox !== "") {
    // setFlag("D");
    // setCollapsePackagingSelesaiButton(false);
    // console.log("testPayload", payloadHeader);
    // console.log("listHeaderStart2MasterBoxNotNull", listHeader);
    // }

    setCollapsePackagingSelesaiButton(true);
    console.log(
      "setCollapsePackagingSelesaiButton",
      collapsePackagingSelesaiButton
    );
    mountCreateDetailNewBatch();

    setMasterCodeBox("");
    setUnitBox1("");
    setUnitBox2("");
    setUnitBox3("");
    setUnitBox4("");
    setUnitBox5("");
    setUnitBox6("");
    setUnitBox7("");
    setUnitBox8("");
    setUnitBox9("");
    setUnitBox10("");

    setCollapseDeleteUnitBox1(false);
    setCollapseDeleteUnitBox2(false);
    setCollapseDeleteUnitBox3(false);
    setCollapseDeleteUnitBox4(false);
    setCollapseDeleteUnitBox5(false);
    setCollapseDeleteUnitBox6(false);
    setCollapseDeleteUnitBox7(false);
    setCollapseDeleteUnitBox8(false);
    setCollapseDeleteUnitBox9(false);
    setCollapseDeleteUnitBox10(false);

    setUnitBox1Disabled(true);
    setUnitBox2Disabled(true);
    setUnitBox3Disabled(true);
    setUnitBox4Disabled(true);
    setUnitBox5Disabled(true);
    setUnitBox6Disabled(true);
    setUnitBox7Disabled(true);
    setUnitBox8Disabled(true);
    setUnitBox9Disabled(true);
    setUnitBox10Disabled(true);

    setModalScanningPackagingNotFull(false);
    setModalScanningPackagingNotFullFinish(false);

    setDetailBool(false);
  }

  const style = {
    position: "absolute",
    top: "25%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 600,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    pt: 2,
    px: 4,
    pb: 3,
  };

  async function deleteUnitBox1() {
    setUnitBox1("");
    setCollapseDeleteUnitBox1(false);
    // setUnitBox2Disabled(true)
    // setUnitBox3Disabled(true)
    // setUnitBox4Disabled(true)
    // setUnitBox5Disabled(true)
    // setUnitBox6Disabled(true)
    // setUnitBox7Disabled(true)
    // setUnitBox8Disabled(true)
    // setUnitBox9Disabled(true)
    // setUnitBox10Disabled(true)
  }

  async function deleteUnitBox2() {
    setUnitBox2("");
    setCollapseDeleteUnitBox2(false);
    // setUnitBox3Disabled(true)
    // setUnitBox4Disabled(true)
    // setUnitBox5Disabled(true)
    // setUnitBox6Disabled(true)
    // setUnitBox7Disabled(true)
    // setUnitBox8Disabled(true)
    // setUnitBox9Disabled(true)
    // setUnitBox10Disabled(true)
  }

  async function deleteUnitBox3() {
    setUnitBox3("");
    setCollapseDeleteUnitBox3(false);
    // setUnitBox4Disabled(true)
    // setUnitBox5Disabled(true)
    // setUnitBox6Disabled(true)
    // setUnitBox7Disabled(true)
    // setUnitBox8Disabled(true)
    // setUnitBox9Disabled(true)
    // setUnitBox10Disabled(true)
  }

  async function deleteUnitBox4() {
    setUnitBox4("");
    setCollapseDeleteUnitBox4(false);
    // setUnitBox5Disabled(true)
    // setUnitBox6Disabled(true)
    // setUnitBox7Disabled(true)
    // setUnitBox8Disabled(true)
    // setUnitBox9Disabled(true)
    // setUnitBox10Disabled(true)
  }

  async function deleteUnitBox5() {
    setUnitBox5("");
    setCollapseDeleteUnitBox5(false);
    // setUnitBox6Disabled(true)
    // setUnitBox7Disabled(true)
    // setUnitBox8Disabled(true)
    // setUnitBox9Disabled(true)
    // setUnitBox10Disabled(true)
  }

  async function deleteUnitBox6() {
    setUnitBox6("");
    setCollapseDeleteUnitBox6(false);
    // setUnitBox7Disabled(true)
    // setUnitBox8Disabled(true)
    // setUnitBox9Disabled(true)
    // setUnitBox10Disabled(true)
  }

  async function deleteUnitBox7() {
    setUnitBox7("");
    setCollapseDeleteUnitBox7(false);
    // setUnitBox8Disabled(true)
    // setUnitBox9Disabled(true)
    // setUnitBox10Disabled(true)
    // unitBox7Ref.focus();
  }

  async function deleteUnitBox8() {
    setUnitBox8("");
    setCollapseDeleteUnitBox8(false);
    // setUnitBox9Disabled(true)
    // setUnitBox10Disabled(true)
  }

  async function deleteUnitBox9() {
    setUnitBox9("");
    setCollapseDeleteUnitBox9(false);
    // setUnitBox10Disabled(true)
  }

  async function deleteUnitBox10() {
    setUnitBox10("");
    setCollapseDeleteUnitBox10(false);
  }

  // ------- Edit Unit Box Function -------

  async function editUnitBox1() {
    setUnitBox1Disabled(false);
    setCollapseEditUnitBox1(false);
    setCollapseSaveUnitBox1(true);
    // if (collapseEditUnitBox1 === false) {
    setUnitBox1Edit("");
    // }
    console.log("product", product);
    console.log("savebutton(click edit)", collapseSaveUnitBox1);
  }
  async function editUnitBox2() {
    setUnitBox2Disabled(false);
    setCollapseEditUnitBox2(false);
    setCollapseSaveUnitBox2(true);
    setUnitBox2Edit("");
  }
  async function editUnitBox3() {
    setUnitBox3Disabled(false);
    setCollapseEditUnitBox3(false);
    setCollapseSaveUnitBox3(true);
    setUnitBox3Edit("");
  }
  async function editUnitBox4() {
    setUnitBox4Disabled(false);
    setCollapseEditUnitBox4(false);
    setCollapseSaveUnitBox4(true);
    setUnitBox4Edit("");
  }
  async function editUnitBox5() {
    setUnitBox5Disabled(false);
    setCollapseEditUnitBox5(false);
    setCollapseSaveUnitBox5(true);
    setUnitBox5Edit("");
  }
  async function editUnitBox6() {
    setUnitBox1Disabled(false);
    setCollapseEditUnitBox6(false);
    setCollapseSaveUnitBox6(true);
    setUnitBox6Edit("");
  }
  async function editUnitBox7() {
    setUnitBox7Disabled(false);
    setCollapseEditUnitBox7(false);
    setCollapseSaveUnitBox7(true);
    setUnitBox7Edit("");
  }
  async function editUnitBox8() {
    setUnitBox8Disabled(false);
    setCollapseEditUnitBox8(false);
    setCollapseSaveUnitBox8(true);
    setUnitBox8Edit("");
  }
  async function editUnitBox9() {
    setUnitBox9Disabled(false);
    setCollapseEditUnitBox9(false);
    setCollapseSaveUnitBox9(true);
    setUnitBox9Edit("");
  }
  async function editUnitBox10() {
    setUnitBox10Disabled(false);
    setCollapseEditUnitBox10(false);
    setCollapseSaveUnitBox10(true);
    setUnitBox10Edit("");
  }
  // --------------------------------------

  // -------- Save Unit Box Button Function --------
  // const tempArrEdit = [];
  async function saveUnitBox1() {
    setUnitBox1Disabled(true);
    setCollapseEditUnitBox1(true);
    setCollapseSaveUnitBox1(false);
    // if (unitBox1Edit === "") {
    //   setProductEdit(listScanningPackaging[0].scan_ubid);
    //   setUnitBox1(listScanningPackaging[0].scan_ubid);
    //   // tempArrEdit.push(unitBox1Edit);
    //   tempArrEdit.push(unitBox1Edit);
    // }
    // setUnitBox1Edit(listScanningPackaging[0].scan_ubid);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    // if (unitBox1Edit !== "") {
    //   tempArrEdit.push(unitBox1Edit);
    // }
    // if (unitBox1Edit === "") {
    //   setUnitBox1Edit(product[0]);
    //   tempArrEdit.push(product[0]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox2() {
    setUnitBox2Disabled(true);
    setCollapseEditUnitBox2(true);
    setCollapseSaveUnitBox2(false);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    // if (unitBox2Edit !== "") {
    //   tempArrEdit.push(unitBox2Edit);
    // }
    // if (unitBox2Edit === "") {
    //   setUnitBox2Edit(product[1]);
    //   tempArrEdit.push(product[1]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox3() {
    setUnitBox3Disabled(true);
    setCollapseEditUnitBox3(true);
    setCollapseSaveUnitBox3(false);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    // if (unitBox3Edit !== "") {
    //   tempArrEdit.push(unitBox3Edit);
    // }
    // if (unitBox3Edit === "") {
    //   setUnitBox3Edit(product[2]);
    //   tempArrEdit.push(product[2]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox4() {
    setUnitBox4Disabled(true);
    setCollapseEditUnitBox4(true);
    setCollapseSaveUnitBox4(false);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    // if (unitBox4Edit !== "") {
    //   tempArrEdit.push(unitBox4Edit);
    // }
    // if (unitBox4Edit === "") {
    //   setUnitBox4Edit(product[3]);
    //   tempArrEdit.push(product[3]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox5() {
    setUnitBox5Disabled(true);
    setCollapseEditUnitBox5(true);
    setCollapseSaveUnitBox5(false);
    console.log("productEdit", productEdit);
    console.log("saveButton", collapseSaveUnitBox1);
    console.log("unitBox1Edit(click save)", unitBox1Edit);
    // if (unitBox5Edit !== "") {
    //   tempArrEdit.push(unitBox5Edit);
    // }
    // if (unitBox5Edit === "") {
    //   setUnitBox5Edit(product[4]);
    //   tempArrEdit.push(product[4]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox6() {
    setUnitBox6Disabled(true);
    setCollapseEditUnitBox6(true);
    setCollapseSaveUnitBox6(false);
    // if (unitBox6Edit !== "") {
    //   tempArrEdit.push(unitBox6Edit);
    // }
    // if (unitBox6Edit === "") {
    //   setUnitBox6Edit(product[5]);
    //   tempArrEdit.push(product[5]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox7() {
    setUnitBox7Disabled(true);
    setCollapseEditUnitBox7(true);
    setCollapseSaveUnitBox7(false);
    // if (unitBox7Edit !== "") {
    //   tempArrEdit.push(unitBox7Edit);
    // }
    // if (unitBox7Edit === "") {
    //   setUnitBox7Edit(product[6]);
    //   tempArrEdit.push(product[6]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox8() {
    setUnitBox8Disabled(true);
    setCollapseEditUnitBox8(true);
    setCollapseSaveUnitBox8(false);
    // if (unitBox8Edit !== "") {
    //   tempArrEdit.push(unitBox8Edit);
    // }
    // if (unitBox8Edit === "") {
    //   setUnitBox8Edit(product[7]);
    //   tempArrEdit.push(product[7]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox9() {
    setUnitBox9Disabled(true);
    setCollapseEditUnitBox9(true);
    setCollapseSaveUnitBox9(false);
    // if (unitBox9Edit !== "") {
    //   tempArrEdit.push(unitBox9Edit);
    // }
    // if (unitBox9Edit === "") {
    //   setUnitBox9Edit(product[8]);
    //   tempArrEdit.push(product[8]);
    // }
    // setProductEdit(tempArrEdit);
  }
  async function saveUnitBox10() {
    setUnitBox10Disabled(true);
    setCollapseEditUnitBox10(true);
    setCollapseSaveUnitBox10(false);
    // if (unitBox10Edit !== "") {
    //   tempArrEdit.push(unitBox10Edit);
    // }
    // if (unitBox10Edit === "") {
    //   setUnitBox10Edit(product[9]);
    //   tempArrEdit.push(product[9]);
    // }
    // setProductEdit(tempArrEdit);
  }
  // --------------------------------------------------

  async function packingFinish() {
    setModalPackingSelesai(true);
  }

  async function packingFinishModal() {
    setModalPackingSelesai2(false);
    setModalPackingSelesai(false);
    setFlag("Y");
    setModalStartScanNewBatch(false);
  }

  async function finishScanningPackaging() {
    if (detailBool !== true) {
      if (
        (unitBox1 !== 0 && unitBox1 !== "") ||
        (unitBox2 !== 0 && unitBox2 !== "") ||
        (unitBox3 !== 0 && unitBox3 !== "") ||
        (unitBox4 !== 0 && unitBox4 !== "") ||
        (unitBox5 !== 0 && unitBox5 !== "") ||
        (unitBox6 !== 0 && unitBox6 !== "") ||
        (unitBox7 !== 0 && unitBox7 !== "") ||
        (unitBox8 !== 0 && unitBox8 !== "") ||
        (unitBox9 !== 0 && unitBox9 !== "")
      ) {
        setModalScanningPackagingNotFullFinish(true);
        // setFlag("D");
      }
      if (masterCodeBox === "") {
        setModalValidationSaveAndFinish(true);
      }
      if (unitBox10 !== 0 && unitBox10 !== "") {
        // if (masterCodeBox !== "") {
        setFlag("D");
        console.log("product", product);
        saveAndContinueFinish();
      }
      // if (detailBool === true) {

      // }
    }

    if (detailBool === true) {
      setFlag("D");
      mountUpdateUBID();
      setDetailBool(false);
      setProduct([]);
      // setProductEdit([]);
      setCollapseSaveUnitBox1(true);
      setCollapseSaveUnitBox2(true);
      setCollapseSaveUnitBox3(true);
      setCollapseSaveUnitBox4(true);
      setCollapseSaveUnitBox5(true);
      setCollapseSaveUnitBox6(true);
      setCollapseSaveUnitBox7(true);
      setCollapseSaveUnitBox8(true);
      setCollapseSaveUnitBox9(true);
      setCollapseSaveUnitBox10(true);
    }
  }

  // const listMasterBox = [
  //   {
  //     scan_mbid: "MBCODE001",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE002",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE003",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE004",
  //     scan_ubid: "10",
  //   },
  //   {
  //     scan_mbid: "MBCODE005",
  //     scan_ubid: "10",
  //   },
  // ];

  // const handleKeyDownUnitBox1 = (event) => {
  //   if (event.key === "Enter") {
  //     unitBox1Ref.focus();
  //   }
  // };

  const debounceMountGetScanningPackagingData = useCallback(
    debounce(mountGetScanningPackagingData, 400)
  );

  const [MBBox, setMBBox] = useState("");
  const [unitBox1Edit, setUnitBox1Edit] = useState("");
  const [unitBox2Edit, setUnitBox2Edit] = useState("");
  const [unitBox3Edit, setUnitBox3Edit] = useState("");
  const [unitBox4Edit, setUnitBox4Edit] = useState("");
  const [unitBox5Edit, setUnitBox5Edit] = useState("");
  const [unitBox6Edit, setUnitBox6Edit] = useState("");
  const [unitBox7Edit, setUnitBox7Edit] = useState("");
  const [unitBox8Edit, setUnitBox8Edit] = useState("");
  const [unitBox9Edit, setUnitBox9Edit] = useState("");
  const [unitBox10Edit, setUnitBox10Edit] = useState("");
  const scanData = [];
  const [mbSizeDetail, setMbsizeDetail] = useState([]);

  async function mountGetScanningPackagingData(scanid, mbid) {
    try {
      const getScanningPackaging = await qr.getScanningPackagingData(
        scanid,
        mbid
      );
      const { data } = getScanningPackaging.data;
      setListScanningPackaging(data);
      setMasterCodeBox(data[0].scan_mbid);
      setUnitBox1(data[0].scan_ubid !== "" ? data[0].scan_ubid : "-");
      setUnitBox2(data[1].scan_ubid !== "" ? data[1].scan_ubid : "-");
      setUnitBox3(data[2].scan_ubid !== "" ? data[2].scan_ubid : "-");
      setUnitBox4(data[3].scan_ubid !== "" ? data[3].scan_ubid : "-");
      setUnitBox5(data[4].scan_ubid !== "" ? data[4].scan_ubid : "-");
      setUnitBox6(data[5].scan_ubid !== "" ? data[5].scan_ubid : "-");
      setUnitBox7(data[6].scan_ubid !== "" ? data[6].scan_ubid : "-");
      setUnitBox8(data[7].scan_ubid !== "" ? data[7].scan_ubid : "-");
      setUnitBox9(data[8].scan_ubid !== "" ? data[8].scan_ubid : "-");
      setUnitBox10(data[9].scan_ubid !== "" ? data[9].scan_ubid : "-");
      // if (data !== null) {
      //   setListScanningPackaging(data);
      //   scanData = data;
      //   console.log("dataScanningPackaging", data);
      //   console.log("scandata", scanData);
      //   setMBBox(scanData[0].scan_mbid);
      //   setUnitBox1Edit(scanData[0].scan_ubid);
      //   if (scanData[0].scan_ubid !== "" && scanData[0].scan_ubid !== 0) {
      //     setCollapseEditUnitBox1(true);
      //   }
      //   setUnitBox2Edit(scanData[1].scan_ubid);
      //   if (scanData[1].scan_ubid !== "" && scanData[1].scan_ubid !== 0) {
      //     setCollapseEditUnitBox2(true);
      //   }
      //   setUnitBox3Edit(scanData[2].scan_ubid);
      //   if (scanData[2].scan_ubid !== "" && scanData[2].scan_ubid !== 0) {
      //     setCollapseEditUnitBox3(true);
      //   }
      //   setUnitBox4Edit(scanData[3].scan_ubid);
      //   if (scanData[3].scan_ubid !== "" && scanData[3].scan_ubid !== 0) {
      //     setCollapseEditUnitBox4(true);
      //   }
      //   setUnitBox5Edit(scanData[4].scan_ubid);
      //   if (scanData[4].scan_ubid !== "" && scanData[4].scan_ubid !== 0) {
      //     setCollapseEditUnitBox5(true);
      //   }
      //   setUnitBox6Edit(scanData[5].scan_ubid);
      //   if (scanData[5].scan_ubid !== "" && scanData[5].scan_ubid !== 0) {
      //     setCollapseEditUnitBox6(true);
      //   }
      //   setUnitBox7Edit(scanData[6].scan_ubid);
      //   if (scanData[6].scan_ubid !== "" && scanData[6].scan_ubid !== 0) {
      //     setCollapseEditUnitBox7(true);
      //   }
      //   setUnitBox8Edit(scanData[7].scan_ubid);
      //   if (scanData[7].scan_ubid !== "" && scanData[7].scan_ubid !== 0) {
      //     setCollapseEditUnitBox8(true);
      //   }
      //   setUnitBox9Edit(scanData[8].scan_ubid);
      //   if (scanData[8].scan_ubid !== "" && scanData[8].scan_ubid !== 0) {
      //     setCollapseEditUnitBox9(true);
      //   }
      //   setUnitBox10Edit(scanData[9].scan_ubid);
      //   if (scanData[9].scan_ubid !== "" && scanData[9].scan_ubid !== 0) {
      //     setCollapseEditUnitBox10(true);
      //   }
      // }

      // if (data !== null) {
      //   setListScanningPackaging(data);
      //   scanData = data;
      //   console.log("dataScanningPackaging", data);
      //   console.log("scandata", scanData);
      //   setMBBox(scanData[0].scan_mbid);
      //   setUnitBox1Edit(scanData[0].scan_ubid);
      //   if (scanData[0].scan_ubid !== "" || scanData[0].scan_ubid !== 0) {
      //     setCollapseEditUnitBox1(true);
      //     // setUnitBox1Edit(scanData[0].scan_ubid);
      //   }
      //   setUnitBox2Edit(scanData[1].scan_ubid);
      //   if (scanData[1].scan_ubid !== "" || scanData[1].scan_ubid !== 0) {
      //     setCollapseEditUnitBox2(true);
      //     // setUnitBox2Edit(scanData[1].scan_ubid);
      //   }
      //   setUnitBox3Edit(scanData[2].scan_ubid);
      //   if (scanData[2].scan_ubid !== "" || scanData[2].scan_ubid !== 0) {
      //     setCollapseEditUnitBox3(true);
      //     // setUnitBox3Edit(scanData[2].scan_ubid);
      //   }
      //   setUnitBox4Edit(scanData[3].scan_ubid);
      //   if (scanData[3].scan_ubid !== "" || scanData[3].scan_ubid !== 0) {
      //     setCollapseEditUnitBox4(true);
      //     // setUnitBox4Edit(scanData[3].scan_ubid);
      //   }
      //   setUnitBox5Edit(scanData[4].scan_ubid);
      //   if (scanData[4].scan_ubid !== "" || scanData[4].scan_ubid !== 0) {
      //     setCollapseEditUnitBox5(true);
      //     // setUnitBox5Edit(scanData[4].scan_ubid);
      //   }
      //   setUnitBox6Edit(scanData[5].scan_ubid);
      //   if (scanData[5].scan_ubid !== "" || scanData[5].scan_ubid !== 0) {
      //     setCollapseEditUnitBox6(true);
      //     // setUnitBox6Edit(scanData[5].scan_ubid);
      //   }
      //   setUnitBox7Edit(scanData[6].scan_ubid);
      //   if (scanData[6].scan_ubid !== "" || scanData[6].scan_ubid !== 0) {
      //     setCollapseEditUnitBox7(true);
      //     // setUnitBox7Edit(scanData[6].scan_ubid);
      //   }
      //   setUnitBox8Edit(scanData[7].scan_ubid);
      //   if (scanData[7].scan_ubid !== "" || scanData[7].scan_ubid !== 0) {
      //     setCollapseEditUnitBox8(true);
      //     // setUnitBox8Edit(scanData[7].scan_ubid);
      //   }
      //   setUnitBox9Edit(scanData[8].scan_ubid);
      //   if (scanData[8].scan_ubid !== "" || scanData[8].scan_ubid !== 0) {
      //     setCollapseEditUnitBox9(true);
      //     // setUnitBox9Edit(scanData[8].scan_ubid);
      //   }
      //   setUnitBox10Edit(scanData[9].scan_ubid);
      //   if (scanData[9].scan_ubid !== "" || scanData[9].scan_ubid !== 0) {
      //     setCollapseEditUnitBox10(true);
      //     // setUnitBox10Edit(scanData[9].scan_ubid);
      //   }
      // }
    } catch (error) {
      console.log(error);
    }

    // console.log(
    //   "listScanningPackagingFunc2",
    //   listScanningPackaging && listScanningPackaging
    // );
  }

  useEffect(() => {
    console.log("scanningPackaging", listScanningPackaging);
  }, [listScanningPackaging]);

  // const debounceMountGetListMasterBox = useCallback(
  //   debounce(mountGetListMasterBox, 400)
  // );

  // async function mountGetListMasterBox(scanid) {
  //   try {
  //     const getListMasterBox = await qr.getListMasterBox(scanid);
  //     const { data } = getListMasterBox.data;
  //     setListMasterBox(data);
  //     console.log("dataMasterBox", data);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // }

  const debounceMountGetListAllProduct = useCallback(
    debounce(mountGetListAllProduct, 400)
  );

  async function mountGetListAllProduct() {
    try {
      const getListProduct = await qr.getListAllProduct();
      const { data } = getListProduct.data;
      setListProduct(data);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountCreateHeaderNewBatch = useCallback(
    debounce(mountCreateHeaderNewBatch, 400)
  );

  async function mountCreateHeaderNewBatch() {
    try {
      var payload = {
        data: {
          scan_procode: payloadHeader.pro_code,
          scan_proname: payloadHeader.pro_name,
          scan_batch: selectBatchNumber,
          scan_proddate: formatDate(selectedProdDate, "YYMMDD"),
          scan_expdate: formatDate(selectedExpDate, "YYMMDD"),
        },
      };

      try {
        console.log("payload", payload);
        const createHeaderNewBatch = await qr.createHeaderNewBatch(payload);
        const { data } = createHeaderNewBatch.data;
        console.log("data", data);
        setListHeader(data);
        console.log("datascanid", data.scan_id);
        debounceMountGetListMasterBox(data.scan_id);
      } catch (error) {
        console.log(error);
      }

      console.log("pro_code", payloadHeader.pro_code);
      console.log("pro_name", payloadHeader.pro_name);
      console.log("selectBatchNumber", selectBatchNumber);
      // setModalAdd(false);
      // setModalAddSave(false);
      // debounceMountListExpired(pilihOption);
    } catch (error) {
      console.log(error);
    }
  }
  const [product, setProduct] = useState([]);
  const [productEdit, setProductEdit] = useState([]);

  useEffect(() => {
    // if (detailBool !== true) {
    if (detailBool !== true) {
      const tempArr = [];
      if (unitBox1 !== "") {
        tempArr.push(unitBox1);
      }
      if (unitBox2 !== "") {
        tempArr.push(unitBox2);
      }
      if (unitBox3 !== "") {
        tempArr.push(unitBox3);
      }
      if (unitBox4 !== "") {
        tempArr.push(unitBox4);
      }
      if (unitBox5 !== "") {
        tempArr.push(unitBox5);
      }
      if (unitBox6 !== "") {
        tempArr.push(unitBox6);
      }
      if (unitBox7 !== "") {
        tempArr.push(unitBox7);
      }
      if (unitBox8 !== "") {
        tempArr.push(unitBox8);
      }
      if (unitBox9 !== "") {
        tempArr.push(unitBox9);
      }
      if (unitBox10 !== "") {
        tempArr.push(unitBox10);
      }
      console.log("tempArr", tempArr);
      if (detailBool !== true && flag === "P") {
        setProduct(tempArr);
      }
    }

    if (detailBool === true) {
      const tempArrEdit = [];

      if (unitBox1Edit !== "") {
        setDisableUnitBox1(false);
        tempArrEdit.push(unitBox1Edit);
      }
      if (unitBox2Edit !== "" || unitBox2Edit !== 0) {
        setDisableUnitBox2(false);
        tempArrEdit.push(unitBox2Edit);
      }
      if (unitBox3Edit !== "") {
        setDisableUnitBox3(false);
        tempArrEdit.push(unitBox3Edit);
      }
      // tempArrEdit.push(product[2]);
      if (unitBox4Edit !== "") {
        setDisableUnitBox4(false);
        tempArrEdit.push(unitBox4Edit);
      }
      if (unitBox5Edit !== "") {
        setDisableUnitBox5(false);
        tempArrEdit.push(unitBox5Edit);
      }
      if (unitBox6Edit !== "") {
        setDisableUnitBox6(false);
        tempArrEdit.push(unitBox6Edit);
      }
      if (unitBox7Edit !== "") {
        setDisableUnitBox7(false);
        tempArrEdit.push(unitBox7Edit);
      }
      if (unitBox8Edit !== "") {
        setDisableUnitBox8(false);
        tempArrEdit.push(unitBox8Edit);
      }
      if (unitBox9Edit !== "") {
        setDisableUnitBox9(false);
        tempArrEdit.push(unitBox9Edit);
      }
      if (unitBox10Edit !== "") {
        setDisableUnitBox10(false);
        tempArrEdit.push(unitBox10Edit);
      }
      setProductEdit(tempArrEdit);

      if (unitBox1Edit === "") {
        setDisableUnitBox1(true);
      }
      if (unitBox2Edit === "") {
        setDisableUnitBox2(true);
      }
      if (unitBox3Edit === "") {
        setDisableUnitBox3(true);
      }
      if (unitBox4Edit === "") {
        setDisableUnitBox4(true);
      }
      if (unitBox5Edit === "") {
        setDisableUnitBox5(true);
      }
      if (unitBox6Edit === "") {
        setDisableUnitBox6(true);
      }
      if (unitBox7Edit === "") {
        setDisableUnitBox7(true);
      }
      if (unitBox8Edit === "") {
        setDisableUnitBox8(true);
      }
      if (unitBox9Edit === "") {
        setDisableUnitBox9(true);
      }
      if (unitBox10Edit === "") {
        setDisableUnitBox10(true);
      }
    }
  }, [
    unitBox1,
    unitBox2,
    unitBox3,
    unitBox4,
    unitBox5,
    unitBox6,
    unitBox7,
    unitBox8,
    unitBox9,
    unitBox10,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,

    disableUnitBox1,
    disableUnitBox2,
    disableUnitBox3,
    disableUnitBox4,
    disableUnitBox5,
    disableUnitBox6,
    disableUnitBox7,
    disableUnitBox8,
    disableUnitBox9,
    disableUnitBox10,
    // detailBool,
    // product,
    // productEdit,
  ]);

  useEffect(() => {
    console.log("product", product);
    console.log("productEdit", productEdit);
  }, [
    unitBox1,
    unitBox2,
    unitBox3,
    unitBox4,
    unitBox5,
    unitBox6,
    unitBox7,
    unitBox8,
    unitBox9,
    unitBox10,

    unitBox1Edit,
    unitBox2Edit,
    unitBox3Edit,
    unitBox4Edit,
    unitBox5Edit,
    unitBox6Edit,
    unitBox7Edit,
    unitBox8Edit,
    unitBox9Edit,
    unitBox10Edit,
  ]);

  // useEffect(() => {
  //   if (!router.isReady) return;
  //   if (router.query.id !== "undefined") {
  //     var props = router.query;
  //     setNoID(props.id);
  //   } else {
  //     router.push({
  //       pathname: "/approval",
  //     });
  //   }
  // }, [router.isReady]);

  async function mountCreateDetailNewBatch() {
    try {
      var k;
      var y;
      y = 0;
      // for (k = 1; k <= 10; k++) {
      if (unitBox1 !== "") {
        y = y + 1;
      }
      if (unitBox2 !== "") {
        y = y + 1;
      }
      if (unitBox3 !== "") {
        y = y + 1;
      }
      if (unitBox4 !== "") {
        y = y + 1;
      }
      if (unitBox5 !== "") {
        y = y + 1;
      }
      if (unitBox6 !== "") {
        y = y + 1;
      }
      if (unitBox7 !== "") {
        y = y + 1;
      }
      if (unitBox8 !== "") {
        y = y + 1;
      }
      if (unitBox9 !== "") {
        y = y + 1;
      }
      if (unitBox10 !== "") {
        y = y + 1;
      }
      // }
      console.log("y", y);
      var x;
      var j;
      j = 10 - y;
      var k;
      k = 1;
      console.log("j", j);
      for (x = 1; x <= listHeader.scan_mbsize - j; x++) {
        var test;
        test = listHeader.scan_id;
        // var payload = {
        //   data: {
        //     scan_id: test,
        //     scan_mbid: masterCodeBox,
        //     scan_ubid:
        //       // unitBox1,
        //       x === 1
        //         ? unitBox1
        //         : x === 2
        //         ? unitBox2
        //         : x === 3
        //         ? unitBox3
        //         : x === 4
        //         ? unitBox4
        //         : x === 5
        //         ? unitBox5
        //         : x === 6
        //         ? unitBox6
        //         : x === 7
        //         ? unitBox7
        //         : x === 8
        //         ? unitBox8
        //         : x === 9
        //         ? unitBox9
        //         : unitBox10,
        //     scan_sampleyn: "Y",

        //     // scan_id: listHeader[0].scan_id,
        //     // scan_mbid:
        //   },
        // };

        var payload = {
          data: {
            scan_id: test,
            scan_mbid: masterCodeBox,
            scan_uburut:
              x === 1
                ? k
                : x === 2
                ? k
                : x === 3
                ? k
                : x === 4
                ? k
                : x === 5
                ? k
                : x === 6
                ? k
                : x === 7
                ? k
                : x === 8
                ? k
                : x === 9
                ? k
                : k,
            scan_ubid:
              // unitBox1,
              x === 1
                ? product[0]
                : x === 2
                ? product[1]
                : x === 3
                ? product[2]
                : x === 4
                ? product[3]
                : x === 5
                ? product[4]
                : x === 6
                ? product[5]
                : x === 7
                ? product[6]
                : x === 8
                ? product[7]
                : x === 9
                ? product[8]
                : product[9],
            scan_sampleyn: "Y",

            // scan_id: listHeader[0].scan_id,
            // scan_mbid:
          },
        };
        k = k + 1;

        // }

        console.log("payload", payload);
        const createDetailNewBatch = await qr.createDetailNewBatch(payload);
        const { data } = createDetailNewBatch.data;
        console.log("data", data);
        // setListHeader(data);
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function mountUpdateUBID() {
    try {
      // var k;
      var y;
      y = 0;
      // for (k = 1; k <= 10; k++) {
      if (unitBox1Edit !== "") {
        y = y + 1;
      }
      if (unitBox2Edit !== "") {
        y = y + 1;
      }
      if (unitBox3Edit !== "") {
        y = y + 1;
      }
      if (unitBox4Edit !== "") {
        y = y + 1;
      }
      if (unitBox5Edit !== "") {
        y = y + 1;
      }
      if (unitBox6Edit !== "") {
        y = y + 1;
      }
      if (unitBox7Edit !== "") {
        y = y + 1;
      }
      if (unitBox8Edit !== "") {
        y = y + 1;
      }
      if (unitBox9Edit !== "") {
        y = y + 1;
      }
      if (unitBox10Edit !== "") {
        y = y + 1;
      }
      // }
      console.log("y", y);
      var x;
      var j;
      j = 10 - y;
      // var k;
      // k = 1;
      console.log("j", j);
      // for (x = 1; x <= listHeader.scan_mbsize - j; x++) {
      for (x = 1; x <= mbSizeDetail.cnt; x++) {
        var test;
        test = listHeader.scan_id;
        var payload = {
          data: {
            scan_id: test,
            scan_mbid: listScanningPackaging[0].scan_mbid,
            scan_uburut:
              x === 1
                ? 1
                : x === 2
                ? 2
                : x === 3
                ? 3
                : x === 4
                ? 4
                : x === 5
                ? 5
                : x === 6
                ? 6
                : x === 7
                ? 7
                : x === 8
                ? 8
                : x === 9
                ? 9
                : 10,
            scan_ubid:
              // unitBox1,
              x === 1
                ? productEdit[0]
                : x === 2
                ? productEdit[1]
                : x === 3
                ? productEdit[2]
                : x === 4
                ? productEdit[3]
                : x === 5
                ? productEdit[4]
                : x === 6
                ? productEdit[5]
                : x === 7
                ? productEdit[6]
                : x === 8
                ? productEdit[7]
                : x === 9
                ? productEdit[8]
                : productEdit[9],
            scan_sampleyn: "Y",

            // scan_id: listHeader[0].scan_id,
            // scan_mbid:
          },
        };
        // k = k + 1;

        // }

        console.log("payloadUpdate", payload);
        const updateUBID = await qr.updateDetailUBID(payload);
        const { data } = updateUBID.data;
        console.log("data", data);
        // setListHeader(data);
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function savePayloadHeader(e) {
    setSelectProduct(e.target.value);
    setPayloadHeader(item);
  }

  async function checkSample() {
    console.log("checkSample", checkedSample);
    setCheckedSample(true);
  }

  const debounceMountGetSeeMBList = useCallback(
    debounce(mountGetSeeMBList, 400)
  );

  async function mountGetSeeMBList() {
    try {
      const mountGetSeeMBList = await qr.getSeeMBList(listHeader.scan_id);
      const { data } = mountGetSeeMBList.data;
      setListSeeMB(data);
      setModalSeeMbList(true);
      console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  async function testLog() {
    console.log("seeMBList", listSeeMB);
    setModalSeeMbList(false);
  }

  // async function detailScanningPackaging(item) {
  //   setFlag("P");
  //   // setDetailBool(true);
  //   // debounceMountGetScanningPackagingData(listHeader.scan_id, item.scan_mbid);
  //   // setMbsizeDetail(item);
  //   // console.log("scanid", listHeader.scan_id);
  //   // console.log("itemMBID", item);
  //   // console.log("listScanningPackaging", listScanningPackaging);
  //   // console.log("product", product);
  //   // console.log("productEdit", productEdit);
  //   // setCollapseSaveUnitBox1(false);
  //   // setCollapseSaveUnitBox2(false);
  //   // setCollapseSaveUnitBox3(false);
  //   // setCollapseSaveUnitBox4(false);
  //   // setCollapseSaveUnitBox5(false);
  //   // setCollapseSaveUnitBox6(false);
  //   // setCollapseSaveUnitBox7(false);
  //   // setCollapseSaveUnitBox8(false);
  //   // setCollapseSaveUnitBox9(false);
  //   // setCollapseSaveUnitBox10(false);
  // }

  async function finishPackaging() {
    try {
      const mountUpdateUBID = await qr.updatePackingSelesai(listHeader.scan_id);
      const { data } = mountUpdateUBID.data;
      setModalPackingSelesai2(true);
      // console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  // ---------------------------------------------------------------------
  useEffect(() => {
    if (!router.isReady) return;
    if (router.query.id !== "undefined") {
      var props = router.query;
      setNoID(props.id);
    } else {
      router.push({
        pathname: "/approval",
      });
    }
    // debounceMountGetHeader(noID);
    // console.log("listHeader", listHeader);
  }, [router.isReady]);

  async function mountGetHeader() {
    try {
      const mountGetHeader = await qr.getHeader(noID);
      const { data } = mountGetHeader.data;
      setListHeader(data);
      console.log("noID", noID);
      // setListSeeMB(data);
      // setModalSeeMbList(true);
      console.log("listScanningPackagingSeeMBList", listScanningPackaging);
    } catch (error) {
      console.log(error);
    }
  }

  const debounceMountGetHeader = useCallback(debounce(mountGetHeader, 400));

  useEffect(() => {
    if (flag === "D" && noID !== "") {
      debounceMountGetHeader();
      debounceMountGetListMasterBox(noID);
      console.log("listHeader", listHeader);
    }
  }, [noID]);

  const debounceMountGetListMasterBox = useCallback(
    debounce(mountGetListMasterBox, 400)
  );

  async function mountGetListMasterBox(scanid) {
    try {
      const getListMasterBox = await qr.getListMasterBox(scanid);
      const { data } = getListMasterBox.data;
      setListMasterBox(data);
      console.log("dataMasterBox", data);
    } catch (error) {
      console.log(error);
    }
  }

  async function detailScanningPackaging(item) {
    setFlag("P");
    // setDetailBool(true);
    debounceMountGetScanningPackagingData(noID, item.scan_mbid);
    // setMbsizeDetail(item);
    // console.log("scanid", listHeader.scan_id);
    // console.log("itemMBID", item);
    // console.log("listScanningPackaging", listScanningPackaging);
    // console.log("product", product);
    // console.log("productEdit", productEdit);
    // setCollapseSaveUnitBox1(false);
    // setCollapseSaveUnitBox2(false);
    // setCollapseSaveUnitBox3(false);
    // setCollapseSaveUnitBox4(false);
    // setCollapseSaveUnitBox5(false);
    // setCollapseSaveUnitBox6(false);
    // setCollapseSaveUnitBox7(false);
    // setCollapseSaveUnitBox8(false);
    // setCollapseSaveUnitBox9(false);
    // setCollapseSaveUnitBox10(false);
  }

  async function backDetail() {
    setFlag("D");
    setUnitBox1("");
    setUnitBox2("");
    setUnitBox3("");
    setUnitBox4("");
    setUnitBox5("");
    setUnitBox6("");
    setUnitBox7("");
    setUnitBox8("");
    setUnitBox9("");
    setUnitBox10("");
  }

  // useEffect(()=>)

  return (
    <>
      {
        //   flag === "Y" ? (
        //     <Box sx={{ width: "100%", textAlign: "center" }}>
        //       <Grid
        //         container
        //         justifyContent={"space-between"}
        //         sx={{ margin: "1%" }}
        //       >
        //         <Grid container item xs={10}>
        //           <Typography
        //             variant="h5"
        //             sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
        //           >
        //             SCAN NEW BATCH
        //           </Typography>
        //         </Grid>
        //       </Grid>

        //       <Grid
        //         container
        //         spacing={0}
        //         direction="column"
        //         alignItems="center"
        //         justifyContent="center"
        //         style={{ minHeight: "85vh", textAlign: "center" }}
        //       >
        //         <Paper>
        //           <Grid sx={{ ml: 2, mr: 2 }}>
        //             {/* <Paper sx={{ marginRight: "35px", marginLeft: "35px" }}> */}
        //             <Grid
        //             // sx={{ margin: "1%" }}
        //             >
        //               <FormControl
        //                 sx={{ backgroundColor: "white", width: "50vh", mt: 3 }}
        //               >
        //                 <InputLabel>Select Product</InputLabel>
        //                 <Select
        //                   variant="outlined"
        //                   size="small"
        //                   label="Select Product"
        //                   // value={selectProduct}
        //                   onChange={(e) => setSelectProduct(e.target.value)}
        //                 >
        //                   {listProduct &&
        //                     listProduct.map((item) => (
        //                       <MenuItem
        //                         onClick={() => setPayloadHeader(item)}
        //                         key={item}
        //                         value={item}
        //                       >
        //                         {/* {item.comco} -  */}
        //                         {item.pro_name}
        //                       </MenuItem>
        //                     ))}
        //                 </Select>
        //               </FormControl>
        //             </Grid>
        //             <Grid
        //               // sx={{ margin: "1%" }}
        //               sx={{ mt: 1 }}
        //             >
        //               <FormControl
        //                 sx={{
        //                   backgroundColor: "white",
        //                   width: "50vh",
        //                   marginTop: 1,
        //                 }}
        //               >
        //                 <TextField
        //                   size="small"
        //                   variant="outlined"
        //                   placeholder={"Input Batch Number"}
        //                   onChange={(e) => setSelectBatchNumber(e.target.value)}
        //                 ></TextField>
        //               </FormControl>
        //             </Grid>
        //             <Grid sx={{ mt: 2 }}>
        //               <DesktopDatePicker
        //                 label="Production Date"
        //                 value={selectedProdDate}
        //                 onChange={(newValue) => setSelectedProdDate(newValue)}
        //                 renderInput={(params) => (
        //                   <TextField
        //                     size="small"
        //                     {...params}
        //                     sx={{ background: "white", width: "100%" }}
        //                   />
        //                 )}
        //               />
        //             </Grid>
        //             <Grid sx={{ mt: 2 }}>
        //               <DesktopDatePicker
        //                 label="Expired Date"
        //                 value={selectedExpDate}
        //                 onChange={(newValue) => setSelectedExpDate(newValue)}
        //                 renderInput={(params) => (
        //                   <TextField
        //                     size="small"
        //                     {...params}
        //                     sx={{ background: "white", width: "100%" }}
        //                   />
        //                 )}
        //               />
        //             </Grid>
        //             <Grid sx={{ textAlign: "right", marginTop: 2 }}>
        //               <Button
        //                 variant="contained"
        //                 sx={{ marginBottom: 2 }}
        //                 onClick={() => start()}
        //               >
        //                 Start
        //               </Button>
        //             </Grid>
        //             {/* </Grid> */}
        //           </Grid>
        //         </Paper>
        //       </Grid>
        //       <Modal open={modalScanBatch}>
        //         <Box sx={style}>
        //           <Grid>
        //             <Typography sx={{ fontWeight: 600 }}>Watch out!</Typography>
        //             <Typography>
        //               Information of product and batch is still incomplete!
        //             </Typography>
        //             <Button
        //               sx={{
        //                 marginTop: 1,
        //                 float: "right",
        //               }}
        //               variant="outlined"
        //               onClick={() => setModalScanBatch(false)}
        //             >
        //               OK
        //             </Button>
        //           </Grid>
        //         </Box>
        //       </Modal>

        //       <Modal open={modalStartScanNewBatch}>
        //         <Box sx={style}>
        //           <Grid>
        //             <Typography variant="h5" sx={{ fontWeight: 600, mb: 1 }}>
        //               Hello!
        //             </Typography>
        //             <Typography>
        //               Are you sure to start the scanning process of new batch?
        //             </Typography>
        //             <Divider sx={{ my: 2 }}></Divider>
        //             <Grid>
        //               <Button
        //                 variant="contained"
        //                 sx={{ backgroundColor: "primary.main", marginLeft: "27em" }}
        //                 onClick={() => start2()}
        //               >
        //                 YES
        //               </Button>

        //               <Button
        //                 variant="contained"
        //                 sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
        //                 onClick={() => setModalStartScanNewBatch(false)}
        //               >
        //                 NO
        //               </Button>
        //             </Grid>
        //           </Grid>
        //         </Box>
        //       </Modal>
        //       {/* </Paper> */}
        //     </Box>
        //   ) :
        flag === "D" ? (
          <Box sx={{ width: "100%", textAlign: "center" }}>
            <Grid
              container
              justifyContent={"space-between"}
              sx={{ margin: "1%" }}
            >
              <Grid container item xs={10} sx={{ mb: 2 }}>
                <Button
                  variant="contained"
                  // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                  onClick={() => router.push(`/approval`)}
                >
                  <KeyboardBackspaceIcon />
                </Button>
              </Grid>
              <Grid container item xs={10}>
                {/* <Button
                  variant="contained"
                  // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                  onClick={() => router.push(`/approval`)}
                >
                  <KeyboardBackspaceIcon />
                </Button> */}
                <Typography
                  variant="h5"
                  sx={{
                    fontWeight: 600,
                    mt: 0.5,
                    textAlign: "left",
                    ml: 2,
                    mb: 3,
                  }}
                >
                  SCAN NEW BATCH
                </Typography>
              </Grid>
            </Grid>
            {/* ------------------------------------------------------------ */}

            <Grid container sx={{ ml: 6 }}>
              <Grid container>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    Product
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 11,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {listHeader.scan_proname}
                  </Typography>
                </Grid>
              </Grid>

              <Grid container sx={{ mt: 1 }}>
                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 2,
                    }}
                  >
                    Batch Number
                  </Typography>
                </Grid>

                <Grid item>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    :
                  </Typography>
                </Grid>

                <Grid>
                  <Typography
                    // variant="h5"
                    sx={{
                      fontWeight: 600,
                      // mt: 3,
                      // mt: 1,
                      textAlign: "left",
                      ml: 5,
                    }}
                  >
                    {listHeader.scan_batch}
                  </Typography>
                </Grid>
              </Grid>

              <Collapse in={collapseDetailScanNewBatch}>
                <Grid container sx={{ mt: 1 }}>
                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                      }}
                    >
                      MB Size
                    </Typography>
                  </Grid>

                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 11,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>

                  <Grid>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        // mt: 1,
                        textAlign: "left",
                        ml: 5,
                      }}
                    >
                      {listHeader.scan_mbsize} {"UB"}
                    </Typography>
                  </Grid>
                </Grid>

                <Grid container sx={{ mt: 1 }}>
                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                      }}
                    >
                      NIE
                    </Typography>
                  </Grid>

                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 15,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>

                  <Grid>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        // mt: 1,
                        textAlign: "left",
                        ml: 5.3,
                      }}
                    >
                      {listHeader.scan_nie}
                    </Typography>
                  </Grid>
                </Grid>

                <Grid container sx={{ mt: 1 }}>
                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                      }}
                    >
                      Production Date
                    </Typography>
                  </Grid>

                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 3.3,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>

                  <Grid>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        // mt: 1,
                        textAlign: "left",
                        ml: 5,
                      }}
                    >
                      {formatDate(listHeader.scan_proddate, "DD MMM YYYY")}
                    </Typography>
                  </Grid>
                </Grid>

                <Grid container sx={{ mt: 1 }}>
                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                      }}
                    >
                      Expired Date
                    </Typography>
                  </Grid>

                  <Grid item>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 6.5,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>

                  <Grid>
                    <Typography
                      // variant="h5"
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        // mt: 1,
                        textAlign: "left",
                        ml: 5,
                      }}
                    >
                      {formatDate(listHeader.scan_expdate, "DD MMM YYYY")}
                    </Typography>
                  </Grid>
                </Grid>
              </Collapse>
              <Divider width="93%" objectFit="contain" sx={{ mt: 4 }} />
              <Divider width="93%" objectFit="contain" />
            </Grid>

            {/* ------------------------------------------------------------ */}
            {/* <Paper fullWidth fullHeight> */}
            <Grid sx={{ backgroundColor: "white" }}>
              {/* <Paper
              // width="100%" height="100%" objectFit="contain"
              > */}
              <Collapse in={collapseDetailScanNewBatchButtonUp}>
                <Grid sx={{ textAlign: "right", mr: 3 }}>
                  {/* <Typography>adasfagdsv</Typography> */}
                  <Button
                    // color="error"
                    variant="outlined"
                    onClick={() => hideDetailScanNewBatch()}
                    // fullWidth
                    startIcon={<ArrowDropUpIcon />}
                    sx={{ backgroundColor: "#f0f0f0", textAlign: "center" }}
                    size="small"
                  >
                    {/* Keluar */}
                  </Button>
                </Grid>
              </Collapse>
              <Collapse in={collapseDetailScanNewBatchButtonDown}>
                <Grid sx={{ textAlign: "right", mr: 3 }}>
                  {/* <Typography>adasfagdsv</Typography> */}
                  <Button
                    // color="error"
                    variant="outlined"
                    onClick={() => showDetailScanNewBatch()}
                    // fullWidth
                    startIcon={<ArrowDropDownIcon />}
                    sx={{ backgroundColor: "#f0f0f0", textAlign: "center" }}
                  >
                    {/* Keluar */}
                  </Button>
                </Grid>
              </Collapse>
              {/* </Paper> */}
              {/* </Grid> */}
              <Grid>
                <Typography
                  sx={{ fontWeight: 600, textAlign: "left", ml: 5, mt: 1 }}
                >
                  List Of Master Box
                  <Divider sx={{ width: "95%" }} />
                  <Divider sx={{ width: "95%" }} />
                </Typography>
              </Grid>
              <Table sx={{ ml: 5 }}>
                <TableBody>
                  {/* {listMasterBox &&
                    listMasterBox.map((item, index) => ( */}
                  {listMasterBox &&
                    listMasterBox.map((item, index) => (
                      <TableRow key={item}>
                        <TableCell>
                          {/* <Link
                        href={`/general-ledger/${item.tahun}/${item.bulan}/${item.coa_id}`}
                      > */}
                          {/* {item.scan_mbid} - {item.scan_ubid} {"UB"} */}
                          {item.scan_mbid} - {item.cnt} {"UB"}
                          {/* </Link> */}
                        </TableCell>
                        <TableCell>
                          <Button
                            variant="contained"
                            sx={{
                              float: "right",
                              marginBottom: 2,
                              mr: 13,
                              mt: 2,
                              color: "black",
                              backgroundColor: "white",
                              // bo
                            }}
                            // onClick={() => packingFinish()}
                            onClick={() => detailScanningPackaging(item)}
                          >
                            Detail
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                </TableBody>
              </Table>
              {/* <Grid
                container
                // sx={{ float: "right", width: "15%" }}
                // sx={{ width: "100%" }}
              >
                <Grid container>
                  <Grid item sx={{ float: "right", width: "100%" }}>
                    <Button
                      // color="error"
                      // variant="outlined"

                      // fullWidth
                      // startIcon={<AddCircle />}
                      // sx={{ backgroundColor: "#f0f0f0" }}
                      // sx={{}}
                      onClick={() => packaging()}
                      sx={{ float: "right", width: "15%" }}
                    >
                      <AddCircle sx={{ fontSize: 35, color: "teal" }} />
                    </Button>
                  </Grid>

                  <Grid item sx={{ float: "right", width: "100%" }}>
                    <Collapse in={collapsePackagingSelesaiButton}>
                      <Button
                        variant="contained"
                        sx={{ float: "right", marginBottom: 2, mr: 13, mt: 2 }}
                        onClick={() => packingFinish()}
                      >
                        Packaging Selesai
                      </Button>
                    </Collapse>
                  </Grid>
                </Grid>
              </Grid> */}
            </Grid>
            {/* </Paper> */}
            <Modal open={modalPackingSelesai}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Watch out!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    Are you sure to finish packing process?
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "27em",
                      }}
                      onClick={() => finishPackaging()}
                    >
                      YES
                    </Button>

                    <Button
                      variant="contained"
                      sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                      onClick={() => setModalPackingSelesai(false)}
                    >
                      NO
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>
            <Modal open={modalPackingSelesai2}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Congrats!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    {/* Data QR Batch AAAA-123456-01 successfully saved. */}
                    Data QR Batch {""}
                    {listHeader.scan_batch}
                    {""} successfully saved.
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "33em",
                      }}
                      onClick={() => packingFinishModal()}
                    >
                      OK
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>
          </Box>
        ) : flag === "P" ? (
          <Box sx={{ width: "100%", textAlign: "center" }}>
            <Grid
              container
              justifyContent={"space-between"}
              sx={{ margin: "1%", mb: 2 }}
            >
              <Grid container item xs={10} sx={{ mb: 2 }}>
                <Button
                  variant="contained"
                  // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                  onClick={() => backDetail()}
                >
                  <KeyboardBackspaceIcon />
                </Button>
                {/* <Typography
                  variant="h5"
                  sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
                >
                  SCANNING PACKAGING
                </Typography> */}
              </Grid>
              <Grid container item xs={10}>
                {/* <Button
                  variant="contained"
                  // sx={{ float: "left", ml: 2, backgroundColor: "error.main" }}
                  onClick={() => deleteUnitBox1()}
                >
                  
                </Button> */}
                <Typography
                  variant="h5"
                  sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
                >
                  SCANNING PACKAGING
                </Typography>
              </Grid>
            </Grid>

            <Divider
              width="91%"
              objectFit="contain"
              sx={{ mt: 4, float: "center", ml: 8 }}
            />
            <Divider
              width="91%"
              objectFit="contain"
              sx={{ float: "center", ml: 8 }}
            />

            <Grid sx={{ ml: 6, mt: 5 }} container>
              {/* <Paper> */}
              <Grid item flex={1}>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 2,
                  }}
                >
                  Master Code Box
                </Typography>
              </Grid>
              <Grid item flex={0.2}>
                <Typography
                  // variant="h5"
                  sx={{
                    fontWeight: 600,
                    // mt: 3,
                    textAlign: "left",
                    ml: 2,
                    mt: 1,
                  }}
                >
                  :
                </Typography>
              </Grid>
              <Grid item flex={5}>
                <TextField
                  sx={{ float: "left" }}
                  fullWidth
                  size="small"
                  // onChange={(e) => setMasterCodeBox(e.target.value)}
                  value={masterCodeBox}
                  disabled

                  // onKeyDown={handleKeyDownUnitBox1}
                  // disabled
                ></TextField>
              </Grid>
              <Grid item flex={2}>
                <Button
                  // color="error"
                  variant="outlined"
                  onClick={() => debounceMountGetSeeMBList()}
                  // fullWidth
                  // startIcon={<LogoutIcon />}
                  sx={{ float: "center" }}
                  size="medium"
                >
                  See MB List
                </Button>
              </Grid>
            </Grid>
            <Divider
              width="91%"
              objectFit="contain"
              sx={{ mt: 4, float: "center", ml: 8 }}
            />
            <Divider
              width="91%"
              objectFit="contain"
              sx={{ float: "center", ml: 8 }}
            />
            <Grid sx={{ ml: 8, mt: 2 }} container>
              {listScanningPackaging.map((item, index) => (
                <Grid key={index} sx={{ mt: 2 }} container>
                  <Grid item flex={1}>
                    {/* <Typography>{item.name}</Typography> */}
                    <Typography
                      sx={{
                        fontWeight: 600,
                        // mt: 3,
                        textAlign: "left",
                        ml: 2,
                        mt: 1,
                      }}
                    >
                      Unit Box Code {index + 1}
                    </Typography>
                  </Grid>
                  <Grid item flex={0.2}>
                    <Typography
                      sx={{
                        fontWeight: 600,
                        textAlign: "left",
                        ml: 2,
                        mt: 1,
                      }}
                    >
                      :
                    </Typography>
                  </Grid>
                  <Grid item flex={3.5}>
                    <TextField
                      id={`item${index}`}
                      value={item.scan_ubid}
                      // onChange={(e) => testings(e, index)}
                      // inputRef={(el) => (unitBox1Ref = el)}
                      // inputRef={(el) => (unitBox1Ref[`item${index}`] = el)}
                      // disabled={(index) => disableTestBox1[`item${index}`]}
                      // disabled={!disableTestBox1.some(({}))}
                      // disabled
                      // disabled={disableTestBox1}
                      // sx={{ ml: 2 }}
                      sx={{ float: "left", width: "100%" }}
                      size="small"
                      // disabled={index > 0 && inputValue[`item${index - 1}`].trim() === ""}
                      // disabled={
                      //   inputValue[`item${index - 1}`] == "" &&
                      //   masterCodeBox !== ""
                      // }
                      disabled
                    ></TextField>
                  </Grid>
                  <Grid item flex={1.57}></Grid>
                  {/* {changeButton(item, index)} */}
                </Grid>
                // </Grid>
              ))}
            </Grid>

            {/* <Grid sx={{ mt: 2 }}></Grid> */}

            {/* <G */}
            <Modal open={modalScanningPackagingNotFull}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Heads Up!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    Data of unit box code is incomplete. Are you sure to
                    proceed?
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "27em",
                      }}
                      onClick={() => saveAndContinueFinish()}
                    >
                      YES
                    </Button>

                    <Button
                      variant="contained"
                      sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                      onClick={() => setModalScanningPackagingNotFull(false)}
                    >
                      NO
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>

            <Modal open={modalScanningPackagingNotFullFinish}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Heads Up!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    Data of unit box code is incomplete. Are you sure to
                    proceed?
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "27em",
                      }}
                      onClick={() => saveAndContinueFinish() && setFlag("D")}
                    >
                      YES
                    </Button>

                    <Button
                      variant="contained"
                      sx={{ backgroundColor: "error.main", marginLeft: "1em" }}
                      onClick={() =>
                        setModalScanningPackagingNotFullFinish(false)
                      }
                    >
                      NO
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>

            <Modal open={modalValidationSaveAndFinish}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Heads Up!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    Scan QR on master box ﬁrst!
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "33em",
                      }}
                      onClick={() => setModalValidationSaveAndFinish(false)}
                    >
                      OK
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>

            <Modal
              open={modalValidatonUnitBox10}
              inputRef={(el) => (unitBox11Ref = el)}
            >
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    Heads Up!
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    Error
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "33em",
                      }}
                      onClick={() => setModalValidatonUnitBox10(false)}
                    >
                      OK
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>

            <Modal open={modalSeeMbList}>
              <Box sx={style}>
                <Grid>
                  <Typography
                    // sx={{ textAlign: "center", fontWeight: "bold" }}
                    variant="h5"
                    sx={{ fontWeight: 600, mb: 1 }}
                  >
                    {/* Heads Up! */}
                    Master Box Code ={" "}
                    {listSeeMB.scan_id !== ""
                      ? ("", listSeeMB.scan_mbid)
                      : "Empty"}
                  </Typography>
                  <Typography
                  // sx={{ textAlign: "center", fontWeight: "bold" }}
                  >
                    {/* Error */}
                    This Master Box is{" "}
                    {listSeeMB.scan_sampleyn === "Y"
                      ? "retained sample"
                      : listSeeMB.scan_sampleyn === "N"
                      ? "not retained sample"
                      : "Empty"}
                  </Typography>
                  <Divider sx={{ my: 2 }}></Divider>
                  <Grid>
                    {/* <Divider sx={{ my: 2 }}></Divider> */}
                    <Button
                      variant="contained"
                      sx={{
                        backgroundColor: "primary.main",
                        marginLeft: "33em",
                      }}
                      // onClick={() => setModalSeeMbList(false)}
                      onClick={() => testLog(false)}
                    >
                      OK
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Modal>
          </Box>
        ) : (
          <Box sx={{ width: "50%", textAlign: "center" }}>
            <Grid
              container
              justifyContent={"space-between"}
              sx={{ margin: "1%" }}
            >
              <Grid container item xs={10}>
                <Typography
                  variant="h5"
                  sx={{ fontWeight: 600, mt: 0.5, textAlign: "left", ml: 2 }}
                >
                  SCAN NEW BATCH
                </Typography>
              </Grid>
            </Grid>
          </Box>
        )
      }
    </>
  );
};

export default ScanNewBatch;
